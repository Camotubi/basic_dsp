var searchIndex = {};
searchIndex["basic_dsp"] = {"doc":"Basic digital signal processing (DSP) operations","items":[[3,"GenericDataVector","basic_dsp","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations.\nAll data vector operations consume the vector they operate on and return a new vector. A consumed vector\nmust not be accessed again.",null,null],[3,"ComplexFreqVector","","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations.\nAll data vector operations consume the vector they operate on and return a new vector. A consumed vector\nmust not be accessed again.",null,null],[3,"ComplexTimeVector","","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations.\nAll data vector operations consume the vector they operate on and return a new vector. A consumed vector\nmust not be accessed again.",null,null],[3,"RealTimeVector","","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations.\nAll data vector operations consume the vector they operate on and return a new vector. A consumed vector\nmust not be accessed again.",null,null],[3,"RealFreqVector","","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations.\nAll data vector operations consume the vector they operate on and return a new vector. A consumed vector\nmust not be accessed again.",null,null],[3,"Statistics","","Statistics about the data in a vector",null,null],[12,"sum","","",0,null],[12,"count","","",0,null],[12,"average","","",0,null],[12,"rms","","",0,null],[12,"min","","",0,null],[12,"min_index","","",0,null],[12,"max","","",0,null],[12,"max_index","","",0,null],[3,"MultiCoreSettings","","Holds parameters which specifiy how multiple cores are used\nto execute an operation.",null,null],[12,"core_limit","","All operations will be limited to not create more threads than specified here",1,null],[12,"early_temp_allocation","","Indicates whether the temp arrays of a vector should already be allocated during\nconstruction",1,null],[4,"DataVectorDomain","","The domain of a data vector",null,null],[13,"Time","","Time domain, the x-axis is in [s]",2,null],[13,"Frequency","","Frequency domain, the x-axis in in [Hz]",2,null],[4,"ErrorReason","","Enumeration of all error reasons",null,null],[13,"VectorsMustHaveTheSameSize","","The operations requires all vectors to have the same size,\nin most cases this means that the following must be true:\n`self.len()` == `argument.len()`",3,null],[13,"VectorMetaDataMustAgree","","The operations requires all vectors to have the same meta data\nin most cases this means that the following must be true:\n`self.is_complex()` == `argument.is_complex()` &amp;&amp;\n`self.domain()` == `argument.domain()` &amp;&amp;\n`self.delta()`== `argument.domain()`;\nConsider to convert one of the vectors so that this conidition is true.\nThe necessary operations may include FFT/IFFT, complex/real conversion and resampling.",3,null],[13,"VectorMustBeComplex","","The operation requires the vector to be complex.",3,null],[13,"VectorMustBeReal","","The operation requires the vector to be real.",3,null],[13,"VectorMustBeInTimeDomain","","The operation requires the vector to be in time domain.",3,null],[13,"VectorMustBeInFrquencyDomain","","The operation requires the vector to be in frequency domain.",3,null],[13,"InvalidArgumentLength","","The arguments have an invalid length to perform the operation. The\noperations documentation should have more information about the requirements.\nPlease open a defect if this isn&#39;t the case.",3,null],[13,"VectorMustBeConjSymmetric","","The operations is only valid if the data vector contains half of a symmetric spectrum.\nThe symmetry definition follows soon however more important is that the element at 0 Hz\nwhich happens to be the first vector element must be real. This is actually violated \nif this error message appears and the rest of the definition is only listed here for\ncompletness.\nThe required symmetry is that for every point `vector[x].conj() == vector[-x]`(pseudocode)\nwhere `x` is the x-axis position relativ to 0Hz and `conj` is the complex conjungate.",3,null],[13,"VectorMustHaveAnOddLength","","`self.points()` must be an odd number.",3,null],[13,"ArgumentFunctionMustBeSymmetric","","The function passed as argument must be symmetric",3,null],[4,"Operation","","An alternative way to define operations on a vector.\nWarning: Highly unstable and not even fully implemented right now.",null,null],[13,"AddReal","","",4,null],[13,"AddComplex","","",4,null],[13,"MultiplyReal","","",4,null],[13,"MultiplyComplex","","",4,null],[13,"AbsReal","","",4,null],[13,"AbsComplex","","",4,null],[13,"Sqrt","","",4,null],[4,"PaddingOption","","An option which defines how a vector should be padded",null,null],[13,"End","","Appends zeros to the end of the vector.",5,null],[13,"Surround","","Surrounds the vector with zeros at the beginning and at the end.",5,null],[13,"Center","","Inserts zeros in the center of the vector",5,null],[11,"clone","","",2,{"inputs":[{"name":"datavectordomain"}],"output":{"name":"datavectordomain"}}],[11,"eq","","",2,{"inputs":[{"name":"datavectordomain"},{"name":"datavectordomain"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"datavectordomain"},{"name":"datavectordomain"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"datavectordomain"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"errorreason"}],"output":{"name":"errorreason"}}],[11,"eq","","",3,{"inputs":[{"name":"errorreason"},{"name":"errorreason"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"errorreason"},{"name":"errorreason"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"errorreason"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"statistics"}],"output":{"name":"statistics"}}],[11,"eq","","",0,{"inputs":[{"name":"statistics"},{"name":"statistics"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"statistics"},{"name":"statistics"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"statistics"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"paddingoption"}],"output":{"name":"paddingoption"}}],[11,"eq","","",5,{"inputs":[{"name":"paddingoption"},{"name":"paddingoption"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"paddingoption"},{"name":"paddingoption"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"paddingoption"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new_with_options","","Same as `new` but also allows to set multicore options.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"f32"},{"name":"usize"},{"name":"f32"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_array_with_options","","Same as `from_array` but also allows to set multicore options.",6,null],[11,"from_array_no_copy_with_options","","Same as `from_array_no_copy` but also allows to set multicore options.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"vec"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_array_with_delta_and_options","","Same as `from_array_with_delta` but also allows to set multicore options.",6,null],[11,"from_array_no_copy_with_delta_and_options","","Same as `from_array_no_copy_with_delta` but also allows to set multicore options.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"vec"},{"name":"f32"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"new","","Creates a new generic data vector from the given arguments.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"f32"},{"name":"usize"},{"name":"f32"}],"output":{"name":"self"}}],[11,"from_array","","Creates a new generic data vector from the given arguments.",6,null],[11,"from_array_no_copy","","Creates a new generic data vector from the given arguments.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"vec"}],"output":{"name":"self"}}],[11,"from_array_with_delta","","Creates a new generic data vector from the given arguments.",6,null],[11,"from_array_no_copy_with_delta","","Creates a new generic data vector from the given arguments.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"vec"},{"name":"f32"}],"output":{"name":"self"}}],[11,"add_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"square","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"root","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"power","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"logn","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"expn","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"sin","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"cos","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"tan","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"asin","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"acos","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"atan","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"override_data","","",6,null],[11,"split_into","","",6,null],[11,"merge","","",6,null],[11,"new_with_options","","Same as `new` but also allows to set multicore options.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"f64"},{"name":"usize"},{"name":"f64"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_array_with_options","","Same as `from_array` but also allows to set multicore options.",6,null],[11,"from_array_no_copy_with_options","","Same as `from_array_no_copy` but also allows to set multicore options.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"vec"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_array_with_delta_and_options","","Same as `from_array_with_delta` but also allows to set multicore options.",6,null],[11,"from_array_no_copy_with_delta_and_options","","Same as `from_array_no_copy_with_delta` but also allows to set multicore options.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"vec"},{"name":"f64"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"new","","Creates a new generic data vector from the given arguments.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"f64"},{"name":"usize"},{"name":"f64"}],"output":{"name":"self"}}],[11,"from_array","","Creates a new generic data vector from the given arguments.",6,null],[11,"from_array_no_copy","","Creates a new generic data vector from the given arguments.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"vec"}],"output":{"name":"self"}}],[11,"from_array_with_delta","","Creates a new generic data vector from the given arguments.",6,null],[11,"from_array_no_copy_with_delta","","Creates a new generic data vector from the given arguments.",6,{"inputs":[{"name":"bool"},{"name":"datavectordomain"},{"name":"vec"},{"name":"f64"}],"output":{"name":"self"}}],[11,"add_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"square","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"root","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"power","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"logn","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"expn","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"sin","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"cos","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"tan","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"asin","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"acos","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"atan","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"override_data","","",6,null],[11,"split_into","","",6,null],[11,"merge","","",6,null],[11,"real_offset","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"real_scale","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"abs","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"to_complex","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"wrap","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"unwrap","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"real_dot_product","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"real_statistics","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"statistics"}}],[11,"real_statistics_splitted","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"scale","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"offset","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"real_offset","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"real_scale","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"abs","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"to_complex","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"wrap","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"unwrap","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"real_dot_product","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"real_statistics","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"statistics"}}],[11,"real_statistics_splitted","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"scale","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"offset","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"complex_data","","",6,null],[11,"complex_offset","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"complex_scale","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"multiply_complex_exponential","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"magnitude","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"get_magnitude","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"magnitude_squared","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"complex_conj","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"to_real","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"to_imag","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"get_real","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"get_imag","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"phase","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"get_phase","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"complex_dot_product","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"complex_statistics","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"statistics"}}],[11,"complex_statistics_splitted","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"get_real_imag","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_mag_phase","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"set_real_imag","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"set_mag_phase","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"scale","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"offset","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"complex_data","","",6,null],[11,"complex_offset","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"complex_scale","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"multiply_complex_exponential","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"magnitude","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"get_magnitude","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"magnitude_squared","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"complex_conj","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"to_real","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"to_imag","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"get_real","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"get_imag","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"phase","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"get_phase","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"complex_dot_product","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"complex_statistics","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"statistics"}}],[11,"complex_statistics_splitted","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"get_real_imag","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_mag_phase","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"set_real_imag","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"set_mag_phase","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"scale","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"offset","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"plain_fft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"apply_window","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"unapply_window","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"windowed_fft","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_sfft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"sfft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"windowed_sfft","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_fft","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"apply_window","","",7,{"inputs":[{"name":"complextimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"unapply_window","","",7,{"inputs":[{"name":"complextimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"windowed_fft","","",7,{"inputs":[{"name":"complextimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_fft","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"apply_window","","",8,{"inputs":[{"name":"realtimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"unapply_window","","",8,{"inputs":[{"name":"realtimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"windowed_fft","","",8,{"inputs":[{"name":"realtimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_sfft","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"sfft","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"windowed_sfft","","",8,{"inputs":[{"name":"realtimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_ifft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"mirror","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"ifft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"windowed_ifft","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft_shift","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"ifft_shift","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"plain_sifft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"sifft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"windowed_sifft","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_ifft","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"mirror","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"ifft","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"windowed_ifft","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft_shift","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"ifft_shift","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"plain_sifft","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"sifft","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"windowed_sifft","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_fft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"apply_window","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"unapply_window","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"windowed_fft","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_sfft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"sfft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"windowed_sfft","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_fft","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"apply_window","","",7,{"inputs":[{"name":"complextimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"unapply_window","","",7,{"inputs":[{"name":"complextimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"windowed_fft","","",7,{"inputs":[{"name":"complextimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_fft","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"apply_window","","",8,{"inputs":[{"name":"realtimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"unapply_window","","",8,{"inputs":[{"name":"realtimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"windowed_fft","","",8,{"inputs":[{"name":"realtimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_sfft","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"sfft","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"windowed_sfft","","",8,{"inputs":[{"name":"realtimevector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_ifft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"mirror","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"ifft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"windowed_ifft","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft_shift","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"ifft_shift","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"plain_sifft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"sifft","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"windowed_sifft","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"plain_ifft","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"mirror","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"ifft","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"windowed_ifft","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"fft_shift","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"ifft_shift","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"plain_sifft","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"sifft","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"windowed_sifft","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[11,"convolve","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realimpulseresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"convolve","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"compleximpulseresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complexfrequencyresponse"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realfrequencyresponse"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"convolve","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realimpulseresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"convolve","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"compleximpulseresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"complexfrequencyresponse"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realfrequencyresponse"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"convolve","","",8,{"inputs":[{"name":"realtimevector"},{"name":"realimpulseresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"convolve","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realimpulseresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"convolve","","",7,{"inputs":[{"name":"complextimevector"},{"name":"compleximpulseresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complexfrequencyresponse"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"realfrequencyresponse"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realfrequencyresponse"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"convolve","","",8,{"inputs":[{"name":"realtimevector"},{"name":"realimpulseresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"convolve","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realimpulseresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"convolve","","",7,{"inputs":[{"name":"complextimevector"},{"name":"compleximpulseresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complexfrequencyresponse"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"realfrequencyresponse"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"multiply_frequency_response","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realfrequencyresponse"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"convolve_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"prepare_argument","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"prepare_argument_padded","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"correlate","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"freqpartner"}],"output":{"name":"vecresult"}}],[11,"prepare_argument","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"prepare_argument_padded","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"vecresult"}}],[11,"correlate","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"freqpartner"}],"output":{"name":"vecresult"}}],[11,"prepare_argument","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"prepare_argument_padded","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"correlate","","",7,{"inputs":[{"name":"complextimevector"},{"name":"freqpartner"}],"output":{"name":"vecresult"}}],[11,"prepare_argument","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"prepare_argument_padded","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"correlate","","",7,{"inputs":[{"name":"complextimevector"},{"name":"freqpartner"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realimpulseresponse"},{"name":"f32"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolate_lin","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"interpolate_hermite","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realimpulseresponse"},{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolate_lin","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"interpolate_hermite","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",8,{"inputs":[{"name":"realtimevector"},{"name":"realimpulseresponse"},{"name":"f32"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",8,{"inputs":[{"name":"realtimevector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",8,{"inputs":[{"name":"realtimevector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",8,{"inputs":[{"name":"realtimevector"},{"name":"realimpulseresponse"},{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",8,{"inputs":[{"name":"realtimevector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",8,{"inputs":[{"name":"realtimevector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realimpulseresponse"},{"name":"f32"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",7,{"inputs":[{"name":"complextimevector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realimpulseresponse"},{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",7,{"inputs":[{"name":"complextimevector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"realimpulseresponse"},{"name":"f32"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"realimpulseresponse"},{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realimpulseresponse"},{"name":"f32"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolatef","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realimpulseresponse"},{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vecresult"}}],[11,"interpolatei","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"decimatei","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"interpolate_lin","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"interpolate_hermite","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"interpolate_lin","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"interpolate_hermite","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"interpolate_lin","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"interpolate_hermite","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"interpolate_lin","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"interpolate_hermite","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"fmt","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"usize"}}],[11,"set_len","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"usize"}],"output":null}],[11,"allocated_len","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"usize"}}],[11,"data","","",6,null],[11,"delta","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"t"}}],[11,"domain","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"datavectordomain"}}],[11,"is_complex","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"bool"}}],[11,"points","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"usize"}}],[11,"rededicate_as_complex_time_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"t"}],"output":{"name":"complextimevector"}}],[11,"rededicate_as_complex_freq_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"t"}],"output":{"name":"complexfreqvector"}}],[11,"rededicate_as_real_time_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"t"}],"output":{"name":"realtimevector"}}],[11,"rededicate_as_real_freq_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"t"}],"output":{"name":"realfreqvector"}}],[11,"rededicate_as_generic_vector","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"bool"},{"name":"datavectordomain"},{"name":"t"}],"output":{"name":"genericdatavector"}}],[11,"index","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"genericdatavector"}],"output":{"name":"self"}}],[11,"clone_from","","",6,{"inputs":[{"name":"genericdatavector"},{"name":"self"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"realtimevector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"usize"}}],[11,"set_len","","",8,{"inputs":[{"name":"realtimevector"},{"name":"usize"}],"output":null}],[11,"allocated_len","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"usize"}}],[11,"data","","",8,null],[11,"delta","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"t"}}],[11,"domain","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"datavectordomain"}}],[11,"is_complex","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"bool"}}],[11,"points","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"usize"}}],[11,"rededicate_as_complex_time_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"t"}],"output":{"name":"complextimevector"}}],[11,"rededicate_as_complex_freq_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"t"}],"output":{"name":"complexfreqvector"}}],[11,"rededicate_as_real_time_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"t"}],"output":{"name":"realtimevector"}}],[11,"rededicate_as_real_freq_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"t"}],"output":{"name":"realfreqvector"}}],[11,"rededicate_as_generic_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"bool"},{"name":"datavectordomain"},{"name":"t"}],"output":{"name":"genericdatavector"}}],[11,"index","","",8,{"inputs":[{"name":"realtimevector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",8,{"inputs":[{"name":"realtimevector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"self"}}],[11,"clone_from","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":null}],[11,"from_array_no_copy_with_options","","Same as `from_array_no_copy` but also allows to set multicore options.",8,{"inputs":[{"name":"vec"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_array_with_options","","Same as `from_array` but also allows to set multicore options.",8,null],[11,"from_array_with_delta_and_options","","Same as `from_array_with_delta` but also allows to set multicore options.",8,null],[11,"empty_with_options","","Same as `empty` but also allows to set multicore options.",8,{"inputs":[{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"empty_with_delta_and_options","","Same as `empty_with_delta` but also allows to set multicore options.",8,{"inputs":[{"name":"t"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_constant_with_options","","Same as `from_constant` but also allows to set multicore options.",8,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_constant_with_delta_and_options","","Same as `from_constant_with_delta` but also allows to set multicore options.",8,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"t"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_array_no_copy","","Creates a real `DataVector` by consuming a `Vec`.",8,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_array","","Creates a real `DataVector` from an array or sequence. `delta` is defaulted to `1`.",8,null],[11,"from_array_with_delta","","Creates a real `DataVector` from an array or sequence and sets `delta` to the given value.",8,null],[11,"empty","","Creates a real and empty `DataVector` and sets `delta` to 1.0 value.",8,{"inputs":[],"output":{"name":"self"}}],[11,"empty_with_delta","","Creates a real and empty `DataVector` and sets `delta` to the given value.",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_constant","","Creates a real `DataVector` with `length` elements all set to the value of `constant`. `delta` is defaulted to `1`.",8,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_constant_with_delta","","Creates a real `DataVector` with `length` elements all set to the value of `constant` and sets `delta` to the given value.",8,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"add_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",8,{"inputs":[{"name":"realtimevector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",8,{"inputs":[{"name":"realtimevector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"square","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"root","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"power","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"logn","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"expn","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"sin","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"cos","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"tan","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"asin","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"acos","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"atan","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"override_data","","",8,null],[11,"split_into","","",8,null],[11,"merge","","",8,null],[11,"add_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",8,{"inputs":[{"name":"realtimevector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",8,{"inputs":[{"name":"realtimevector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"square","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"root","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"power","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"logn","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"expn","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"sin","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"cos","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"tan","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"asin","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"acos","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"atan","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"override_data","","",8,null],[11,"split_into","","",8,null],[11,"merge","","",8,null],[11,"real_offset","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"real_scale","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"abs","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"to_complex","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"wrap","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"unwrap","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"real_dot_product","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"real_statistics","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"statistics"}}],[11,"real_statistics_splitted","","",8,{"inputs":[{"name":"realtimevector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"scale","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"offset","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"real_offset","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"real_scale","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"abs","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"to_complex","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"vecresult"}}],[11,"wrap","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"unwrap","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"real_dot_product","","",8,{"inputs":[{"name":"realtimevector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"real_statistics","","",8,{"inputs":[{"name":"realtimevector"}],"output":{"name":"statistics"}}],[11,"real_statistics_splitted","","",8,{"inputs":[{"name":"realtimevector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"scale","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"offset","","",8,{"inputs":[{"name":"realtimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"fmt","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"usize"}}],[11,"set_len","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"usize"}],"output":null}],[11,"allocated_len","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"usize"}}],[11,"data","","",10,null],[11,"delta","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"t"}}],[11,"domain","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"datavectordomain"}}],[11,"is_complex","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"bool"}}],[11,"points","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"usize"}}],[11,"rededicate_as_complex_time_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"t"}],"output":{"name":"complextimevector"}}],[11,"rededicate_as_complex_freq_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"t"}],"output":{"name":"complexfreqvector"}}],[11,"rededicate_as_real_time_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"t"}],"output":{"name":"realtimevector"}}],[11,"rededicate_as_real_freq_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"t"}],"output":{"name":"realfreqvector"}}],[11,"rededicate_as_generic_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"bool"},{"name":"datavectordomain"},{"name":"t"}],"output":{"name":"genericdatavector"}}],[11,"index","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"index","","",10,null],[11,"index_mut","","",10,null],[11,"clone","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"self"}}],[11,"clone_from","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":null}],[11,"from_array_no_copy_with_options","","Same as `from_array_no_copy` but also allows to set multicore options.",10,{"inputs":[{"name":"vec"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_array_with_options","","Same as `from_array` but also allows to set multicore options.",10,null],[11,"from_array_with_delta_and_options","","Same as `from_array_with_delta` but also allows to set multicore options.",10,null],[11,"empty_with_options","","Same as `empty` but also allows to set multicore options.",10,{"inputs":[{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"empty_with_delta_and_options","","Same as `empty_with_delta` but also allows to set multicore options.",10,{"inputs":[{"name":"t"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_constant_with_options","","Same as `from_constant` but also allows to set multicore options.",10,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_constant_with_delta_and_options","","Same as `from_constant_with_delta` but also allows to set multicore options.",10,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"t"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_array_no_copy","","Creates a real `DataVector` by consuming a `Vec`.",10,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_array","","Creates a real `DataVector` from an array or sequence. `delta` is defaulted to `1`.",10,null],[11,"from_array_with_delta","","Creates a real `DataVector` from an array or sequence and sets `delta` to the given value.",10,null],[11,"empty","","Creates a real and empty `DataVector` and sets `delta` to 1.0 value.",10,{"inputs":[],"output":{"name":"self"}}],[11,"empty_with_delta","","Creates a real and empty `DataVector` and sets `delta` to the given value.",10,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_constant","","Creates a real `DataVector` with `length` elements all set to the value of `constant`. `delta` is defaulted to `1`.",10,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_constant_with_delta","","Creates a real `DataVector` with `length` elements all set to the value of `constant` and sets `delta` to the given value.",10,{"inputs":[{"name":"t"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"add_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"square","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"root","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"power","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"logn","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"expn","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"sin","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"cos","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"tan","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"asin","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"acos","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"atan","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"override_data","","",10,null],[11,"split_into","","",10,null],[11,"merge","","",10,null],[11,"add_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"square","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"root","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"power","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"logn","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"expn","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"sin","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"cos","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"tan","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"asin","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"acos","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"atan","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"override_data","","",10,null],[11,"split_into","","",10,null],[11,"merge","","",10,null],[11,"real_offset","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"real_scale","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"abs","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"to_complex","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"wrap","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"unwrap","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"real_dot_product","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"real_statistics","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"statistics"}}],[11,"real_statistics_splitted","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"scale","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"offset","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"real_offset","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"real_scale","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"abs","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"to_complex","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"vecresult"}}],[11,"wrap","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"unwrap","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"real_dot_product","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"real_statistics","","",10,{"inputs":[{"name":"realfreqvector"}],"output":{"name":"statistics"}}],[11,"real_statistics_splitted","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"scale","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"offset","","",10,{"inputs":[{"name":"realfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"fmt","","",7,{"inputs":[{"name":"complextimevector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"usize"}}],[11,"set_len","","",7,{"inputs":[{"name":"complextimevector"},{"name":"usize"}],"output":null}],[11,"allocated_len","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"usize"}}],[11,"data","","",7,null],[11,"delta","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"t"}}],[11,"domain","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"datavectordomain"}}],[11,"is_complex","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"bool"}}],[11,"points","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"usize"}}],[11,"rededicate_as_complex_time_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"t"}],"output":{"name":"complextimevector"}}],[11,"rededicate_as_complex_freq_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"t"}],"output":{"name":"complexfreqvector"}}],[11,"rededicate_as_real_time_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"t"}],"output":{"name":"realtimevector"}}],[11,"rededicate_as_real_freq_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"t"}],"output":{"name":"realfreqvector"}}],[11,"rededicate_as_generic_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"bool"},{"name":"datavectordomain"},{"name":"t"}],"output":{"name":"genericdatavector"}}],[11,"index","","",7,{"inputs":[{"name":"complextimevector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",7,{"inputs":[{"name":"complextimevector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"self"}}],[11,"clone_from","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":null}],[11,"from_interleaved_no_copy_with_options","","Same as `from_interleaved_no_copy` but also allows to set multicore options.",7,{"inputs":[{"name":"vec"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_interleaved_with_options","","Same as `from_interleaved` but also allows to set multicore options.",7,null],[11,"from_interleaved_with_delta_and_options","","Same as `from_interleaved_with_delta` but also allows to set multicore options.",7,null],[11,"empty_with_options","","Same as `complex_empty` but also allows to set multicore options.",7,{"inputs":[{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"empty_with_delta_and_options","","Same as `complex_empty_with_delta` but also allows to set multicore options.",7,{"inputs":[{"name":"t"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_constant_with_options","","Same as `complex_from_constant` but also allows to set multicore options.",7,{"inputs":[{"name":"complex"},{"name":"usize"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_constant_with_delta_and_options","","Same as `complex_from_constant_with_delta` but also allows to set multicore options.",7,{"inputs":[{"name":"complex"},{"name":"usize"},{"name":"t"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_real_imag_with_options","","Same as `from_real_imag` but also allows to set multicore options.",7,null],[11,"from_real_imag_with_delta_and_options","","Same as `from_real_imag_with_delta` but also allows to set multicore options.",7,null],[11,"from_mag_phase_with_options","","Same as `from_mag_phase` but also allows to set multicore options.",7,null],[11,"from_mag_phase_with_delta_and_options","","Same as `from_mag_phase_with_delta` but also allows to set multicore options.",7,null],[11,"from_interleaved_no_copy","","Creates a complex `DataVector` by consuming a `Vec`. Data is in interleaved format: `i0, q0, i1, q1, ...`.",7,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_interleaved","","Creates a complex `DataVector` from an array or sequence. Data is in interleaved format: `i0, q0, i1, q1, ...`. `delta` is defaulted to `1`.",7,null],[11,"from_interleaved_with_delta","","Creates a complex `DataVector` from an array or sequence. Data is in interleaved format: `i0, q0, i1, q1, ...`. `delta` is set to the given value.",7,null],[11,"empty","","Creates a complex and empty `DataVector` and sets `delta` to 1.0 value.",7,{"inputs":[],"output":{"name":"self"}}],[11,"empty_with_delta","","Creates a complex and empty `DataVector` and sets `delta` to the given value.",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_constant","","Creates a complex `DataVector` with `length` elements all set to the value of `constant`. `delta` is defaulted to `1`.",7,{"inputs":[{"name":"complex"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_constant_with_delta","","Creates a complex `DataVector` with `length` elements all set to the value of `constant` and sets `delta` to the given value.",7,{"inputs":[{"name":"complex"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_real_imag","","Creates a complex  `DataVector` from an array with real and an array imaginary data. `delta` is set to 1.",7,null],[11,"from_real_imag_with_delta","","Creates a complex  `DataVector` from an array with real and an array imaginary data. `delta` is set to the given value.",7,null],[11,"from_mag_phase","","Creates a complex  `DataVector` from an array with magnitude and an array with phase data. `delta` is set to 1.",7,null],[11,"from_mag_phase_with_delta","","Creates a complex  `DataVector` from an array with magnitude and an array with phase data. `delta` is set to the given value.",7,null],[11,"from_complex","","Creates a complex `DataVector` from an array of complex numbers. `delta` is set to 1.",7,null],[11,"from_complex_with_delta","","Creates a complex `DataVector` from an array of complex numbers. `delta` is set to the given value.",7,null],[11,"from_complex_with_delta_and_options","","Creates a complex `DataVector` from an array of complex numbers.",7,null],[11,"add_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",7,{"inputs":[{"name":"complextimevector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",7,{"inputs":[{"name":"complextimevector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"square","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"root","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"power","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"logn","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"expn","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"sin","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"cos","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"tan","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"asin","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"acos","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"atan","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"override_data","","",7,null],[11,"split_into","","",7,null],[11,"merge","","",7,null],[11,"add_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",7,{"inputs":[{"name":"complextimevector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",7,{"inputs":[{"name":"complextimevector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"square","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"root","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"power","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"logn","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"expn","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"sin","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"cos","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"tan","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"asin","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"acos","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"atan","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"override_data","","",7,null],[11,"split_into","","",7,null],[11,"merge","","",7,null],[11,"complex_data","","",7,null],[11,"complex_offset","","",7,{"inputs":[{"name":"complextimevector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"complex_scale","","",7,{"inputs":[{"name":"complextimevector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"multiply_complex_exponential","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"magnitude","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"get_magnitude","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"magnitude_squared","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"complex_conj","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"to_real","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"to_imag","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"get_real","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_imag","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"phase","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"get_phase","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"complex_dot_product","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"complex_statistics","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"statistics"}}],[11,"complex_statistics_splitted","","",7,{"inputs":[{"name":"complextimevector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"get_real_imag","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_mag_phase","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"set_real_imag","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"set_mag_phase","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"scale","","",7,{"inputs":[{"name":"complextimevector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"offset","","",7,{"inputs":[{"name":"complextimevector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"complex_data","","",7,null],[11,"complex_offset","","",7,{"inputs":[{"name":"complextimevector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"complex_scale","","",7,{"inputs":[{"name":"complextimevector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"multiply_complex_exponential","","",7,{"inputs":[{"name":"complextimevector"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"magnitude","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"get_magnitude","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"magnitude_squared","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"complex_conj","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"to_real","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"to_imag","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"get_real","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_imag","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"phase","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"vecresult"}}],[11,"get_phase","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"complex_dot_product","","",7,{"inputs":[{"name":"complextimevector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"complex_statistics","","",7,{"inputs":[{"name":"complextimevector"}],"output":{"name":"statistics"}}],[11,"complex_statistics_splitted","","",7,{"inputs":[{"name":"complextimevector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"get_real_imag","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_mag_phase","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"set_real_imag","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"set_mag_phase","","",7,{"inputs":[{"name":"complextimevector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"scale","","",7,{"inputs":[{"name":"complextimevector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"offset","","",7,{"inputs":[{"name":"complextimevector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"fmt","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"usize"}}],[11,"set_len","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"usize"}],"output":null}],[11,"allocated_len","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"usize"}}],[11,"data","","",9,null],[11,"delta","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"t"}}],[11,"domain","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"datavectordomain"}}],[11,"is_complex","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"bool"}}],[11,"points","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"usize"}}],[11,"rededicate_as_complex_time_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"t"}],"output":{"name":"complextimevector"}}],[11,"rededicate_as_complex_freq_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"t"}],"output":{"name":"complexfreqvector"}}],[11,"rededicate_as_real_time_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"t"}],"output":{"name":"realtimevector"}}],[11,"rededicate_as_real_freq_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"t"}],"output":{"name":"realfreqvector"}}],[11,"rededicate_as_generic_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"bool"},{"name":"datavectordomain"},{"name":"t"}],"output":{"name":"genericdatavector"}}],[11,"index","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"index","","",9,null],[11,"index_mut","","",9,null],[11,"clone","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"self"}}],[11,"clone_from","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":null}],[11,"from_interleaved_no_copy_with_options","","Same as `from_interleaved_no_copy` but also allows to set multicore options.",9,{"inputs":[{"name":"vec"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_interleaved_with_options","","Same as `from_interleaved` but also allows to set multicore options.",9,null],[11,"from_interleaved_with_delta_and_options","","Same as `from_interleaved_with_delta` but also allows to set multicore options.",9,null],[11,"empty_with_options","","Same as `complex_empty` but also allows to set multicore options.",9,{"inputs":[{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"empty_with_delta_and_options","","Same as `complex_empty_with_delta` but also allows to set multicore options.",9,{"inputs":[{"name":"t"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_constant_with_options","","Same as `complex_from_constant` but also allows to set multicore options.",9,{"inputs":[{"name":"complex"},{"name":"usize"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_constant_with_delta_and_options","","Same as `complex_from_constant_with_delta` but also allows to set multicore options.",9,{"inputs":[{"name":"complex"},{"name":"usize"},{"name":"t"},{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"from_real_imag_with_options","","Same as `from_real_imag` but also allows to set multicore options.",9,null],[11,"from_real_imag_with_delta_and_options","","Same as `from_real_imag_with_delta` but also allows to set multicore options.",9,null],[11,"from_mag_phase_with_options","","Same as `from_mag_phase` but also allows to set multicore options.",9,null],[11,"from_mag_phase_with_delta_and_options","","Same as `from_mag_phase_with_delta` but also allows to set multicore options.",9,null],[11,"from_interleaved_no_copy","","Creates a complex `DataVector` by consuming a `Vec`. Data is in interleaved format: `i0, q0, i1, q1, ...`.",9,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"from_interleaved","","Creates a complex `DataVector` from an array or sequence. Data is in interleaved format: `i0, q0, i1, q1, ...`. `delta` is defaulted to `1`.",9,null],[11,"from_interleaved_with_delta","","Creates a complex `DataVector` from an array or sequence. Data is in interleaved format: `i0, q0, i1, q1, ...`. `delta` is set to the given value.",9,null],[11,"empty","","Creates a complex and empty `DataVector` and sets `delta` to 1.0 value.",9,{"inputs":[],"output":{"name":"self"}}],[11,"empty_with_delta","","Creates a complex and empty `DataVector` and sets `delta` to the given value.",9,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from_constant","","Creates a complex `DataVector` with `length` elements all set to the value of `constant`. `delta` is defaulted to `1`.",9,{"inputs":[{"name":"complex"},{"name":"usize"}],"output":{"name":"self"}}],[11,"from_constant_with_delta","","Creates a complex `DataVector` with `length` elements all set to the value of `constant` and sets `delta` to the given value.",9,{"inputs":[{"name":"complex"},{"name":"usize"},{"name":"t"}],"output":{"name":"self"}}],[11,"from_real_imag","","Creates a complex  `DataVector` from an array with real and an array imaginary data. `delta` is set to 1.",9,null],[11,"from_real_imag_with_delta","","Creates a complex  `DataVector` from an array with real and an array imaginary data. `delta` is set to the given value.",9,null],[11,"from_mag_phase","","Creates a complex  `DataVector` from an array with magnitude and an array with phase data. `delta` is set to 1.",9,null],[11,"from_mag_phase_with_delta","","Creates a complex  `DataVector` from an array with magnitude and an array with phase data. `delta` is set to the given value.",9,null],[11,"from_complex","","Creates a complex `DataVector` from an array of complex numbers. `delta` is set to 1.",9,null],[11,"from_complex_with_delta","","Creates a complex `DataVector` from an array of complex numbers. `delta` is set to the given value.",9,null],[11,"from_complex_with_delta_and_options","","Creates a complex `DataVector` from an array of complex numbers.",9,null],[11,"add_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"square","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"root","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"power","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"logn","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"expn","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"sin","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"cos","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"tan","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"asin","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"acos","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"atan","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"override_data","","",9,null],[11,"split_into","","",9,null],[11,"merge","","",9,null],[11,"add_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"add_smaller_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"subtract_smaller_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"multiply_smaller_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"divide_smaller_vector","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"vecresult"}}],[11,"zero_pad","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[11,"reverse","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"zero_interleave","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"u32"}],"output":{"name":"vecresult"}}],[11,"diff","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"diff_with_start","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"cum_sum","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"sqrt","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"square","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"root","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"power","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"logn","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"expn","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"log_base","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"sin","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"cos","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"tan","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"asin","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"acos","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"atan","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"sinh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"cosh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"tanh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"asinh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"acosh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"atanh","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"swap_halves","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"exp_base","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"override_data","","",9,null],[11,"split_into","","",9,null],[11,"merge","","",9,null],[11,"complex_data","","",9,null],[11,"complex_offset","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"complex_scale","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"multiply_complex_exponential","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vecresult"}}],[11,"magnitude","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"get_magnitude","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"magnitude_squared","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"complex_conj","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"to_real","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"to_imag","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"get_real","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_imag","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"phase","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"get_phase","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"complex_dot_product","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"complex_statistics","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"statistics"}}],[11,"complex_statistics_splitted","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"get_real_imag","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_mag_phase","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"set_real_imag","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"set_mag_phase","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"scale","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"offset","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"complex_data","","",9,null],[11,"complex_offset","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"complex_scale","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"multiply_complex_exponential","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vecresult"}}],[11,"magnitude","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"get_magnitude","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"magnitude_squared","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"complex_conj","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"to_real","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"to_imag","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"get_real","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_imag","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"phase","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"vecresult"}}],[11,"get_phase","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"complex_dot_product","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"complex_statistics","","",9,{"inputs":[{"name":"complexfreqvector"}],"output":{"name":"statistics"}}],[11,"complex_statistics_splitted","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"get_real_imag","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"get_mag_phase","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[11,"set_real_imag","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"set_mag_phase","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[11,"scale","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"offset","","",9,{"inputs":[{"name":"complexfreqvector"},{"name":"complex"}],"output":{"name":"vecresult"}}],[11,"clone","","",4,{"inputs":[{"name":"operation"}],"output":{"name":"operation"}}],[11,"eq","","",4,{"inputs":[{"name":"operation"},{"name":"operation"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"operation"},{"name":"operation"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"operation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"perform_operations","","Perform a set of operations on the given vector.\nWarning: Highly unstable and not even fully implemented right now.",6,null],[11,"fmt","","",1,{"inputs":[{"name":"multicoresettings"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","Creates multi core settings with default values",1,{"inputs":[],"output":{"name":"multicoresettings"}}],[11,"new","","Creates multi core settings with the given values.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"multicoresettings"}}],[11,"clone","","",1,{"inputs":[{"name":"multicoresettings"}],"output":{"name":"self"}}],[11,"clone_from","","",1,{"inputs":[{"name":"multicoresettings"},{"name":"self"}],"output":null}],[0,"window_functions","","This mod contains a definition for window functions and provides implementations for a\nfew standard windows. See the `WindowFunction` type for more information.",null,null],[3,"TriangularWindow","basic_dsp::window_functions","A triangular window: https://en.wikipedia.org/wiki/Window_function#Triangular_window",null,null],[3,"HammingWindow","","A generalized Hamming window: https://en.wikipedia.org/wiki/Window_function#Hamming_window",null,null],[3,"ForeignWindowFunction","","A window function which can be constructed outside this crate.",null,null],[12,"window_function","","The window function",11,null],[12,"window_data","","The data which is passed to the window function",11,null],[12,"is_symmetric","","Indicates whether this function is symmetric around 0 or not.\nSymmetry is defined as `self.window(x) == self.window(-x)`.",11,null],[8,"WindowFunction","","A window function for FFT windows. See https://en.wikipedia.org/wiki/Window_function\nfor details. Window functions should document if they aren&#39;t applicable for \nInverse Fourier Transformations. ",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not.\nSymmetry is defined as `self.window(x) == self.window(-x)`.",12,{"inputs":[{"name":"windowfunction"}],"output":{"name":"bool"}}],[10,"window","","Calculates a point of the window function",12,{"inputs":[{"name":"windowfunction"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"is_symmetric","","",13,{"inputs":[{"name":"triangularwindow"}],"output":{"name":"bool"}}],[11,"window","","",13,{"inputs":[{"name":"triangularwindow"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Createa a new Hamming window",14,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","Creates the default Hamming window as defined in GNU Octave.",14,{"inputs":[],"output":{"name":"self"}}],[11,"is_symmetric","","",14,{"inputs":[{"name":"hammingwindow"}],"output":{"name":"bool"}}],[11,"window","","",14,{"inputs":[{"name":"hammingwindow"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Creates a new window function",11,null],[11,"is_symmetric","","",11,{"inputs":[{"name":"foreignwindowfunction"}],"output":{"name":"bool"}}],[11,"window","","",11,{"inputs":[{"name":"foreignwindowfunction"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[0,"conv_types","basic_dsp","Types around a convolution, see also https://en.wikipedia.org/wiki/Convolution.",null,null],[3,"RealTimeLinearTableLookup","basic_dsp::conv_types","Allows to create a lookup table with linear interpolation between table points.\nThis usually speeds up a convolution and sacrifies accuracy.",null,null],[3,"RealFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points.\nThis usually speeds up a convolution and sacrifies accuracy.",null,null],[3,"ComplexTimeLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points.\nThis usually speeds up a convolution and sacrifies accuracy.",null,null],[3,"ComplexFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points.\nThis usually speeds up a convolution and sacrifies accuracy.",null,null],[3,"RaisedCosineFunction","","Raised cosine function according to https://en.wikipedia.org/wiki/Raised-cosine_filter",null,null],[3,"SincFunction","","Sinc function according to https://en.wikipedia.org/wiki/Sinc_function",null,null],[3,"ForeignRealConvolutionFunction","","A real function which can be constructed outside this crate.",null,null],[12,"conv_function","","The function",15,null],[12,"conv_data","","The data which is passed to the function.",15,null],[12,"is_symmetric","","Indicates whether this function is symmetric around 0 or not.\nSymmetry is defined as `self.calc(x) == self.calc(-x)`.",15,null],[3,"ForeignComplexConvolutionFunction","","A complex function which can be constructed outside this crate.",null,null],[12,"conv_function","","The function",16,null],[12,"conv_data","","The data which is passed to the window function",16,null],[12,"is_symmetric","","Indicates whether this function is symmetric around 0 or not.\nSymmetry is defined as `self.calc(x) == self.calc(-x)`.",16,null],[8,"RealImpulseResponse","","A convolution function in $domain_comment domain and real number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not.\nSymmetry is defined as `self.calc(x) == self.calc(-x)`.",17,{"inputs":[{"name":"realimpulseresponse"}],"output":{"name":"bool"}}],[10,"calc","","Calculates the convolution for a data point",17,{"inputs":[{"name":"realimpulseresponse"},{"name":"t"}],"output":{"name":"t"}}],[8,"RealFrequencyResponse","","A convolution function in $domain_comment domain and real number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not.\nSymmetry is defined as `self.calc(x) == self.calc(-x)`.",18,{"inputs":[{"name":"realfrequencyresponse"}],"output":{"name":"bool"}}],[10,"calc","","Calculates the convolution for a data point",18,{"inputs":[{"name":"realfrequencyresponse"},{"name":"t"}],"output":{"name":"t"}}],[8,"ComplexImpulseResponse","","A convolution function in $domain_comment domain and complex number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not.\nSymmetry is defined as `self.calc(x) == self.calc(-x)`.",19,{"inputs":[{"name":"compleximpulseresponse"}],"output":{"name":"bool"}}],[10,"calc","","Calculates the convolution for a data point",19,{"inputs":[{"name":"compleximpulseresponse"},{"name":"t"}],"output":{"name":"complex"}}],[8,"ComplexFrequencyResponse","","A convolution function in $domain_comment domain and complex number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not.\nSymmetry is defined as `self.calc(x) == self.calc(-x)`.",20,{"inputs":[{"name":"complexfrequencyresponse"}],"output":{"name":"bool"}}],[10,"calc","","Calculates the convolution for a data point",20,{"inputs":[{"name":"complexfrequencyresponse"},{"name":"t"}],"output":{"name":"complex"}}],[11,"table","","Allows to inspect the generated lookup table",21,null],[11,"delta","","Gets the delta value which determines the resolution",21,{"inputs":[{"name":"realtimelineartablelookup"}],"output":{"name":"t"}}],[11,"table","","Allows to inspect the generated lookup table",22,null],[11,"delta","","Gets the delta value which determines the resolution",22,{"inputs":[{"name":"realfrequencylineartablelookup"}],"output":{"name":"t"}}],[11,"table","","Allows to inspect the generated lookup table",23,null],[11,"delta","","Gets the delta value which determines the resolution",23,{"inputs":[{"name":"complextimelineartablelookup"}],"output":{"name":"t"}}],[11,"table","","Allows to inspect the generated lookup table",24,null],[11,"delta","","Gets the delta value which determines the resolution",24,{"inputs":[{"name":"complexfrequencylineartablelookup"}],"output":{"name":"t"}}],[11,"is_symmetric","","",21,{"inputs":[{"name":"realtimelineartablelookup"}],"output":{"name":"bool"}}],[11,"calc","","",21,{"inputs":[{"name":"realtimelineartablelookup"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",21,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument\ncan be used to balance performance vs. accuracy.",21,{"inputs":[{"name":"realimpulseresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",21,{"inputs":[{"name":"realtimelineartablelookup"}],"output":{"name":"bool"}}],[11,"calc","","",21,{"inputs":[{"name":"realtimelineartablelookup"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",21,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument\ncan be used to balance performance vs. accuracy.",21,{"inputs":[{"name":"realimpulseresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",22,{"inputs":[{"name":"realfrequencylineartablelookup"}],"output":{"name":"bool"}}],[11,"calc","","",22,{"inputs":[{"name":"realfrequencylineartablelookup"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",22,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument\ncan be used to balance performance vs. accuracy.",22,{"inputs":[{"name":"realfrequencyresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",22,{"inputs":[{"name":"realfrequencylineartablelookup"}],"output":{"name":"bool"}}],[11,"calc","","",22,{"inputs":[{"name":"realfrequencylineartablelookup"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",22,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument\ncan be used to balance performance vs. accuracy.",22,{"inputs":[{"name":"realfrequencyresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",23,{"inputs":[{"name":"complextimelineartablelookup"}],"output":{"name":"bool"}}],[11,"calc","","",23,{"inputs":[{"name":"complextimelineartablelookup"},{"name":"f32"}],"output":{"name":"complex32"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",23,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument\ncan be used to balance performance vs. accuracy.",23,{"inputs":[{"name":"compleximpulseresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",23,{"inputs":[{"name":"complextimelineartablelookup"}],"output":{"name":"bool"}}],[11,"calc","","",23,{"inputs":[{"name":"complextimelineartablelookup"},{"name":"f64"}],"output":{"name":"complex64"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",23,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument\ncan be used to balance performance vs. accuracy.",23,{"inputs":[{"name":"compleximpulseresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",24,{"inputs":[{"name":"complexfrequencylineartablelookup"}],"output":{"name":"bool"}}],[11,"calc","","",24,{"inputs":[{"name":"complexfrequencylineartablelookup"},{"name":"f32"}],"output":{"name":"complex32"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",24,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument\ncan be used to balance performance vs. accuracy.",24,{"inputs":[{"name":"complexfrequencyresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",24,{"inputs":[{"name":"complexfrequencylineartablelookup"}],"output":{"name":"bool"}}],[11,"calc","","",24,{"inputs":[{"name":"complexfrequencylineartablelookup"},{"name":"f64"}],"output":{"name":"complex64"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",24,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument\ncan be used to balance performance vs. accuracy.",24,{"inputs":[{"name":"complexfrequencyresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"self"}}],[11,"to_complex","","Convert the lookup table into complex number space",21,{"inputs":[{"name":"realtimelineartablelookup"}],"output":{"name":"complextimelineartablelookup"}}],[11,"to_complex","","Convert the lookup table into complex number space",21,{"inputs":[{"name":"realtimelineartablelookup"}],"output":{"name":"complextimelineartablelookup"}}],[11,"to_complex","","Convert the lookup table into complex number space",22,{"inputs":[{"name":"realfrequencylineartablelookup"}],"output":{"name":"complexfrequencylineartablelookup"}}],[11,"to_complex","","Convert the lookup table into complex number space",22,{"inputs":[{"name":"realfrequencylineartablelookup"}],"output":{"name":"complexfrequencylineartablelookup"}}],[11,"to_real","","Convert the lookup table into real number space",23,{"inputs":[{"name":"complextimelineartablelookup"}],"output":{"name":"realtimelineartablelookup"}}],[11,"to_real","","Convert the lookup table into real number space",23,{"inputs":[{"name":"complextimelineartablelookup"}],"output":{"name":"realtimelineartablelookup"}}],[11,"to_real","","Convert the lookup table into real number space",24,{"inputs":[{"name":"complexfrequencylineartablelookup"}],"output":{"name":"realfrequencylineartablelookup"}}],[11,"to_real","","Convert the lookup table into real number space",24,{"inputs":[{"name":"complexfrequencylineartablelookup"}],"output":{"name":"realfrequencylineartablelookup"}}],[11,"fft","","Convert the lookup table into frequency domain",23,{"inputs":[{"name":"complextimelineartablelookup"}],"output":{"name":"complexfrequencylineartablelookup"}}],[11,"fft","","Convert the lookup table into frequency domain",23,{"inputs":[{"name":"complextimelineartablelookup"}],"output":{"name":"complexfrequencylineartablelookup"}}],[11,"fft","","Convert the lookup table into a magnitude spectrum",21,{"inputs":[{"name":"realtimelineartablelookup"}],"output":{"name":"realfrequencylineartablelookup"}}],[11,"fft","","Convert the lookup table into a magnitude spectrum",21,{"inputs":[{"name":"realtimelineartablelookup"}],"output":{"name":"realfrequencylineartablelookup"}}],[11,"ifft","","Convert the lookup table into time domain",24,{"inputs":[{"name":"complexfrequencylineartablelookup"}],"output":{"name":"complextimelineartablelookup"}}],[11,"ifft","","Convert the lookup table into time domain",24,{"inputs":[{"name":"complexfrequencylineartablelookup"}],"output":{"name":"complextimelineartablelookup"}}],[11,"is_symmetric","","",25,{"inputs":[{"name":"raisedcosinefunction"}],"output":{"name":"bool"}}],[11,"calc","","",25,{"inputs":[{"name":"raisedcosinefunction"},{"name":"t"}],"output":{"name":"t"}}],[11,"is_symmetric","","",25,{"inputs":[{"name":"raisedcosinefunction"}],"output":{"name":"bool"}}],[11,"calc","","",25,{"inputs":[{"name":"raisedcosinefunction"},{"name":"t"}],"output":{"name":"t"}}],[11,"new","","Creates a raised cosine function.",25,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"is_symmetric","","",26,{"inputs":[{"name":"sincfunction"}],"output":{"name":"bool"}}],[11,"calc","","",26,{"inputs":[{"name":"sincfunction"},{"name":"t"}],"output":{"name":"t"}}],[11,"is_symmetric","","",26,{"inputs":[{"name":"sincfunction"}],"output":{"name":"bool"}}],[11,"calc","","",26,{"inputs":[{"name":"sincfunction"},{"name":"t"}],"output":{"name":"t"}}],[11,"new","","Creates a sinc function.",26,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new real function",15,null],[11,"is_symmetric","","",15,{"inputs":[{"name":"foreignrealconvolutionfunction"}],"output":{"name":"bool"}}],[11,"calc","","",15,{"inputs":[{"name":"foreignrealconvolutionfunction"},{"name":"t"}],"output":{"name":"t"}}],[11,"is_symmetric","","",15,{"inputs":[{"name":"foreignrealconvolutionfunction"}],"output":{"name":"bool"}}],[11,"calc","","",15,{"inputs":[{"name":"foreignrealconvolutionfunction"},{"name":"t"}],"output":{"name":"t"}}],[11,"new","","Creates a new real function",16,null],[11,"is_symmetric","","",16,{"inputs":[{"name":"foreigncomplexconvolutionfunction"}],"output":{"name":"bool"}}],[11,"calc","","",16,{"inputs":[{"name":"foreigncomplexconvolutionfunction"},{"name":"t"}],"output":{"name":"complex"}}],[11,"is_symmetric","","",16,{"inputs":[{"name":"foreigncomplexconvolutionfunction"}],"output":{"name":"bool"}}],[11,"calc","","Indicates whether this function is symmetric around 0 or not.\nSymmetry is defined as `self.calc(x) == self.calc(-x)`.",16,{"inputs":[{"name":"foreigncomplexconvolutionfunction"},{"name":"t"}],"output":{"name":"complex"}}],[0,"interop_facade","basic_dsp","Clients using other programming languages should use the functions\nin this mod. Please refer to the other chapters of the help for documentation of the functions.",null,null],[3,"VectorResult","basic_dsp::interop_facade","Result of a vector operation. Check the ```result_code```.",null,null],[12,"result_code","","This value is zero in case of error. All other values mean that an error\noccurred and the data in the vector might be unchanged or invalid. Error codes:\n1. Vectors must have the same size.\nall other values are undefined. If you see a value which isn&#39;t listed here then\nplease report a bug.",27,null],[12,"vector","","A pointer to a data vector.",27,null],[3,"ScalarResult","","Result of a vector operation. Check the ```result_code```.",null,null],[12,"result_code","","This value is zero in case of error. All other values mean that an error\noccurred and the data in the vector might be unchanged or invalid. Error codes:\n1. Vectors must have the same size.\nall other values are undefined. If you see a value which isn&#39;t listed here then\nplease report a bug.",28,null],[12,"result","","The result",28,null],[5,"translate_error","","",null,{"inputs":[{"name":"errorreason"}],"output":{"name":"i32"}}],[5,"translate_to_window_function","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"box"}}],[5,"translate_to_real_convolution_function","","",null,{"inputs":[{"name":"i32"},{"name":"t"}],"output":{"name":"box"}}],[5,"translate_to_real_frequency_response","","",null,{"inputs":[{"name":"i32"},{"name":"t"}],"output":{"name":"box"}}],[5,"translate_to_padding_option","","",null,{"inputs":[{"name":"i32"}],"output":{"name":"paddingoption"}}],[0,"facade32","","Functions for 32bit floating point number based vectors. Please refer to the other chapters of the help for documentation of the functions.",null,null],[5,"delete_vector32","basic_dsp::interop_facade::facade32","",null,{"inputs":[{"name":"box"}],"output":null}],[5,"new32","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"f32"},{"name":"usize"},{"name":"f32"}],"output":{"name":"box"}}],[5,"new_with_performance_options32","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"f32"},{"name":"usize"},{"name":"f32"},{"name":"usize"},{"name":"bool"}],"output":{"name":"box"}}],[5,"get_value32","","",null,{"inputs":[{"name":"datavector32"},{"name":"usize"}],"output":{"name":"f32"}}],[5,"set_value32","","",null,{"inputs":[{"name":"datavector32"},{"name":"usize"},{"name":"f32"}],"output":null}],[5,"is_complex32","","",null,{"inputs":[{"name":"datavector32"}],"output":{"name":"i32"}}],[5,"get_domain32","","Returns the vector domain as integer:",null,{"inputs":[{"name":"datavector32"}],"output":{"name":"i32"}}],[5,"get_len32","","",null,{"inputs":[{"name":"datavector32"}],"output":{"name":"usize"}}],[5,"set_len32","","",null,{"inputs":[{"name":"datavector32"},{"name":"usize"}],"output":null}],[5,"get_points32","","",null,{"inputs":[{"name":"datavector32"}],"output":{"name":"usize"}}],[5,"get_delta32","","",null,{"inputs":[{"name":"datavector32"}],"output":{"name":"f32"}}],[5,"complex_data32","","",null,null],[5,"get_allocated_len32","","",null,{"inputs":[{"name":"datavector32"}],"output":{"name":"usize"}}],[5,"add_vector32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"subtract_vector32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"divide_vector32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"multiply_vector32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"real_dot_product32","","",null,{"inputs":[{"name":"datavector32"},{"name":"datavector32"}],"output":{"name":"scalarresult"}}],[5,"complex_dot_product32","","",null,{"inputs":[{"name":"datavector32"},{"name":"datavector32"}],"output":{"name":"scalarresult"}}],[5,"real_statistics32","","",null,{"inputs":[{"name":"datavector32"}],"output":{"name":"statistics"}}],[5,"complex_statistics32","","",null,{"inputs":[{"name":"datavector32"}],"output":{"name":"statistics"}}],[5,"zero_pad32","","`padding_option` argument is translated to:\nReturns the vector domain as integer:",null,{"inputs":[{"name":"box"},{"name":"usize"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"zero_interleave32","","",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"diff32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"diff_with_start32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"cum_sum32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"real_offset32","","",null,{"inputs":[{"name":"box"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"real_scale32","","",null,{"inputs":[{"name":"box"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"abs32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sqrt32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"square32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"root32","","",null,{"inputs":[{"name":"box"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"power32","","",null,{"inputs":[{"name":"box"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"logn32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"expn32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"log_base32","","",null,{"inputs":[{"name":"box"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"exp_base32","","",null,{"inputs":[{"name":"box"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"to_complex32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sin32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"cos32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"tan32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"asin32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"acos32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"atan32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sinh32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"cosh32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"tanh32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"asinh32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"acosh32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"atanh32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"wrap32","","",null,{"inputs":[{"name":"box"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"unwrap32","","",null,{"inputs":[{"name":"box"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"swap_halves32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"complex_offset32","","",null,{"inputs":[{"name":"box"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"complex_scale32","","",null,{"inputs":[{"name":"box"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"complex_divide32","","",null,{"inputs":[{"name":"box"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"magnitude32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"get_magnitude32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"i32"}}],[5,"magnitude_squared32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"complex_conj32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"to_real32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"to_imag32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"get_real32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"i32"}}],[5,"get_imag32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"i32"}}],[5,"phase32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"get_phase32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"i32"}}],[5,"plain_fft32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"plain_sfft32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"plain_ifft32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"clone32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[5,"multiply_complex_exponential32","","",null,{"inputs":[{"name":"box"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"add_smaller_vector32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"subtract_smaller_vector32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"divide_smaller_vector32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"multiply_smaller_vector32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"get_real_imag32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"},{"name":"datavector32"}],"output":{"name":"i32"}}],[5,"get_mag_phase32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"},{"name":"datavector32"}],"output":{"name":"i32"}}],[5,"set_real_imag32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"set_mag_phase32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"split_into32","","",null,null],[5,"merge32","","",null,null],[5,"override_data32","","",null,null],[5,"real_statistics_splitted32","","",null,null],[5,"complex_statistics_splitted32","","",null,null],[5,"fft32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sfft32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"ifft32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"plain_sifft32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sifft32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"mirror32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"fft_shift32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"ifft_shift32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"apply_window32","","`window` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"unapply_window32","","See [`apply_window32`](fn.apply_window32.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"windowed_fft32","","See [`apply_window32`](fn.apply_window32.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"windowed_sfft32","","See [`apply_window32`](fn.apply_window32.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"windowed_ifft32","","See [`apply_window32`](fn.apply_window32.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"windowed_sifft32","","See [`apply_window32`](fn.apply_window32.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"apply_custom_window32","","Creates a window from the function `window` and the void pointer `window_data`. The `window_data` pointer is passed to the `window`\nfunction at every call and can be used to store parameters.",null,null],[5,"unapply_custom_window32","","See [`apply_custom_window32`](fn.apply_custom_window32.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"windowed_custom_fft32","","See [`apply_custom_window32`](fn.apply_custom_window32.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"windowed_custom_sfft32","","See [`apply_custom_window32`](fn.apply_custom_window32.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"windowed_custom_ifft32","","See [`apply_custom_window32`](fn.apply_custom_window32.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"windowed_custom_sifft32","","See [`apply_custom_window32`](fn.apply_custom_window32.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"reverse32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"decimatei32","","",null,{"inputs":[{"name":"box"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vectorresult"}}],[5,"prepare_argument32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"prepare_argument_padded32","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"correlate32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"convolve_vector32","","",null,{"inputs":[{"name":"box"},{"name":"datavector32"}],"output":{"name":"vectorresult"}}],[5,"convolve_real32","","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`.\nThe `impulse_response_data` pointer is passed to the `impulse_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"convolve_complex32","","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`.\nThe `impulse_response_data` pointer is passed to the `impulse_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"convolve32","","`impulse_response` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"},{"name":"f32"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vectorresult"}}],[5,"multiply_frequency_response_real32","","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`.\nThe `frequency_response_data` pointer is passed to the `frequency_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"multiply_frequency_response_complex32","","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`.\nThe `frequency_response` pointer is passed to the `frequency_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"multiply_frequency_response32","","`frequency_response` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"interpolatef_custom32","","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`.\nThe `impulse_response_data` pointer is passed to the `impulse_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"interpolatef32","","`impulse_response` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"usize"}],"output":{"name":"vectorresult"}}],[5,"interpolatei_custom32","","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`.\nThe `frequency_response_data` pointer is passed to the `frequency_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"interpolatei32","","`frequency_response` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"},{"name":"f32"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"interpolate_lin32","","",null,{"inputs":[{"name":"box"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[5,"interpolate_hermite32","","",null,{"inputs":[{"name":"box"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vectorresult"}}],[0,"facade64","basic_dsp::interop_facade","Functions for 64bit floating point number based vectors. Please refer to the other chapters of the help for documentation of the functions.",null,null],[5,"delete_vector64","basic_dsp::interop_facade::facade64","",null,{"inputs":[{"name":"box"}],"output":null}],[5,"new64","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"usize"},{"name":"f64"}],"output":{"name":"box"}}],[5,"new_with_performance_options64","","",null,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"f64"},{"name":"usize"},{"name":"f64"},{"name":"usize"},{"name":"bool"}],"output":{"name":"box"}}],[5,"get_value64","","",null,{"inputs":[{"name":"datavector64"},{"name":"usize"}],"output":{"name":"f64"}}],[5,"set_value64","","",null,{"inputs":[{"name":"datavector64"},{"name":"usize"},{"name":"f64"}],"output":null}],[5,"is_complex64","","",null,{"inputs":[{"name":"datavector64"}],"output":{"name":"i32"}}],[5,"get_domain64","","Returns the vector domain as integer:",null,{"inputs":[{"name":"datavector64"}],"output":{"name":"i32"}}],[5,"get_len64","","",null,{"inputs":[{"name":"datavector64"}],"output":{"name":"usize"}}],[5,"set_len64","","",null,{"inputs":[{"name":"datavector64"},{"name":"usize"}],"output":null}],[5,"get_points64","","",null,{"inputs":[{"name":"datavector64"}],"output":{"name":"usize"}}],[5,"get_delta64","","",null,{"inputs":[{"name":"datavector64"}],"output":{"name":"f64"}}],[5,"complex_data64","","",null,null],[5,"get_allocated_len64","","",null,{"inputs":[{"name":"datavector64"}],"output":{"name":"usize"}}],[5,"add_vector64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"subtract_vector64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"divide_vector64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"multiply_vector64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"real_dot_product64","","",null,{"inputs":[{"name":"datavector64"},{"name":"datavector64"}],"output":{"name":"scalarresult"}}],[5,"complex_dot_product64","","",null,{"inputs":[{"name":"datavector64"},{"name":"datavector64"}],"output":{"name":"scalarresult"}}],[5,"real_statistics64","","",null,{"inputs":[{"name":"datavector64"}],"output":{"name":"statistics"}}],[5,"complex_statistics64","","",null,{"inputs":[{"name":"datavector64"}],"output":{"name":"statistics"}}],[5,"zero_pad64","","`padding_option` argument is translated to:\nReturns the vector domain as integer:",null,{"inputs":[{"name":"box"},{"name":"usize"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"zero_interleave64","","",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"diff64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"diff_with_start64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"cum_sum64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"real_offset64","","",null,{"inputs":[{"name":"box"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"real_scale64","","",null,{"inputs":[{"name":"box"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"abs64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sqrt64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"square64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"root64","","",null,{"inputs":[{"name":"box"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"power64","","",null,{"inputs":[{"name":"box"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"logn64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"expn64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"log_base64","","",null,{"inputs":[{"name":"box"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"exp_base64","","",null,{"inputs":[{"name":"box"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"to_complex64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sin64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"cos64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"tan64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"asin64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"acos64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"atan64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sinh64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"cosh64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"tanh64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"asinh64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"acosh64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"atanh64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"wrap64","","",null,{"inputs":[{"name":"box"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"unwrap64","","",null,{"inputs":[{"name":"box"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"swap_halves64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"complex_offset64","","",null,{"inputs":[{"name":"box"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"complex_scale64","","",null,{"inputs":[{"name":"box"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"complex_divide64","","",null,{"inputs":[{"name":"box"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"magnitude64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"get_magnitude64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"i32"}}],[5,"magnitude_squared64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"complex_conj64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"to_real64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"to_imag64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"get_real64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"i32"}}],[5,"get_imag64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"i32"}}],[5,"phase64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"get_phase64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"i32"}}],[5,"plain_fft64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"plain_sfft64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"plain_ifft64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"clone64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[5,"multiply_complex_exponential64","","",null,{"inputs":[{"name":"box"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"add_smaller_vector64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"subtract_smaller_vector64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"divide_smaller_vector64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"multiply_smaller_vector64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"get_real_imag64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"},{"name":"datavector64"}],"output":{"name":"i32"}}],[5,"get_mag_phase64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"},{"name":"datavector64"}],"output":{"name":"i32"}}],[5,"set_real_imag64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"set_mag_phase64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"split_into64","","",null,null],[5,"merge64","","",null,null],[5,"override_data64","","",null,null],[5,"real_statistics_splitted64","","",null,null],[5,"complex_statistics_splitted64","","",null,null],[5,"fft64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sfft64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"ifft64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"plain_sifft64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"sifft64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"mirror64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"fft_shift64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"ifft_shift64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"apply_window64","","`window` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"unapply_window64","","See [`apply_window64`](fn.apply_window64.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"windowed_fft64","","See [`apply_window64`](fn.apply_window64.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"windowed_sfft64","","See [`apply_window64`](fn.apply_window64.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"windowed_ifft64","","See [`apply_window64`](fn.apply_window64.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"windowed_sifft64","","See [`apply_window64`](fn.apply_window64.html) for a description of the `window` parameter.",null,{"inputs":[{"name":"box"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"apply_custom_window64","","Creates a window from the function `window` and the void pointer `window_data`. The `window_data` pointer is passed to the `window`\nfunction at every call and can be used to store parameters.",null,null],[5,"unapply_custom_window64","","See [`apply_custom_window64`](fn.apply_custom_window64.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"windowed_custom_fft64","","See [`apply_custom_window64`](fn.apply_custom_window64.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"windowed_custom_sfft64","","See [`apply_custom_window64`](fn.apply_custom_window64.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"windowed_custom_ifft64","","See [`apply_custom_window64`](fn.apply_custom_window64.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"windowed_custom_sifft64","","See [`apply_custom_window64`](fn.apply_custom_window64.html) for a description of the `window` and `window_data` parameter.",null,null],[5,"reverse64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"decimatei64","","",null,{"inputs":[{"name":"box"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vectorresult"}}],[5,"prepare_argument64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"prepare_argument_padded64","","",null,{"inputs":[{"name":"box"}],"output":{"name":"vectorresult"}}],[5,"correlate64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"convolve_vector64","","",null,{"inputs":[{"name":"box"},{"name":"datavector64"}],"output":{"name":"vectorresult"}}],[5,"convolve_real64","","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`.\nThe `impulse_response_data` pointer is passed to the `impulse_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"convolve_complex64","","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`.\nThe `impulse_response_data` pointer is passed to the `impulse_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"convolve64","","`impulse_response` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vectorresult"}}],[5,"multiply_frequency_response_real64","","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`.\nThe `frequency_response_data` pointer is passed to the `frequency_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"multiply_frequency_response_complex64","","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`.\nThe `frequency_response` pointer is passed to the `frequency_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"multiply_frequency_response64","","`frequency_response` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"interpolatef_custom64","","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`.\nThe `impulse_response_data` pointer is passed to the `impulse_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"interpolatef64","","`impulse_response` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"usize"}],"output":{"name":"vectorresult"}}],[5,"interpolatei_custom64","","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`.\nThe `frequency_response_data` pointer is passed to the `frequency_response`\nfunction at every call and can be used to store parameters.",null,null],[5,"interpolatei64","","`frequency_response` argument is translated to:",null,{"inputs":[{"name":"box"},{"name":"i32"},{"name":"f64"},{"name":"i32"}],"output":{"name":"vectorresult"}}],[5,"interpolate_lin64","","",null,{"inputs":[{"name":"box"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[5,"interpolate_hermite64","","",null,{"inputs":[{"name":"box"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vectorresult"}}],[6,"VecResult","basic_dsp","Result contains on success the vector. On failure it contains an error reason and an vector with invalid data\nwhich still can be used in order to avoid memory allocation.",null,null],[6,"VoidResult","","Void/nothing in case of success or a reason in case of an error.",null,null],[6,"DataVector32","","Specialization of a vector for a certain data type.",null,null],[6,"RealTimeVector32","","Specialization of a vector for a certain data type.",null,null],[6,"ComplexTimeVector32","","Specialization of a vector for a certain data type.",null,null],[6,"RealFreqVector32","","Specialization of a vector for a certain data type.",null,null],[6,"ComplexFreqVector32","","Specialization of a vector for a certain data type.",null,null],[6,"DataVector64","","Specialization of a vector for a certain data type.",null,null],[6,"RealTimeVector64","","Specialization of a vector for a certain data type.",null,null],[6,"ComplexTimeVector64","","Specialization of a vector for a certain data type.",null,null],[6,"RealFreqVector64","","Specialization of a vector for a certain data type.",null,null],[6,"ComplexFreqVector64","","Specialization of a vector for a certain data type.",null,null],[8,"DataVector","","DataVector gives access to the basic properties of all data vectors",null,null],[10,"data","","Gives direct access to the underlying data sequence. It&#39;s recommended to use the `Index functions .\nFor users outside of Rust: It&#39;s discouraged to hold references to this array while executing operations on the vector,\nsince the vector may decide at any operation to invalidate the array. ",29,null],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",29,{"inputs":[{"name":"datavector"}],"output":{"name":"t"}}],[10,"domain","","The domain in which the data vector resides. Basically specifies the x-axis and the type of operations which\nare valid on this vector.",29,{"inputs":[{"name":"datavector"}],"output":{"name":"datavectordomain"}}],[10,"is_complex","","Indicates whether the vector contains complex data. This also specifies the type of operations which are valid\non this vector.",29,{"inputs":[{"name":"datavector"}],"output":{"name":"bool"}}],[10,"len","","The number of valid elements in the the vector.",29,{"inputs":[{"name":"datavector"}],"output":{"name":"usize"}}],[10,"set_len","","Sets the vector length to the given length.\nIf `self.len() &lt; len` then the value of the new elements is undefined.",29,{"inputs":[{"name":"datavector"},{"name":"usize"}],"output":null}],[10,"points","","The number of valid points. If the vector is complex then every valid point consists of two floating point numbers,\nwhile for real vectors every point only consists of one floating point number.",29,{"inputs":[{"name":"datavector"}],"output":{"name":"usize"}}],[10,"allocated_len","","Gets the number of allocated elements in the underlying vector.\nThe allocated length may be larger than the length of valid points. \nIn most cases you likely want to have `len`or `points` instead.",29,{"inputs":[{"name":"datavector"}],"output":{"name":"usize"}}],[8,"GenericVectorOperations","","Defines all operations which are valid on all `DataVectors`.",null,null],[10,"add_vector","","Calculates the sum of `self + summand`. It consumes self and returns the result.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"self"}],"output":{"name":"vecresult"}}],[10,"add_smaller_vector","","Calculates the sum of `self + summand`. `summand` may be smaller than `self` as long\nas `self.len() % summand.len() == 0`. THe result is the same as it would be if \nyou would repeat `summand` until it has the same length as `self`.\nIt consumes self and returns the result.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"self"}],"output":{"name":"vecresult"}}],[10,"subtract_vector","","Calculates the difference of `self - subtrahend`. It consumes self and returns the result.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"self"}],"output":{"name":"vecresult"}}],[10,"subtract_smaller_vector","","Calculates the sum of `self - subtrahend`. `subtrahend` may be smaller than `self` as long\nas `self.len() % subtrahend.len() == 0`. THe result is the same as it would be if \nyou would repeat `subtrahend` until it has the same length as `self`.\nIt consumes self and returns the result.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"self"}],"output":{"name":"vecresult"}}],[10,"multiply_vector","","Calculates the product of `self * factor`. It consumes self and returns the result.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"self"}],"output":{"name":"vecresult"}}],[10,"multiply_smaller_vector","","Calculates the sum of `self - factor`. `factor` may be smaller than `self` as long\nas `self.len() % factor.len() == 0`. THe result is the same as it would be if \nyou would repeat `factor` until it has the same length as `self`.\nIt consumes self and returns the result.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"self"}],"output":{"name":"vecresult"}}],[10,"divide_vector","","Calculates the quotient of `self / summand`. It consumes self and returns the result.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"self"}],"output":{"name":"vecresult"}}],[10,"divide_smaller_vector","","Calculates the sum of `self - divisor`. `divisor` may be smaller than `self` as long\nas `self.len() % divisor.len() == 0`. THe result is the same as it would be if \nyou would repeat `divisor` until it has the same length as `self`.\nIt consumes self and returns the result.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"self"}],"output":{"name":"vecresult"}}],[10,"zero_pad","","Appends zeros add the end of the vector until the vector has the size given in the points argument.\nIf `points` smaller than the `self.len()` then this operation won&#39;t do anything.",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"vecresult"}}],[10,"reverse","","Reverses the data inside the vector.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"zero_interleave","","Ineterleaves zeros `factor - 1`times after every vector element, so that the resulting\nvector will have a length of `self.len() * factor`.",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"u32"}],"output":{"name":"vecresult"}}],[10,"diff","","Calculates the delta of each elements to its previous element. This will decrease the vector length by one point.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"diff_with_start","","Calculates the delta of each elements to its previous element. The first element\nwill remain unchanged.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"cum_sum","","Calculates the cumulative sum of all elements. This operation undoes the `diff_with_start`operation.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"sqrt","","Gets the square root of all vector elements.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"square","","Squares all vector elements.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"root","","Calculates the n-th root of every vector element.",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"power","","Raises every vector element to the given power.",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"logn","","Calculates the natural logarithm to the base e for every vector element.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"expn","","Calculates the natural exponential to the base e for every vector element.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"log_base","","Calculates the logarithm to the given base for every vector element.",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"exp_base","","Calculates the exponential to the given base for every vector element.",30,{"inputs":[{"name":"genericvectoroperations"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"sin","","Calculates the sine of each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"cos","","Calculates the cosine of each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"tan","","Calculates the tangent of each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"asin","","Calculates the principal value of the inverse sine of each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"acos","","Calculates the principal value of the inverse cosine of each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"atan","","Calculates the principal value of the inverse tangent of each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"sinh","","Calculates the hyperbolic sine each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"cosh","","Calculates the hyperbolic cosine each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"tanh","","Calculates the hyperbolic tangent each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"asinh","","Calculates the principal value of the inverse hyperbolic sine of each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"acosh","","Calculates the principal value of the inverse hyperbolic cosine of each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"atanh","","Calculates the principal value of the inverse hyperbolic tangent of each element in radians.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"swap_halves","","This function swaps both halves of the vector. This operation is also called fft shift\nUse it after a `plain_fft` to get a spectrum which is centered at `0 Hz`.",30,{"inputs":[{"name":"genericvectoroperations"}],"output":{"name":"vecresult"}}],[10,"split_into","","Splits the vector into several smaller vectors. `self.len()` must be dividable by\n`targets.len()` without a remainder and this conidition must be true too `targets.len() &gt; 0`.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,null],[10,"merge","","Merges several vectors into `self`. All vectors must have the same size and\nat least one vector must be provided.\n# Failures\nVecResult may report the following `ErrorReason` members:",30,null],[10,"override_data","","Overrides the data in the vector with the given data. This may also change\nthe vectors length (however not the allocated length).",30,null],[8,"RealVectorOperations","","Defines all operations which are valid on `DataVectors` containing real data.\n# Failures\nAll operations in this trait fail with `VectorMustBeReal` if the vector isn&#39;t in the real number space.",null,null],[16,"ComplexPartner","","",31,null],[10,"real_offset","","Adds a scalar to the vector.\n# Example",31,{"inputs":[{"name":"realvectoroperations"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"real_scale","","Multiplies the vector with a scalar.\n# Example",31,{"inputs":[{"name":"realvectoroperations"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"abs","","Gets the absolute value of all vector elements.\n# Example",31,{"inputs":[{"name":"realvectoroperations"}],"output":{"name":"vecresult"}}],[10,"to_complex","","Converts the real vector into a complex vector.",31,{"inputs":[{"name":"realvectoroperations"}],"output":{"name":"vecresult"}}],[10,"wrap","","Each value in the vector is devided by the divisor and the remainder is stored in the resulting\nvector. This the same a modulo operation or to phase wrapping.",31,{"inputs":[{"name":"realvectoroperations"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"unwrap","","This function corrects the jumps in the given vector which occur due to wrap or modulo operations.\nThis will undo a wrap operation only if the deltas are smaller than half the divisor.",31,{"inputs":[{"name":"realvectoroperations"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"real_dot_product","","Calculates the dot product of self and factor. Self and factor remain unchanged.\n# Failures\nVecResult may report the following `ErrorReason` members:",31,{"inputs":[{"name":"realvectoroperations"},{"name":"self"}],"output":{"name":"scalarresult"}}],[10,"real_statistics","","Calculates the statistics of the data contained in the vector.\n# Example",31,{"inputs":[{"name":"realvectoroperations"}],"output":{"name":"statistics"}}],[10,"real_statistics_splitted","","Calculates the statistics of the data contained in the vector as if the vector would\nhave been split into `len` pieces. `self.len` should be devisable by `len` without a remainder,\nbut this isn&#39;t enforced by the implementation.\n# Example",31,{"inputs":[{"name":"realvectoroperations"},{"name":"usize"}],"output":{"name":"vec"}}],[8,"ComplexVectorOperations","","Defines all operations which are valid on `DataVectors` containing complex data.\n# Failures\nAll operations in this trait fail with `VectorMustBeComplex` if the vector isn&#39;t in the complex number space.",null,null],[16,"RealPartner","","",32,null],[10,"complex_data","","Gets `self.data()` as complex array.",32,null],[10,"complex_offset","","Adds a scalar to the vector.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"complex"}],"output":{"name":"vecresult"}}],[10,"complex_scale","","Multiplies the vector with a scalar.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"complex"}],"output":{"name":"vecresult"}}],[10,"multiply_complex_exponential","","Multiplies each vector element with `exp(j*(a*idx*self.delta() + b))`\nwhere `a` and `b` are arguments and `idx` is the index of the data points\nin the vector ranging from `0 to self.points() - 1`. `j` is the imaginary number and\n`exp` the exponential function.",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"t"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"magnitude","","Gets the absolute value or magnitude of all vector elements.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"}],"output":{"name":"vecresult"}}],[10,"get_magnitude","","Copies the absolute value or magnitude of all vector elements into the given target vector.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[10,"magnitude_squared","","Gets the square root of the absolute value of all vector elements.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"}],"output":{"name":"vecresult"}}],[10,"complex_conj","","Calculates the complex conjugate of the vector.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"}],"output":{"name":"vecresult"}}],[10,"to_real","","Gets all real elements.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"}],"output":{"name":"vecresult"}}],[10,"to_imag","","Gets all imag elements.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"}],"output":{"name":"vecresult"}}],[10,"get_real","","Copies all real elements into the given vector.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[10,"get_imag","","Copies all imag elements into the given vector.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[10,"phase","","Gets the phase of all elements in [rad].\n# Example",32,{"inputs":[{"name":"complexvectoroperations"}],"output":{"name":"vecresult"}}],[10,"get_phase","","Copies the phase of all elements in [rad] into the given vector.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[10,"complex_dot_product","","Calculates the dot product of self and factor. Self and factor remain unchanged.\n# Failures\nVecResult may report the following `ErrorReason` members:",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"self"}],"output":{"name":"scalarresult"}}],[10,"complex_statistics","","Calculates the statistics of the data contained in the vector.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"}],"output":{"name":"statistics"}}],[10,"complex_statistics_splitted","","Calculates the statistics of the data contained in the vector as if the vector would\nhave been split into `len` pieces. `self.len` should be devisable by `len` without a remainder,\nbut this isn&#39;t enforced by the implementation.\n# Example",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"usize"}],"output":{"name":"vec"}}],[10,"get_real_imag","","Gets the real and imaginary parts and stores them in the given vectors.\nSee [`get_phase`](trait.ComplexVectorOperations.html#tymethod.get_phase) and\n[`get_complex_abs`](trait.ComplexVectorOperations.html#tymethod.get_complex_abs) for further\ninformation.",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[10,"get_mag_phase","","Gets the magnitude and phase and stores them in the given vectors.\nSee [`get_real`](trait.ComplexVectorOperations.html#tymethod.get_real) and\n[`get_imag`](trait.ComplexVectorOperations.html#tymethod.get_imag) for further\ninformation.",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"voidresult"}}],[10,"set_real_imag","","Overrides the `self` vectors data with the real and imaginary data in the given vectors.\n`real` and `imag` must have the same size.",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[10,"set_mag_phase","","Overrides the `self` vectors data with the magnitude and phase data in the given vectors.\nNote that `self` vector will immediately convert the data into a real and imaginary representation\nof the complex numbers which is its default format. \n`mag` and `phase` must have the same size.",32,{"inputs":[{"name":"complexvectoroperations"},{"name":"realpartner"},{"name":"realpartner"}],"output":{"name":"vecresult"}}],[8,"TimeDomainOperations","","Defines all operations which are valid on `DataVectors` containing time domain data.\n# Failures\nAll operations in this trait fail with `VectorMustBeInTimeDomain` if the vector isn&#39;t in time domain.",null,null],[16,"FreqPartner","","",33,null],[10,"plain_fft","","Performs a Fast Fourier Transformation transforming a time domain vector\ninto a frequency domain vector. ",33,{"inputs":[{"name":"timedomainoperations"}],"output":{"name":"vecresult"}}],[10,"fft","","Performs a Fast Fourier Transformation transforming a time domain vector\ninto a frequency domain vector. \n# Unstable\nFFTs of real vectors are unstable.\n# Example",33,{"inputs":[{"name":"timedomainoperations"}],"output":{"name":"vecresult"}}],[10,"windowed_fft","","Applies a FFT window and performs a Fast Fourier Transformation transforming a time domain vector\ninto a frequency domain vector. ",33,{"inputs":[{"name":"timedomainoperations"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[10,"apply_window","","Applies a window to the data vector.",33,{"inputs":[{"name":"timedomainoperations"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[10,"unapply_window","","Removes a window from the data vector.",33,{"inputs":[{"name":"timedomainoperations"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[8,"FrequencyDomainOperations","","Defines all operations which are valid on `DataVectors` containing frequency domain data.\n# Failures\nAll operations in this trait fail with `VectorMustBeInFrquencyDomain` or `VectorMustBeComplex` \nif the vector isn&#39;t in frequency domain and complex number space.",null,null],[16,"ComplexTimePartner","","",34,null],[10,"plain_ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector\ninto a time domain vector.",34,{"inputs":[{"name":"frequencydomainoperations"}],"output":{"name":"vecresult"}}],[10,"mirror","","This function mirrors the spectrum vector to transform a symmetric spectrum\ninto a full spectrum with the DC element at index 0 (no fft shift/swap halves).",34,{"inputs":[{"name":"frequencydomainoperations"}],"output":{"name":"vecresult"}}],[10,"ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector\ninto a time domain vector.\n# Example",34,{"inputs":[{"name":"frequencydomainoperations"}],"output":{"name":"vecresult"}}],[10,"windowed_ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector\ninto a time domain vector and removes the FFT window.",34,{"inputs":[{"name":"frequencydomainoperations"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[10,"fft_shift","","Swaps vector halves after a Fourier Transformation.",34,{"inputs":[{"name":"frequencydomainoperations"}],"output":{"name":"vecresult"}}],[10,"ifft_shift","","Swaps vector halves before an Inverse Fourier Transformation.",34,{"inputs":[{"name":"frequencydomainoperations"}],"output":{"name":"vecresult"}}],[8,"SymmetricFrequencyDomainOperations","","Defines all operations which are valid on `DataVectors` containing frequency domain data and\nthe data is assumed to half of complex conjungate symmetric spectrum round 0 Hz where \nthe 0 Hz element itself is real.\n# Failures\nAll operations in this trait fail with `VectorMustBeInFrquencyDomain`\nif the vector isn&#39;t in frequency domain or with `VectorMustBeConjSymmetric` if the first element (0Hz)\nisn&#39;t real.",null,null],[16,"RealTimePartner","","",35,null],[10,"plain_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation under the assumption that `self`\ncontains half of a symmetric spectrum starting from 0 Hz. This assumption\nisn&#39;t verified and no error is raised if the spectrum isn&#39;t symmetric. The reason\nfor this is that there is no robust verification possible.",35,{"inputs":[{"name":"symmetricfrequencydomainoperations"}],"output":{"name":"vecresult"}}],[10,"sifft","","Performs a Symmetric Inverse Fast Fourier Transformation under the assumption that `self`\ncontains half of a symmetric spectrum starting from 0 Hz. This assumption\nisn&#39;t verified and no error is raised if the spectrum isn&#39;t symmetric. The reason\nfor this is that there is no robust verification possible.",35,{"inputs":[{"name":"symmetricfrequencydomainoperations"}],"output":{"name":"vecresult"}}],[10,"windowed_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation (SIFFT) and removes the FFT window.\nThe SIFFT is performed under the assumption that `self`\ncontains half of a symmetric spectrum starting from 0 Hz. This assumption\nisn&#39;t verified and no error is raised if the spectrum isn&#39;t symmetric. The reason\nfor this is that there is no robust verification possible.",35,{"inputs":[{"name":"symmetricfrequencydomainoperations"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[8,"SymmetricTimeDomainOperations","","Defines all operations which are valid on `DataVectors` containing real time domain data.\n# Failures\nAll operations in this trait fail with `VectorMustBeInTimeDomain` if the vector isn&#39;t in time domain or\nwith `VectorMustHaveAnOddLength` if `self.points()` isn&#39;t and odd number.",null,null],[16,"FreqPartner","","",36,null],[10,"plain_sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self`\nis symmetric around the center. This assumption\nisn&#39;t verified and no error is raised if the vector isn&#39;t symmetric.",36,{"inputs":[{"name":"symmetrictimedomainoperations"}],"output":{"name":"vecresult"}}],[10,"sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self`\nis symmetric around the center. This assumption\nisn&#39;t verified and no error is raised if the vector isn&#39;t symmetric.\n# Failures\nVecResult may report the following `ErrorReason` members:",36,{"inputs":[{"name":"symmetrictimedomainoperations"}],"output":{"name":"vecresult"}}],[10,"windowed_sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self`\nis symmetric around the center. This assumption\nisn&#39;t verified and no error is raised if the vector isn&#39;t symmetric.\n# Failures\nVecResult may report the following `ErrorReason` members:",36,{"inputs":[{"name":"symmetrictimedomainoperations"},{"name":"windowfunction"}],"output":{"name":"vecresult"}}],[8,"RededicateVector","","This trait allows to change a vector type. The operations will\nconvert a vector to a different type and set `self.len()` to zero.\nHowever `self.allocated_len()` will remain unchanged. The use case for this\nis to allow to reuse the memory of a vector for different operations.",null,null],[10,"rededicate_as_complex_time_vector","","Make `self` a complex time vector\n# Example",37,{"inputs":[{"name":"rededicatevector"},{"name":"t"}],"output":{"name":"complextimevector"}}],[10,"rededicate_as_complex_freq_vector","","Make `self` a complex frequency vector",37,{"inputs":[{"name":"rededicatevector"},{"name":"t"}],"output":{"name":"complexfreqvector"}}],[10,"rededicate_as_real_time_vector","","Make `self` a real time vector",37,{"inputs":[{"name":"rededicatevector"},{"name":"t"}],"output":{"name":"realtimevector"}}],[10,"rededicate_as_real_freq_vector","","Make `self` a real freq vector",37,{"inputs":[{"name":"rededicatevector"},{"name":"t"}],"output":{"name":"realfreqvector"}}],[10,"rededicate_as_generic_vector","","Make `self` a generic vector",37,{"inputs":[{"name":"rededicatevector"},{"name":"bool"},{"name":"datavectordomain"},{"name":"t"}],"output":{"name":"genericdatavector"}}],[8,"Scale","","An operation which multiplies each vector element with a constant",null,null],[10,"scale","","Multiplies the vector element with a scalar.",38,{"inputs":[{"name":"scale"},{"name":"t"}],"output":{"name":"vecresult"}}],[8,"Offset","","An operation which adds a constant to each vector element",null,null],[10,"offset","","Adds a scalar to each vector element.",39,{"inputs":[{"name":"offset"},{"name":"t"}],"output":{"name":"vecresult"}}],[8,"Convolution","","Provides a convolution operation for data vectors.",null,null],[10,"convolve","","Convolves `self` with the convolution function `impulse_response`. For performance consider to\nto use `FrequencyMultiplication` instead of this operation depending on `len`.",40,{"inputs":[{"name":"convolution"},{"name":"c"},{"name":"t"},{"name":"usize"}],"output":{"name":"vecresult"}}],[8,"VectorConvolution","","Provides a convolution operation for data vectors with data vectors.",null,null],[10,"convolve_vector","","Convolves `self` with the convolution function `impulse_response`. For performance it&#39;s recommended\nto use multiply both vectors in frequency domain instead of this operation.\n# Failures\nVecResult may report the following `ErrorReason` members:",41,{"inputs":[{"name":"vectorconvolution"},{"name":"self"}],"output":{"name":"vecresult"}}],[8,"FrequencyMultiplication","","Provides a frequency response multiplication operation for data vectors.",null,null],[10,"multiply_frequency_response","","Mutiplies `self` with the frequency response function `frequency_response`.",42,{"inputs":[{"name":"frequencymultiplication"},{"name":"c"},{"name":"t"}],"output":{"name":"vecresult"}}],[8,"CrossCorrelation","","Cross-correlation of data vectors. See also https://en.wikipedia.org/wiki/Cross-correlation",null,null],[16,"FreqPartner","","",43,null],[10,"prepare_argument","","Prepares an argument to be used for convolution. Preparing an argument includes two steps:",43,{"inputs":[{"name":"crosscorrelation"}],"output":{"name":"vecresult"}}],[10,"prepare_argument_padded","","Prepares an argument to be used for convolution. The argument is zero padded to length of `2 * self.points() - 1`\nand then the same operations are performed as described for `prepare_argument`.",43,{"inputs":[{"name":"crosscorrelation"}],"output":{"name":"vecresult"}}],[10,"correlate","","Calculates the correlation between `self` and `other`. `other` needs to be a time vector which\nwent through one of the prepare functions `prepare_argument` or `prepare_argument_padded`. See also the \ntrait description for more details.",43,{"inputs":[{"name":"crosscorrelation"},{"name":"freqpartner"}],"output":{"name":"vecresult"}}],[8,"Interpolation","","Provides interpolation operations for real and complex data vectors.\n# Unstable\nThis functionality has been recently added in order to find out if the definitions are consistent.\nHowever the actual implementation is lacking tests.",null,null],[10,"interpolatef","","Interpolates `self` with the convolution function `function` by the real value `interpolation_factor`.\nInterpolation is done in in time domain and the argument `conv_len` can be used to balance accuracy \nand computational performance. \nA `delay` can be used to delay or phase shift the vector. The `delay` considers `self.delta()`.",44,{"inputs":[{"name":"interpolation"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":{"name":"vecresult"}}],[10,"interpolatei","","Interpolates `self` with the convolution function `function` by the interger value `interpolation_factor`.\nInterpolation is done in in frequency domain.",44,{"inputs":[{"name":"interpolation"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"vecresult"}}],[10,"decimatei","","Decimates or downsamples `self`. `decimatei` is the inverse function to `interpolatei`.",44,{"inputs":[{"name":"interpolation"},{"name":"u32"},{"name":"u32"}],"output":{"name":"vecresult"}}],[8,"RealInterpolation","","Provides interpolation operations which are only applicable for real data vectors.\n# Failures\nAll operations in this trait fail with `VectorMustBeReal` if the vector isn&#39;t in the real number space.",null,null],[10,"interpolate_hermite","","Piecewise cubic hermite interpolation between samples.\n# Unstable\nAlgorithm might need to be revised.\nThis operation and `interpolate_lin` might be merged into one function with an additional argument in future.",45,{"inputs":[{"name":"realinterpolation"},{"name":"t"},{"name":"t"}],"output":{"name":"vecresult"}}],[10,"interpolate_lin","","Linear interpolation between samples.\n# Unstable\nThis operation and `interpolate_hermite` might be merged into one function with an additional argument in future.",45,{"inputs":[{"name":"realinterpolation"},{"name":"t"},{"name":"t"}],"output":{"name":"vecresult"}}],[8,"RealNumber","","A real floating pointer number intended to abstract over `f32` and `f64`.",null,null]],"paths":[[3,"Statistics"],[3,"MultiCoreSettings"],[4,"DataVectorDomain"],[4,"ErrorReason"],[4,"Operation"],[4,"PaddingOption"],[3,"GenericDataVector"],[3,"ComplexTimeVector"],[3,"RealTimeVector"],[3,"ComplexFreqVector"],[3,"RealFreqVector"],[3,"ForeignWindowFunction"],[8,"WindowFunction"],[3,"TriangularWindow"],[3,"HammingWindow"],[3,"ForeignRealConvolutionFunction"],[3,"ForeignComplexConvolutionFunction"],[8,"RealImpulseResponse"],[8,"RealFrequencyResponse"],[8,"ComplexImpulseResponse"],[8,"ComplexFrequencyResponse"],[3,"RealTimeLinearTableLookup"],[3,"RealFrequencyLinearTableLookup"],[3,"ComplexTimeLinearTableLookup"],[3,"ComplexFrequencyLinearTableLookup"],[3,"RaisedCosineFunction"],[3,"SincFunction"],[3,"VectorResult"],[3,"ScalarResult"],[8,"DataVector"],[8,"GenericVectorOperations"],[8,"RealVectorOperations"],[8,"ComplexVectorOperations"],[8,"TimeDomainOperations"],[8,"FrequencyDomainOperations"],[8,"SymmetricFrequencyDomainOperations"],[8,"SymmetricTimeDomainOperations"],[8,"RededicateVector"],[8,"Scale"],[8,"Offset"],[8,"Convolution"],[8,"VectorConvolution"],[8,"FrequencyMultiplication"],[8,"CrossCorrelation"],[8,"Interpolation"],[8,"RealInterpolation"]]};
searchIndex["rustfft"] = {"doc":"","items":[[3,"FFT","rustfft","",null,null],[5,"dft","","",null,null],[11,"new","","Creates a new FFT context that will process signal of length\n`len`. If `inverse` is `true`, then this struct will run inverse\nFFTs. This implementation of the FFT doesn&#39;t do any scaling on both\nthe forward and backward transforms, so doing a forward then backward\nFFT on a signal will scale the signal by its length.",0,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"process","","Runs the FFT on the input `signal` buffer, and places the output in the\n`spectrum` buffer.",0,null]],"paths":[[3,"FFT"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`&#39;s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`&#39;s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f32","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_f64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",5,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",5,{"inputs":[{"name":"biguint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"mul","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"hash","","",6,null],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"decode","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f32","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_f64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",6,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",6,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix.\n`radix` must be in the range `[2, 36]`.",6,{"inputs":[{"name":"bigint"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it&#39;s not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",7,null],[12,"im","","Imaginary portion of the complex number",7,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",7,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",7,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",7,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",7,null],[11,"from_polar","","Convert a polar representation into a complex number.",7,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",7,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",7,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",7,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",7,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",7,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",8,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",8,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",8,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",9,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",11,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",12,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",13,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",14,null],[13,"Invalid","","",14,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",15,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",15,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",16,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",16,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",17,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",18,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",18,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",18,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",19,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",19,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",20,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",21,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",22,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",23,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",24,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",25,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",25,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",25,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",25,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",26,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",27,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",28,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",29,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",29,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",29,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",29,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",29,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",29,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",29,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",29,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",29,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",29,null],[11,"fmt","","",13,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",30,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",30,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",30,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",30,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",30,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",30,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",30,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",30,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",30,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",30,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",31,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",2,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",4,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",11,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["simple_parallel"] = {"doc":"Straight-forward functions and types for basic data parallel\noperations.","items":[[5,"map","simple_parallel","Execute `f` on `iter`, yielding the results in the order the\ncorrespond to in `iter`.",null,{"inputs":[{"name":"scope"},{"name":"i"},{"name":"f"}],"output":{"name":"parmap"}}],[5,"unordered_map","","Execute `f` on each element in `iter`, with unspecified yield order.",null,{"inputs":[{"name":"scope"},{"name":"i"},{"name":"f"}],"output":{"name":"unorderedparmap"}}],[5,"for_","","Execute `f` on each element of `iter`, in their own `scoped`\nthread.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":null}],[5,"both","","Execute `f` on both `x` and `y`, in parallel, returning the\nresult.",null,null],[0,"pool","","",null,null],[3,"Pool","simple_parallel::pool","A thread pool.",null,null],[3,"JobHandle","","A token representing a job submitted to the thread pool.",null,null],[3,"UnorderedParMap","","A parallel-mapping iterator, that yields elements in the order\nthey are computed, not the order from which they are yielded by\nthe underlying iterator. Constructed by calling\n`Pool::unordered_map`.",null,null],[3,"ParMap","","A parallel-mapping iterator, that yields elements in the order\nthey are yielded by the underlying iterator. Constructed by\ncalling `Pool::map`.",null,null],[11,"wait","","Block until the job is finished.",0,{"inputs":[{"name":"jobhandle"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"jobhandle"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"pool"}],"output":null}],[11,"new","","Create a new thread pool with `n_threads` worker threads.",1,{"inputs":[{"name":"usize"}],"output":{"name":"pool"}}],[11,"for_","","Execute `f` on each element of `iter`.",1,{"inputs":[{"name":"pool"},{"name":"iter"},{"name":"f"}],"output":null}],[11,"unordered_map","","Execute `f` on each element in `iter` in parallel across the\npool&#39;s threads, with unspecified yield order.",1,{"inputs":[{"name":"pool"},{"name":"scope"},{"name":"i"},{"name":"f"}],"output":{"name":"unorderedparmap"}}],[11,"map","","Execute `f` on `iter` in parallel across the pool&#39;s threads,\nreturning an iterator that yields the results in the order of\nthe elements of `iter` to which they correspond.",1,{"inputs":[{"name":"pool"},{"name":"scope"},{"name":"i"},{"name":"f"}],"output":{"name":"parmap"}}],[11,"execute","","Run a job on the thread pool.",1,{"inputs":[{"name":"pool"},{"name":"scope"},{"name":"a"},{"name":"genfn"},{"name":"mainfn"}],"output":{"name":"jobhandle"}}],[11,"next","","",2,{"inputs":[{"name":"unorderedparmap"}],"output":{"name":"option"}}],[11,"next","","",3,{"inputs":[{"name":"parmap"}],"output":{"name":"option"}}],[0,"one_to_one","simple_parallel","",null,null],[3,"UnorderedParMap","simple_parallel::one_to_one","A parallel-mapping iterator that doesn&#39;t care about the order in\nwhich elements come out. Constructed by calling `unordered_map`.",null,null],[3,"ParMap","","A parallel-mapping iterator. Constructed by calling `map`.",null,null],[5,"unordered_map","","Execute `f` on each element in `iter`, with unspecified yield order.",null,{"inputs":[{"name":"scope"},{"name":"i"},{"name":"f"}],"output":{"name":"unorderedparmap"}}],[5,"map","","Execute `f` on `iter`, yielding the results in the order the\ncorrespond to in `iter`.",null,{"inputs":[{"name":"scope"},{"name":"i"},{"name":"f"}],"output":{"name":"parmap"}}],[11,"next","","",4,{"inputs":[{"name":"unorderedparmap"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"parmap"}],"output":{"name":"option"}}]],"paths":[[3,"JobHandle"],[3,"Pool"],[3,"UnorderedParMap"],[3,"ParMap"],[3,"UnorderedParMap"],[3,"ParMap"]]};
searchIndex["simd"] = {"doc":"`simd` offers a basic interface to the SIMD functionality of CPUs.","items":[[3,"bool8i","simd","Boolean type for 8-bit integers.",null,null],[3,"bool16i","","Boolean type for 16-bit integers.",null,null],[3,"bool32i","","Boolean type for 32-bit integers.",null,null],[3,"bool32f","","Boolean type for 32-bit floats.",null,null],[3,"u32x4","","A SIMD vector of 4 `u32`s.",null,null],[3,"i32x4","","A SIMD vector of 4 `i32`s.",null,null],[3,"f32x4","","A SIMD vector of 4 `f32`s.",null,null],[3,"bool32ix4","","A SIMD boolean vector for length-4 vectors of 32-bit integers.",null,null],[3,"bool32fx4","","A SIMD boolean vector for length-4 vectors of 32-bit floats.",null,null],[3,"u16x8","","A SIMD vector of 8 `u16`s.",null,null],[3,"i16x8","","A SIMD vector of 8 `i16`s.",null,null],[3,"bool16ix8","","A SIMD boolean vector for length-8 vectors of 16-bit integers.",null,null],[3,"u8x16","","A SIMD vector of 16 `u8`s.",null,null],[3,"i8x16","","A SIMD vector of 16 `i8`s.",null,null],[3,"bool8ix16","","A SIMD boolean vector for length-16 vectors of 8-bit integers.",null,null],[11,"new","","Create a new instance.",0,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32x4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",0,{"inputs":[{"name":"u32"}],"output":{"name":"u32x4"}}],[11,"eq","","Compare for equality.",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"ne","","Compare for equality.",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"lt","","Compare for equality.",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"le","","Compare for equality.",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"gt","","Compare for equality.",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"ge","","Compare for equality.",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",0,{"inputs":[{"name":"u32x4"},{"name":"u32"}],"output":{"name":"u32"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",0,{"inputs":[{"name":"u32x4"},{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",0,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",0,null],[11,"new","","Create a new instance.",1,{"inputs":[{"name":"i32"},{"name":"i32"},{"name":"i32"},{"name":"i32"}],"output":{"name":"i32x4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",1,{"inputs":[{"name":"i32"}],"output":{"name":"i32x4"}}],[11,"eq","","Compare for equality.",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"ne","","Compare for equality.",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"lt","","Compare for equality.",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"le","","Compare for equality.",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"gt","","Compare for equality.",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"ge","","Compare for equality.",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"bool32ix4"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",1,{"inputs":[{"name":"i32x4"},{"name":"u32"}],"output":{"name":"i32"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",1,{"inputs":[{"name":"i32x4"},{"name":"u32"},{"name":"i32"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",1,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",1,null],[11,"new","","Create a new instance.",2,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32x4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",2,{"inputs":[{"name":"f32"}],"output":{"name":"f32x4"}}],[11,"eq","","Compare for equality.",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"bool32fx4"}}],[11,"ne","","Compare for equality.",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"bool32fx4"}}],[11,"lt","","Compare for equality.",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"bool32fx4"}}],[11,"le","","Compare for equality.",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"bool32fx4"}}],[11,"gt","","Compare for equality.",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"bool32fx4"}}],[11,"ge","","Compare for equality.",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"bool32fx4"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",2,{"inputs":[{"name":"f32x4"},{"name":"u32"}],"output":{"name":"f32"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",2,{"inputs":[{"name":"f32x4"},{"name":"u32"},{"name":"f32"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",2,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",2,null],[11,"new","","Create a new instance.",3,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"u16x8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",3,{"inputs":[{"name":"u16"}],"output":{"name":"u16x8"}}],[11,"eq","","Compare for equality.",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"ne","","Compare for equality.",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"lt","","Compare for equality.",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"le","","Compare for equality.",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"gt","","Compare for equality.",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"ge","","Compare for equality.",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",3,{"inputs":[{"name":"u16x8"},{"name":"u32"}],"output":{"name":"u16"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",3,{"inputs":[{"name":"u16x8"},{"name":"u32"},{"name":"u16"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",3,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",3,null],[11,"new","","Create a new instance.",4,{"inputs":[{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"},{"name":"i16"}],"output":{"name":"i16x8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",4,{"inputs":[{"name":"i16"}],"output":{"name":"i16x8"}}],[11,"eq","","Compare for equality.",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"ne","","Compare for equality.",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"lt","","Compare for equality.",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"le","","Compare for equality.",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"gt","","Compare for equality.",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"ge","","Compare for equality.",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"bool16ix8"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",4,{"inputs":[{"name":"i16x8"},{"name":"u32"}],"output":{"name":"i16"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",4,{"inputs":[{"name":"i16x8"},{"name":"u32"},{"name":"i16"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",4,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",4,null],[11,"new","","Create a new instance.",5,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"u8x16"}}],[11,"splat","","Create a new instance where every lane has value `x`.",5,{"inputs":[{"name":"u8"}],"output":{"name":"u8x16"}}],[11,"eq","","Compare for equality.",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"ne","","Compare for equality.",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"lt","","Compare for equality.",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"le","","Compare for equality.",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"gt","","Compare for equality.",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"ge","","Compare for equality.",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",5,{"inputs":[{"name":"u8x16"},{"name":"u32"}],"output":{"name":"u8"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",5,{"inputs":[{"name":"u8x16"},{"name":"u32"},{"name":"u8"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",5,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",5,null],[11,"new","","Create a new instance.",6,{"inputs":[{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"},{"name":"i8"}],"output":{"name":"i8x16"}}],[11,"splat","","Create a new instance where every lane has value `x`.",6,{"inputs":[{"name":"i8"}],"output":{"name":"i8x16"}}],[11,"eq","","Compare for equality.",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"ne","","Compare for equality.",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"lt","","Compare for equality.",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"le","","Compare for equality.",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"gt","","Compare for equality.",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"ge","","Compare for equality.",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"bool8ix16"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",6,{"inputs":[{"name":"i8x16"},{"name":"u32"}],"output":{"name":"i8"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",6,{"inputs":[{"name":"i8x16"},{"name":"u32"},{"name":"i8"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",6,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",6,null],[11,"to_repr","","Convert to integer representation.",7,{"inputs":[{"name":"bool32ix4"}],"output":{"name":"i32x4"}}],[11,"from_repr","","Convert from integer representation.",7,{"inputs":[{"name":"i32x4"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",7,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool32ix4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",7,{"inputs":[{"name":"bool"}],"output":{"name":"bool32ix4"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",7,{"inputs":[{"name":"bool32ix4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",7,{"inputs":[{"name":"bool32ix4"},{"name":"u32"},{"name":"bool"}],"output":{"name":"self"}}],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",7,{"inputs":[{"name":"bool32ix4"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"all","","Check if every element of `self` is true.",7,{"inputs":[{"name":"bool32ix4"}],"output":{"name":"bool"}}],[11,"any","","Check if any element of `self` is true.",7,{"inputs":[{"name":"bool32ix4"}],"output":{"name":"bool"}}],[11,"to_f","","Convert `self` to a boolean vector for interacting with floating point vectors.",7,{"inputs":[{"name":"bool32ix4"}],"output":{"name":"bool32fx4"}}],[11,"not","","",7,{"inputs":[{"name":"bool32ix4"}],"output":{"name":"self"}}],[11,"to_repr","","Convert to integer representation.",8,{"inputs":[{"name":"bool32fx4"}],"output":{"name":"i32x4"}}],[11,"from_repr","","Convert from integer representation.",8,{"inputs":[{"name":"i32x4"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",8,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool32fx4"}}],[11,"splat","","Create a new instance where every lane has value `x`.",8,{"inputs":[{"name":"bool"}],"output":{"name":"bool32fx4"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",8,{"inputs":[{"name":"bool32fx4"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",8,{"inputs":[{"name":"bool32fx4"},{"name":"u32"},{"name":"bool"}],"output":{"name":"self"}}],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",8,{"inputs":[{"name":"bool32fx4"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"all","","Check if every element of `self` is true.",8,{"inputs":[{"name":"bool32fx4"}],"output":{"name":"bool"}}],[11,"any","","Check if any element of `self` is true.",8,{"inputs":[{"name":"bool32fx4"}],"output":{"name":"bool"}}],[11,"to_i","","Convert `self` to a boolean vector for interacting with integer vectors.",8,{"inputs":[{"name":"bool32fx4"}],"output":{"name":"bool32ix4"}}],[11,"not","","",8,{"inputs":[{"name":"bool32fx4"}],"output":{"name":"self"}}],[11,"to_repr","","Convert to integer representation.",9,{"inputs":[{"name":"bool16ix8"}],"output":{"name":"i16x8"}}],[11,"from_repr","","Convert from integer representation.",9,{"inputs":[{"name":"i16x8"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",9,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool16ix8"}}],[11,"splat","","Create a new instance where every lane has value `x`.",9,{"inputs":[{"name":"bool"}],"output":{"name":"bool16ix8"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",9,{"inputs":[{"name":"bool16ix8"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",9,{"inputs":[{"name":"bool16ix8"},{"name":"u32"},{"name":"bool"}],"output":{"name":"self"}}],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",9,{"inputs":[{"name":"bool16ix8"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"all","","Check if every element of `self` is true.",9,{"inputs":[{"name":"bool16ix8"}],"output":{"name":"bool"}}],[11,"any","","Check if any element of `self` is true.",9,{"inputs":[{"name":"bool16ix8"}],"output":{"name":"bool"}}],[11,"not","","",9,{"inputs":[{"name":"bool16ix8"}],"output":{"name":"self"}}],[11,"to_repr","","Convert to integer representation.",10,{"inputs":[{"name":"bool8ix16"}],"output":{"name":"i8x16"}}],[11,"from_repr","","Convert from integer representation.",10,{"inputs":[{"name":"i8x16"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",10,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"bool8ix16"}}],[11,"splat","","Create a new instance where every lane has value `x`.",10,{"inputs":[{"name":"bool"}],"output":{"name":"bool8ix16"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",10,{"inputs":[{"name":"bool8ix16"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",10,{"inputs":[{"name":"bool8ix16"},{"name":"u32"},{"name":"bool"}],"output":{"name":"self"}}],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",10,{"inputs":[{"name":"bool8ix16"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"all","","Check if every element of `self` is true.",10,{"inputs":[{"name":"bool8ix16"}],"output":{"name":"bool"}}],[11,"any","","Check if any element of `self` is true.",10,{"inputs":[{"name":"bool8ix16"}],"output":{"name":"bool"}}],[11,"not","","",10,{"inputs":[{"name":"bool8ix16"}],"output":{"name":"self"}}],[11,"to_i32","","Convert each lane to a signed integer.",0,{"inputs":[{"name":"u32x4"}],"output":{"name":"i32x4"}}],[11,"to_f32","","Convert each lane to a 32-bit float.",0,{"inputs":[{"name":"u32x4"}],"output":{"name":"f32x4"}}],[11,"to_u32","","Convert each lane to an unsigned integer.",1,{"inputs":[{"name":"i32x4"}],"output":{"name":"u32x4"}}],[11,"to_f32","","Convert each lane to a 32-bit float.",1,{"inputs":[{"name":"i32x4"}],"output":{"name":"f32x4"}}],[11,"sqrt","","Compute the square root of each lane.",2,{"inputs":[{"name":"f32x4"}],"output":{"name":"self"}}],[11,"approx_rsqrt","","Compute an approximation to the reciprocal of the square root\nof `self`, that is, `f32::splat(1.0) / self.sqrt()`.",2,{"inputs":[{"name":"f32x4"}],"output":{"name":"self"}}],[11,"approx_reciprocal","","Compute an approximation to the reciprocal of `self`, that is,\n`f32::splat(1.0) / self`.",2,{"inputs":[{"name":"f32x4"}],"output":{"name":"self"}}],[11,"max","","Compute the lane-wise maximum of `self` and `other`.",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","Compute the lane-wise minimum of `self` and `other`.",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"to_i32","","Convert each lane to a signed integer.",2,{"inputs":[{"name":"f32x4"}],"output":{"name":"i32x4"}}],[11,"to_u32","","Convert each lane to an unsigned integer.",2,{"inputs":[{"name":"f32x4"}],"output":{"name":"u32x4"}}],[11,"to_u16","","Convert each lane to an unsigned integer.",4,{"inputs":[{"name":"i16x8"}],"output":{"name":"u16x8"}}],[11,"to_i16","","Convert each lane to a signed integer.",3,{"inputs":[{"name":"u16x8"}],"output":{"name":"i16x8"}}],[11,"to_u8","","Convert each lane to an unsigned integer.",6,{"inputs":[{"name":"i8x16"}],"output":{"name":"u8x16"}}],[11,"to_i8","","Convert each lane to a signed integer.",5,{"inputs":[{"name":"u8x16"}],"output":{"name":"i8x16"}}],[11,"neg","","",1,{"inputs":[{"name":"i32x4"}],"output":{"name":"self"}}],[11,"neg","","",4,{"inputs":[{"name":"i16x8"}],"output":{"name":"self"}}],[11,"neg","","",6,{"inputs":[{"name":"i8x16"}],"output":{"name":"self"}}],[11,"neg","","",2,{"inputs":[{"name":"f32x4"}],"output":{"name":"self"}}],[11,"not","","",1,{"inputs":[{"name":"i32x4"}],"output":{"name":"self"}}],[11,"not","","",4,{"inputs":[{"name":"i16x8"}],"output":{"name":"self"}}],[11,"not","","",6,{"inputs":[{"name":"i8x16"}],"output":{"name":"self"}}],[11,"not","","",0,{"inputs":[{"name":"u32x4"}],"output":{"name":"self"}}],[11,"not","","",3,{"inputs":[{"name":"u16x8"}],"output":{"name":"self"}}],[11,"not","","",5,{"inputs":[{"name":"u8x16"}],"output":{"name":"self"}}],[11,"add","","",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","","",2,{"inputs":[{"name":"f32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",10,{"inputs":[{"name":"bool8ix16"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",9,{"inputs":[{"name":"bool16ix8"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",7,{"inputs":[{"name":"bool32ix4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",8,{"inputs":[{"name":"bool32fx4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",10,{"inputs":[{"name":"bool8ix16"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",9,{"inputs":[{"name":"bool16ix8"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",7,{"inputs":[{"name":"bool32ix4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",8,{"inputs":[{"name":"bool32fx4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",10,{"inputs":[{"name":"bool8ix16"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",9,{"inputs":[{"name":"bool16ix8"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",7,{"inputs":[{"name":"bool32ix4"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",8,{"inputs":[{"name":"bool32fx4"},{"name":"self"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",6,{"inputs":[{"name":"i8x16"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","","",6,{"inputs":[{"name":"i8x16"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",5,{"inputs":[{"name":"u8x16"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","","",5,{"inputs":[{"name":"u8x16"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",4,{"inputs":[{"name":"i16x8"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","","",4,{"inputs":[{"name":"i16x8"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",3,{"inputs":[{"name":"u16x8"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","","",3,{"inputs":[{"name":"u16x8"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",1,{"inputs":[{"name":"i32x4"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","","",1,{"inputs":[{"name":"i32x4"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",0,{"inputs":[{"name":"u32x4"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","","",0,{"inputs":[{"name":"u32x4"},{"name":"isize"}],"output":{"name":"self"}}],[0,"x86","","Features specific to x86 and x86-64 CPUs.",null,null],[0,"sse2","simd::x86","",null,null],[3,"f64x2","simd::x86::sse2","A SIMD vector of 2 `f64`s.",null,null],[3,"i64x2","","A SIMD vector of 2 `i64`s.",null,null],[3,"u64x2","","A SIMD vector of 2 `u64`s.",null,null],[3,"bool64ix2","","A SIMD boolean vector for length-2 vectors of 64-bit integers.",null,null],[3,"bool64fx2","","A SIMD boolean vector for length-2 vectors of 64-bit floats.",null,null],[8,"Sse2F32x4","","",null,null],[10,"to_f64","","",11,{"inputs":[{"name":"sse2f32x4"}],"output":{"name":"f64x2"}}],[10,"move_mask","","",11,{"inputs":[{"name":"sse2f32x4"}],"output":{"name":"u32"}}],[8,"Sse2Bool32fx4","","",null,null],[10,"move_mask","","",12,{"inputs":[{"name":"sse2bool32fx4"}],"output":{"name":"u32"}}],[8,"Sse2F64x2","","",null,null],[10,"move_mask","","",13,{"inputs":[{"name":"sse2f64x2"}],"output":{"name":"u32"}}],[10,"sqrt","","",13,{"inputs":[{"name":"sse2f64x2"}],"output":{"name":"self"}}],[10,"max","","",13,{"inputs":[{"name":"sse2f64x2"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","",13,{"inputs":[{"name":"sse2f64x2"},{"name":"self"}],"output":{"name":"self"}}],[8,"Sse2Bool64fx2","","",null,null],[10,"move_mask","","",14,{"inputs":[{"name":"sse2bool64fx2"}],"output":{"name":"u32"}}],[8,"Sse2U64x2","","",null,null],[8,"Sse2I64x2","","",null,null],[8,"Sse2Bool64ix2","","",null,null],[8,"Sse2U32x4","","",null,null],[10,"low_mul","","",15,{"inputs":[{"name":"sse2u32x4"},{"name":"self"}],"output":{"name":"u64x2"}}],[8,"Sse2I32x4","","",null,null],[10,"packs","","",16,{"inputs":[{"name":"sse2i32x4"},{"name":"self"}],"output":{"name":"i16x8"}}],[8,"Sse2Bool32ix4","","",null,null],[8,"Sse2U16x8","","",null,null],[10,"adds","","",17,{"inputs":[{"name":"sse2u16x8"},{"name":"self"}],"output":{"name":"self"}}],[10,"subs","","",17,{"inputs":[{"name":"sse2u16x8"},{"name":"self"}],"output":{"name":"self"}}],[10,"avg","","",17,{"inputs":[{"name":"sse2u16x8"},{"name":"self"}],"output":{"name":"self"}}],[10,"mulhi","","",17,{"inputs":[{"name":"sse2u16x8"},{"name":"self"}],"output":{"name":"self"}}],[8,"Sse2I16x8","","",null,null],[10,"adds","","",18,{"inputs":[{"name":"sse2i16x8"},{"name":"self"}],"output":{"name":"self"}}],[10,"subs","","",18,{"inputs":[{"name":"sse2i16x8"},{"name":"self"}],"output":{"name":"self"}}],[10,"madd","","",18,{"inputs":[{"name":"sse2i16x8"},{"name":"self"}],"output":{"name":"i32x4"}}],[10,"max","","",18,{"inputs":[{"name":"sse2i16x8"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","",18,{"inputs":[{"name":"sse2i16x8"},{"name":"self"}],"output":{"name":"self"}}],[10,"mulhi","","",18,{"inputs":[{"name":"sse2i16x8"},{"name":"self"}],"output":{"name":"self"}}],[10,"packs","","",18,{"inputs":[{"name":"sse2i16x8"},{"name":"self"}],"output":{"name":"i8x16"}}],[10,"packus","","",18,{"inputs":[{"name":"sse2i16x8"},{"name":"self"}],"output":{"name":"u8x16"}}],[8,"Sse2Bool16ix8","","",null,null],[8,"Sse2U8x16","","",null,null],[10,"move_mask","","",19,{"inputs":[{"name":"sse2u8x16"}],"output":{"name":"u32"}}],[10,"adds","","",19,{"inputs":[{"name":"sse2u8x16"},{"name":"self"}],"output":{"name":"self"}}],[10,"subs","","",19,{"inputs":[{"name":"sse2u8x16"},{"name":"self"}],"output":{"name":"self"}}],[10,"avg","","",19,{"inputs":[{"name":"sse2u8x16"},{"name":"self"}],"output":{"name":"self"}}],[10,"max","","",19,{"inputs":[{"name":"sse2u8x16"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","",19,{"inputs":[{"name":"sse2u8x16"},{"name":"self"}],"output":{"name":"self"}}],[10,"sad","","",19,{"inputs":[{"name":"sse2u8x16"},{"name":"self"}],"output":{"name":"u64x2"}}],[8,"Sse2I8x16","","",null,null],[10,"move_mask","","",20,{"inputs":[{"name":"sse2i8x16"}],"output":{"name":"u32"}}],[10,"adds","","",20,{"inputs":[{"name":"sse2i8x16"},{"name":"self"}],"output":{"name":"self"}}],[10,"subs","","",20,{"inputs":[{"name":"sse2i8x16"},{"name":"self"}],"output":{"name":"self"}}],[8,"Sse2Bool8ix16","","",null,null],[10,"move_mask","","",21,{"inputs":[{"name":"sse2bool8ix16"}],"output":{"name":"u32"}}],[11,"to_f64","simd","",2,{"inputs":[{"name":"f32x4"}],"output":{"name":"f64x2"}}],[11,"move_mask","","",2,{"inputs":[{"name":"f32x4"}],"output":{"name":"u32"}}],[11,"move_mask","","",8,{"inputs":[{"name":"bool32fx4"}],"output":{"name":"u32"}}],[11,"move_mask","simd::x86::sse2","",22,{"inputs":[{"name":"f64x2"}],"output":{"name":"u32"}}],[11,"sqrt","","",22,{"inputs":[{"name":"f64x2"}],"output":{"name":"self"}}],[11,"max","","",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"move_mask","","",23,{"inputs":[{"name":"bool64fx2"}],"output":{"name":"u32"}}],[11,"low_mul","simd","",0,{"inputs":[{"name":"u32x4"},{"name":"self"}],"output":{"name":"u64x2"}}],[11,"packs","","",1,{"inputs":[{"name":"i32x4"},{"name":"self"}],"output":{"name":"i16x8"}}],[11,"adds","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"subs","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"avg","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"mulhi","","",3,{"inputs":[{"name":"u16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"adds","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"subs","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"madd","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"i32x4"}}],[11,"max","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"mulhi","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"self"}}],[11,"packs","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"i8x16"}}],[11,"packus","","",4,{"inputs":[{"name":"i16x8"},{"name":"self"}],"output":{"name":"u8x16"}}],[11,"move_mask","","",5,{"inputs":[{"name":"u8x16"}],"output":{"name":"u32"}}],[11,"adds","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"subs","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"avg","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"max","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"min","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"sad","","",5,{"inputs":[{"name":"u8x16"},{"name":"self"}],"output":{"name":"u64x2"}}],[11,"move_mask","","",6,{"inputs":[{"name":"i8x16"}],"output":{"name":"u32"}}],[11,"adds","","",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"subs","","",6,{"inputs":[{"name":"i8x16"},{"name":"self"}],"output":{"name":"self"}}],[11,"move_mask","","",10,{"inputs":[{"name":"bool8ix16"}],"output":{"name":"u32"}}],[8,"Simd","","Types that are SIMD vectors.",null,null],[16,"Bool","","The corresponding boolean vector type.",24,null],[16,"Elem","","The element that this vector stores.",24,null],[11,"cmp","","",25,{"inputs":[{"name":"bool8i"},{"name":"bool8i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",25,{"inputs":[{"name":"bool8i"},{"name":"bool8i"}],"output":{"name":"option"}}],[11,"lt","","",25,{"inputs":[{"name":"bool8i"},{"name":"bool8i"}],"output":{"name":"bool"}}],[11,"le","","",25,{"inputs":[{"name":"bool8i"},{"name":"bool8i"}],"output":{"name":"bool"}}],[11,"gt","","",25,{"inputs":[{"name":"bool8i"},{"name":"bool8i"}],"output":{"name":"bool"}}],[11,"ge","","",25,{"inputs":[{"name":"bool8i"},{"name":"bool8i"}],"output":{"name":"bool"}}],[11,"eq","","",25,{"inputs":[{"name":"bool8i"},{"name":"bool8i"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"bool8i"},{"name":"bool8i"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"bool8i"}],"output":{"name":"bool8i"}}],[11,"fmt","","",25,{"inputs":[{"name":"bool8i"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",26,{"inputs":[{"name":"bool16i"},{"name":"bool16i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",26,{"inputs":[{"name":"bool16i"},{"name":"bool16i"}],"output":{"name":"option"}}],[11,"lt","","",26,{"inputs":[{"name":"bool16i"},{"name":"bool16i"}],"output":{"name":"bool"}}],[11,"le","","",26,{"inputs":[{"name":"bool16i"},{"name":"bool16i"}],"output":{"name":"bool"}}],[11,"gt","","",26,{"inputs":[{"name":"bool16i"},{"name":"bool16i"}],"output":{"name":"bool"}}],[11,"ge","","",26,{"inputs":[{"name":"bool16i"},{"name":"bool16i"}],"output":{"name":"bool"}}],[11,"eq","","",26,{"inputs":[{"name":"bool16i"},{"name":"bool16i"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"bool16i"},{"name":"bool16i"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"bool16i"}],"output":{"name":"bool16i"}}],[11,"fmt","","",26,{"inputs":[{"name":"bool16i"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",27,{"inputs":[{"name":"bool32i"},{"name":"bool32i"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"bool32i"},{"name":"bool32i"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"bool32i"},{"name":"bool32i"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"bool32i"},{"name":"bool32i"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"bool32i"},{"name":"bool32i"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"bool32i"},{"name":"bool32i"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"bool32i"},{"name":"bool32i"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"bool32i"},{"name":"bool32i"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"bool32i"}],"output":{"name":"bool32i"}}],[11,"fmt","","",27,{"inputs":[{"name":"bool32i"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",28,{"inputs":[{"name":"bool32f"},{"name":"bool32f"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"bool32f"},{"name":"bool32f"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"bool32f"},{"name":"bool32f"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"bool32f"},{"name":"bool32f"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"bool32f"},{"name":"bool32f"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"bool32f"},{"name":"bool32f"}],"output":{"name":"bool"}}],[11,"eq","","",28,{"inputs":[{"name":"bool32f"},{"name":"bool32f"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"bool32f"},{"name":"bool32f"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"bool32f"}],"output":{"name":"bool32f"}}],[11,"fmt","","",28,{"inputs":[{"name":"bool32f"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",25,{"inputs":[{"name":"bool"}],"output":{"name":"bool8i"}}],[11,"from","","",26,{"inputs":[{"name":"bool"}],"output":{"name":"bool16i"}}],[11,"from","","",27,{"inputs":[{"name":"bool"}],"output":{"name":"bool32i"}}],[11,"from","","",28,{"inputs":[{"name":"bool"}],"output":{"name":"bool32f"}}],[11,"fmt","","",0,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"bool32ix4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"bool32fx4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"bool16ix8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"bool8ix16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"i8x16"}],"output":{"name":"self"}}],[11,"clone","","",5,{"inputs":[{"name":"u8x16"}],"output":{"name":"self"}}],[11,"clone","","",10,{"inputs":[{"name":"bool8ix16"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"i16x8"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"u16x8"}],"output":{"name":"self"}}],[11,"clone","","",9,{"inputs":[{"name":"bool16ix8"}],"output":{"name":"self"}}],[11,"clone","","",1,{"inputs":[{"name":"i32x4"}],"output":{"name":"self"}}],[11,"clone","","",0,{"inputs":[{"name":"u32x4"}],"output":{"name":"self"}}],[11,"clone","","",7,{"inputs":[{"name":"bool32ix4"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"f32x4"}],"output":{"name":"self"}}],[11,"clone","","",8,{"inputs":[{"name":"bool32fx4"}],"output":{"name":"self"}}],[11,"fmt","simd::x86::sse2","",29,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"bool64ix2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"bool64fx2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"i64x2"}],"output":{"name":"self"}}],[11,"clone","","",29,{"inputs":[{"name":"u64x2"}],"output":{"name":"self"}}],[11,"clone","","",31,{"inputs":[{"name":"bool64ix2"}],"output":{"name":"self"}}],[11,"clone","","",22,{"inputs":[{"name":"f64x2"}],"output":{"name":"self"}}],[11,"clone","","",23,{"inputs":[{"name":"bool64fx2"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",29,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"u64x2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",29,{"inputs":[{"name":"u64"}],"output":{"name":"u64x2"}}],[11,"eq","","Compare for equality.",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"ne","","Compare for equality.",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"lt","","Compare for equality.",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"le","","Compare for equality.",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"gt","","Compare for equality.",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"ge","","Compare for equality.",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",29,{"inputs":[{"name":"u64x2"},{"name":"u32"}],"output":{"name":"u64"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",29,{"inputs":[{"name":"u64x2"},{"name":"u32"},{"name":"u64"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",29,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",29,null],[11,"new","","Create a new instance.",30,{"inputs":[{"name":"i64"},{"name":"i64"}],"output":{"name":"i64x2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",30,{"inputs":[{"name":"i64"}],"output":{"name":"i64x2"}}],[11,"eq","","Compare for equality.",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"ne","","Compare for equality.",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"lt","","Compare for equality.",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"le","","Compare for equality.",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"gt","","Compare for equality.",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"ge","","Compare for equality.",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"bool64ix2"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",30,{"inputs":[{"name":"i64x2"},{"name":"u32"}],"output":{"name":"i64"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",30,{"inputs":[{"name":"i64x2"},{"name":"u32"},{"name":"i64"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",30,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",30,null],[11,"new","","Create a new instance.",22,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64x2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",22,{"inputs":[{"name":"f64"}],"output":{"name":"f64x2"}}],[11,"eq","","Compare for equality.",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"bool64fx2"}}],[11,"ne","","Compare for equality.",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"bool64fx2"}}],[11,"lt","","Compare for equality.",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"bool64fx2"}}],[11,"le","","Compare for equality.",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"bool64fx2"}}],[11,"gt","","Compare for equality.",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"bool64fx2"}}],[11,"ge","","Compare for equality.",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"bool64fx2"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",22,{"inputs":[{"name":"f64x2"},{"name":"u32"}],"output":{"name":"f64"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",22,{"inputs":[{"name":"f64x2"},{"name":"u32"},{"name":"f64"}],"output":{"name":"self"}}],[11,"load","","Load a new value from the `idx`th position of `array`.",22,null],[11,"store","","Store the elements of `self` to `array`, starting at\nthe `idx`th position.",22,null],[11,"to_repr","","Convert to integer representation.",31,{"inputs":[{"name":"bool64ix2"}],"output":{"name":"i64x2"}}],[11,"from_repr","","Convert from integer representation.",31,{"inputs":[{"name":"i64x2"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",31,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"bool64ix2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",31,{"inputs":[{"name":"bool"}],"output":{"name":"bool64ix2"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",31,{"inputs":[{"name":"bool64ix2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",31,{"inputs":[{"name":"bool64ix2"},{"name":"u32"},{"name":"bool"}],"output":{"name":"self"}}],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",31,{"inputs":[{"name":"bool64ix2"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"all","","Check if every element of `self` is true.",31,{"inputs":[{"name":"bool64ix2"}],"output":{"name":"bool"}}],[11,"any","","Check if any element of `self` is true.",31,{"inputs":[{"name":"bool64ix2"}],"output":{"name":"bool"}}],[11,"to_f","","Convert `self` to a boolean vector for interacting with floating point vectors.",31,{"inputs":[{"name":"bool64ix2"}],"output":{"name":"bool64fx2"}}],[11,"not","","",31,{"inputs":[{"name":"bool64ix2"}],"output":{"name":"self"}}],[11,"to_repr","","Convert to integer representation.",23,{"inputs":[{"name":"bool64fx2"}],"output":{"name":"i64x2"}}],[11,"from_repr","","Convert from integer representation.",23,{"inputs":[{"name":"i64x2"}],"output":{"name":"self"}}],[11,"new","","Create a new instance.",23,{"inputs":[{"name":"bool"},{"name":"bool"}],"output":{"name":"bool64fx2"}}],[11,"splat","","Create a new instance where every lane has value `x`.",23,{"inputs":[{"name":"bool"}],"output":{"name":"bool64fx2"}}],[11,"extract","","Extract the value of the `idx`th lane of `self`.",23,{"inputs":[{"name":"bool64fx2"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"replace","","Return a new vector where the `idx`th lane is replaced\nby `elem`.",23,{"inputs":[{"name":"bool64fx2"},{"name":"u32"},{"name":"bool"}],"output":{"name":"self"}}],[11,"select","","Select between elements of `then` and `else_`, based on\nthe corresponding element of `self`.",23,{"inputs":[{"name":"bool64fx2"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"all","","Check if every element of `self` is true.",23,{"inputs":[{"name":"bool64fx2"}],"output":{"name":"bool"}}],[11,"any","","Check if any element of `self` is true.",23,{"inputs":[{"name":"bool64fx2"}],"output":{"name":"bool"}}],[11,"to_i","","Convert `self` to a boolean vector for interacting with integer vectors.",23,{"inputs":[{"name":"bool64fx2"}],"output":{"name":"bool64ix2"}}],[11,"not","","",23,{"inputs":[{"name":"bool64fx2"}],"output":{"name":"self"}}],[11,"to_i64","","Convert each lane to a signed integer.",29,{"inputs":[{"name":"u64x2"}],"output":{"name":"i64x2"}}],[11,"to_f64","","Convert each lane to a 64-bit float.",29,{"inputs":[{"name":"u64x2"}],"output":{"name":"f64x2"}}],[11,"to_u64","","Convert each lane to an unsigned integer.",30,{"inputs":[{"name":"i64x2"}],"output":{"name":"u64x2"}}],[11,"to_f64","","Convert each lane to a 64-bit float.",30,{"inputs":[{"name":"i64x2"}],"output":{"name":"f64x2"}}],[11,"to_i64","","Convert each lane to a signed integer.",22,{"inputs":[{"name":"f64x2"}],"output":{"name":"i64x2"}}],[11,"to_u64","","Convert each lane to an unsigned integer.",22,{"inputs":[{"name":"f64x2"}],"output":{"name":"u64x2"}}],[11,"to_f32","","Convert each lane to a 32-bit float.",22,{"inputs":[{"name":"f64x2"}],"output":{"name":"f32x4"}}],[11,"neg","","",30,{"inputs":[{"name":"i64x2"}],"output":{"name":"self"}}],[11,"neg","","",22,{"inputs":[{"name":"f64x2"}],"output":{"name":"self"}}],[11,"not","","",30,{"inputs":[{"name":"i64x2"}],"output":{"name":"self"}}],[11,"not","","",29,{"inputs":[{"name":"u64x2"}],"output":{"name":"self"}}],[11,"add","","",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"add","","",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub","","",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"mul","","",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"div","","",22,{"inputs":[{"name":"f64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",31,{"inputs":[{"name":"bool64ix2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitand","","",23,{"inputs":[{"name":"bool64fx2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",31,{"inputs":[{"name":"bool64ix2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitor","","",23,{"inputs":[{"name":"bool64fx2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",30,{"inputs":[{"name":"i64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",29,{"inputs":[{"name":"u64x2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",31,{"inputs":[{"name":"bool64ix2"},{"name":"self"}],"output":{"name":"self"}}],[11,"bitxor","","",23,{"inputs":[{"name":"bool64fx2"},{"name":"self"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",30,{"inputs":[{"name":"i64x2"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","","",30,{"inputs":[{"name":"i64x2"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"u8"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"u16"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"u32"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"u64"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"usize"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"i8"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"i16"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"i32"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"i64"}],"output":{"name":"self"}}],[11,"shl","","",29,{"inputs":[{"name":"u64x2"},{"name":"isize"}],"output":{"name":"self"}}],[11,"shr","","",29,{"inputs":[{"name":"u64x2"},{"name":"isize"}],"output":{"name":"self"}}]],"paths":[[3,"u32x4"],[3,"i32x4"],[3,"f32x4"],[3,"u16x8"],[3,"i16x8"],[3,"u8x16"],[3,"i8x16"],[3,"bool32ix4"],[3,"bool32fx4"],[3,"bool16ix8"],[3,"bool8ix16"],[8,"Sse2F32x4"],[8,"Sse2Bool32fx4"],[8,"Sse2F64x2"],[8,"Sse2Bool64fx2"],[8,"Sse2U32x4"],[8,"Sse2I32x4"],[8,"Sse2U16x8"],[8,"Sse2I16x8"],[8,"Sse2U8x16"],[8,"Sse2I8x16"],[8,"Sse2Bool8ix16"],[3,"f64x2"],[3,"bool64fx2"],[8,"Simd"],[3,"bool8i"],[3,"bool16i"],[3,"bool32i"],[3,"bool32f"],[3,"u64x2"],[3,"i64x2"],[3,"bool64ix2"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"stat","libc","",null,null],[12,"st_dev","","",0,null],[12,"st_ino","","",0,null],[12,"st_mode","","",0,null],[12,"st_nlink","","",0,null],[12,"st_uid","","",0,null],[12,"st_gid","","",0,null],[12,"st_rdev","","",0,null],[12,"st_size","","",0,null],[12,"st_atime","","",0,null],[12,"st_mtime","","",0,null],[12,"st_ctime","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"timezone","","",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"chmod","","",null,null],[5,"wchmod","","",null,null],[5,"mkdir","","",null,null],[5,"wrmdir","","",null,null],[5,"fstat","","",null,null],[5,"stat","","",null,null],[5,"wstat","","",null,null],[5,"wutime","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"wopen","","",null,null],[5,"creat","","",null,null],[5,"access","","",null,null],[5,"chdir","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"execvpe","","",null,null],[5,"getcwd","","",null,null],[5,"getpid","","",null,null],[5,"isatty","","",null,null],[5,"lseek","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"unlink","","",null,null],[5,"write","","",null,null],[5,"commit","","",null,null],[5,"get_osfhandle","","",null,null],[5,"open_osfhandle","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",4,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",4,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",4,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",4,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",4,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",4,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",4,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",4,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",4,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",4,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",4,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",4,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"default","core::num","",5,{"inputs":[],"output":{"name":"wrapping"}}],[11,"fmt","","",5,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"shl","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl_assign","","",5,null],[11,"shr","","",5,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"add","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add_assign","","",5,null],[11,"sub","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub_assign","","",5,null],[11,"mul","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul_assign","","",5,null],[11,"div","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div_assign","","",5,null],[11,"rem","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"rem_assign","","",5,null],[11,"not","","",5,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor_assign","","",5,null],[11,"bitor","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor_assign","","",5,null],[11,"bitand","","",5,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand_assign","","",5,null],[11,"fmt","","",6,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",7,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",8,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",9,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",9,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",9,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",9,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",10,null],[11,"get","","Dereferences the content.",10,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",10,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Shared`.",11,null],[11,"clone","","",11,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",11,null],[11,"fmt","","",11,{"inputs":[{"name":"shared"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",12,null],[11,"eq","","",12,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",12,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"default","","",12,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",13,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",13,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",14,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",15,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",16,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",17,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",17,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",18,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",18,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",18,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",18,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",18,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",18,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",18,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",19,null],[11,"fmt","","",19,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",19,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",20,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",21,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"default","","",23,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"clone","","",24,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",20,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",20,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",20,null],[11,"swap","","Stores a value into the bool, returning the old value.",20,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",20,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",20,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",20,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",20,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",20,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",20,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",20,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",21,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",21,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",21,null],[11,"swap","","Stores a value into the isize, returning the old value.",21,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",21,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange","","Stores a value into the `isize` if the current value is the same as the `current` value.",21,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_exchange_weak","","Stores a value into the `isize if the current value is the same as the `current` value.",21,null],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",21,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",21,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",21,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",21,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",21,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",22,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",22,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",22,null],[11,"swap","","Stores a value into the usize, returning the old value.",22,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",22,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange","","Stores a value into the `usize` if the current value is the same as the `current` value.",22,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_exchange_weak","","Stores a value into the `usize` if the current value is the same as the `current` value.",22,null],[11,"fetch_add","","Add to the current usize, returning the previous value.",22,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",22,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",22,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",22,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",22,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",23,null],[11,"load","","Loads a value from the pointer.",23,null],[11,"store","","Stores a value into the pointer.",23,null],[11,"swap","","Stores a value into the pointer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",23,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",23,null],[11,"fmt","","",22,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",21,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",25,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",25,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",25,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",25,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",25,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",25,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",27,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",27,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",27,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",27,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",27,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",27,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",27,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",27,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",27,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",28,null],[11,"clone","","",28,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",29,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",29,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",29,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",29,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",30,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",30,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",31,null],[11,"deref","","",30,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",30,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",32,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",32,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",32,null],[11,"clone","core::char","",33,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",34,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",33,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"clone","","",35,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",36,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",35,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"count","","",35,{"inputs":[{"name":"escapedefault"}],"output":{"name":"usize"}}],[11,"nth","","",35,{"inputs":[{"name":"escapedefault"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",35,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",37,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",37,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",37,null],[11,"next_back","","",37,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",38,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",38,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",38,null],[11,"next_back","","",38,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",39,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",39,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",39,null],[11,"clone","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",41,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",40,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",40,null],[11,"next_back","","",40,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",42,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",42,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",42,null],[11,"next_back","","",42,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",43,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",43,null],[11,"next_back","","",43,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",44,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",44,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",44,null],[11,"next_back","","",44,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",45,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",45,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",45,null],[11,"next_back","","",45,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",46,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",46,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",46,null],[11,"nth","","",46,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",46,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",46,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",47,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",47,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",47,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",47,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",47,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",47,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",47,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks if the iterator has finished iterating.",47,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",48,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",48,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",48,null],[11,"clone","","",49,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",49,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",49,null],[11,"clone","","",50,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",50,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",50,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",50,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",50,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",50,null],[11,"clone","","",51,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",51,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",51,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",51,null],[11,"clone","","",52,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",52,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",52,null],[11,"clone","","",53,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",53,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",53,null],[11,"next_back","","",53,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",54,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",54,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",54,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",54,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",54,null],[11,"next_back","","",54,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",55,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",55,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",55,null],[11,"next_back","","",55,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",56,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",15,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",14,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",56,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"clone","","",57,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",57,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",56,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next","core::ops","",14,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",14,null],[11,"next_back","","",14,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",15,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",58,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",58,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"next_back","","",58,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",59,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",59,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",59,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",59,{"inputs":[],"output":{"name":"empty"}}],[11,"clone","","",60,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",60,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",60,null],[11,"next_back","","",60,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",60,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",4,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",61,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",61,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",4,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",65,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",66,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",67,null],[11,"fmt","","",67,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",67,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",67,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",67,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",67,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",67,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",67,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",67,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",67,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",67,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",67,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",67,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",67,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",67,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",67,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",67,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",67,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",67,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",67,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",67,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"next_back","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",68,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"next_back","","",69,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"next_back","","",70,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",67,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",71,null],[11,"next","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"count","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",71,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",71,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",72,null],[11,"next","","",72,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"count","","",72,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",72,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",72,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",72,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",73,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",73,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",74,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",74,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next","","",76,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next","","",77,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next","","",78,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next","","",79,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"clone","","",80,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",80,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"count","","",80,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",80,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",80,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",80,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",81,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"count","","",81,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",81,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",81,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",81,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",82,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"count","","",82,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",82,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",82,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",82,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",83,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",83,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",83,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",83,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",84,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",85,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",84,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",84,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",84,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",86,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",86,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",86,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",86,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",86,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",86,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",86,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",86,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",87,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",87,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",87,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",87,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",87,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",87,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",87,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",88,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",88,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",88,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",88,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",88,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",88,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",88,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",88,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",89,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",89,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",90,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",91,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",89,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",89,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",89,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",89,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",89,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",92,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",93,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",93,null],[11,"matching","","",93,null],[11,"use_early_reject","","",94,{"inputs":[],"output":{"name":"bool"}}],[11,"rejecting","","",94,null],[11,"matching","","",94,null],[11,"eq","core::str","",95,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",95,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",95,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",95,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",96,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",96,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",96,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",96,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",96,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",97,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",97,null],[11,"next_back","","",97,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",97,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",98,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",98,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",98,null],[11,"next_back","","",98,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",98,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",99,null],[11,"count","","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",99,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",99,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",100,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",101,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",101,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",102,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",101,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",102,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",103,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",104,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",104,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",103,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",104,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",105,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",106,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",106,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",107,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",107,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",108,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",109,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",109,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",110,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",110,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",109,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",110,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",111,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",112,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",112,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",113,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",113,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",112,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",113,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",114,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",114,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",114,null],[11,"next_back","","",114,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",115,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",116,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",116,null],[11,"call_mut","","",116,null],[11,"call_once","","",116,null],[11,"next","","",115,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",115,null],[11,"next_back","","",115,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",118,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",118,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",118,null],[11,"finish","","",118,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",118,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",118,{"inputs":[],"output":{"name":"siphasher"}}],[11,"build_hasher","core::hash","",119,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"h"}}],[11,"clone","","",119,{"inputs":[{"name":"buildhasherdefault"}],"output":{"name":"buildhasherdefault"}}],[11,"default","","",119,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"eq","core::fmt::num","",120,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",120,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",120,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",121,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",121,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",121,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",122,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",122,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",122,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",123,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",123,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",123,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",124,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",125,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",125,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",126,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",127,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",128,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",128,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",129,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",129,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",129,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",130,null],[11,"entry","","Adds a new entry to the set output.",131,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",131,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",131,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",132,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",132,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",132,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",133,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",133,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",133,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"fmt","core::fmt","",134,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",134,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",135,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",136,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",137,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",137,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",138,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",138,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",138,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",138,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",138,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",138,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",138,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",138,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",138,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"sign_plus","","Determines if the `+` flag was specified.",138,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_minus","","Determines if the `-` flag was specified.",138,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"alternate","","Determines if the `#` flag was specified.",138,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",138,{"inputs":[{"name":"formatter"}],"output":{"name":"bool"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",138,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",138,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",138,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",138,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",138,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",138,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",138,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",138,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",134,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",12,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",25,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",30,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",139,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",139,null],[11,"clone","libc","",0,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",1,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"c_char","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"wchar_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"off_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"time64_t","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_TEXT","","",null,null],[17,"O_BINARY","","",null,null],[17,"O_NOINHERIT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null]],"paths":[[3,"stat"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[4,"Option"],[3,"Wrapping"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[0,"mem","","Memory management for concurrent data structures",null,null],[3,"CachePadded","crossbeam::mem","Pad `T` to the length of a cacheline.",null,null],[0,"epoch","","Epoch-based memory management",null,null],[3,"Owned","crossbeam::mem::epoch","Like `Box&lt;T&gt;`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&amp;&#39;a T`: a shared reference valid for lifetime `&#39;a`.",null,null],[3,"Atomic","","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"new","","Move `t` to a new heap allocation.",0,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"deref","","",0,{"inputs":[{"name":"owned"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"owned"}],"output":{"name":"t"}}],[11,"eq","","",1,{"inputs":[{"name":"shared"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"shared"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"shared"}],"output":{"name":"shared"}}],[11,"deref","","",1,{"inputs":[{"name":"shared"}],"output":{"name":"t"}}],[11,"null","","Create a new, null atomic pointer.",2,{"inputs":[],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding\na shared reference to the pointer that was stored.",2,{"inputs":[{"name":"atomic"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the\ngiven memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the\ngiven memory ordering, immediatley acquiring a new `Shared` reference to\nthe previously-owned pointer if successful.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with\nthe given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",2,{"inputs":[{"name":"atomic"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data\nstructure and should be collected when sufficient epochs have passed.",3,{"inputs":[{"name":"guard"},{"name":"shared"}],"output":null}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",3,{"inputs":[{"name":"guard"}],"output":null}],[11,"drop","","",3,{"inputs":[{"name":"guard"}],"output":null}],[11,"zeroed","crossbeam::mem","A const fn equivalent to mem::zeroed().",4,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",4,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",4,{"inputs":[{"name":"cachepadded"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"cachepadded"}],"output":{"name":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber&#39;s lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates &quot;segments&quot; (arrays of nodes)\nfor efficiency.",null,null],[11,"new","","",5,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",5,{"inputs":[{"name":"atomicoption"},{"name":"box"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"swap","","",5,{"inputs":[{"name":"atomicoption"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",5,{"inputs":[{"name":"atomicoption"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"new","","Create a new, empty queue.",6,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue.",6,{"inputs":[{"name":"msqueue"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to dequeue from the front.",6,{"inputs":[{"name":"msqueue"}],"output":{"name":"option"}}],[11,"new","","Crate a new, empty stack.",7,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",7,{"inputs":[{"name":"treiberstack"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to pop the top element of the stack.",7,{"inputs":[{"name":"treiberstack"}],"output":{"name":"option"}}],[11,"new","","Create a new, empty queue.",8,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",8,{"inputs":[{"name":"segqueue"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to dequeue from the front.",8,{"inputs":[{"name":"segqueue"}],"output":{"name":"option"}}],[11,"defer","crossbeam","Schedule code to be executed when exiting the scope.",9,{"inputs":[{"name":"scope"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",9,{"inputs":[{"name":"scope"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"join","","Join the scoped thread, returning the result it produced.",10,{"inputs":[{"name":"scopedjoinhandle"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",10,{"inputs":[{"name":"scopedjoinhandle"}],"output":{"name":"thread"}}],[11,"drop","","",9,{"inputs":[{"name":"scope"}],"output":null}]],"paths":[[3,"Owned"],[3,"Shared"],[3,"Atomic"],[3,"Guard"],[3,"CachePadded"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[3,"Scope"],[3,"ScopedJoinHandle"]]};
initSearch(searchIndex);
