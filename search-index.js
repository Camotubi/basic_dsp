var searchIndex = {};
searchIndex["arrayvec"] = {"doc":"arrayvec provides the types `ArrayVec` and `ArrayString`:  array-backed vector and string types, which store their contents inline.","items":[[8,"RangeArgument","arrayvec","IndexRange is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[3,"ArrayString","","A string with a fixed capacity.",null,null],[3,"ArrayVec","","A vector with a fixed capacity.",null,null],[3,"IntoIter","","By-value iterator for `ArrayVec`.",null,null],[3,"Drain","","A draining iterator for `ArrayVec`.",null,null],[3,"CapacityError","","Error value indicating insufficient capacity",null,null],[11,"new","","Create a new empty `ArrayString`.",1,{"inputs":[],"output":{"name":"arraystring"}}],[11,"from","","Create a new `ArrayString` from a `str`.",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_byte_string","","Create a new `ArrayString` from a byte string literal.",1,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"capacity","","Return the capacity of the `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayString` is completely filled.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Adds the given char to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"push_str","","Adds the given string slice to the end of the string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clear","","Make the string empty.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"set_len","","Set the strings's length.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"as_str","","Return a string slice of the whole `ArrayString`.",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"deref_mut","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"borrow","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"as_ref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_char","","",1,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_str","","",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"arraystring"}}],[11,"clone_from","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[8,"Array","","Trait for fixed size arrays.",null,null],[16,"Item","","The array's element type",2,null],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Create a new empty `ArrayVec`.",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"len","","Return the number of elements in the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"capacity","","Return the capacity of the `ArrayVec`.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_full","","Return if the `ArrayVec` is completely filled.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push `element` to the end of the vector.",3,null],[11,"insert","","Insert `element` in position `index`.",3,null],[11,"pop","","Remove the last element in the vector.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"swap_remove","","Remove the element at `index` and swap the last element into its place.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"remove","","Remove the element at `index` and shift down the following elements.",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"clear","","Remove all elements in the vector.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"retain","","Retains only the elements specified by the predicate.",3,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"set_len","","Set the vector's length without dropping or moving out elements",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drain","","Create a draining iterator that removes the specified range in the vector and yields the removed items from start to end. The element range is removed even if the iterator is not consumed until the end.",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"drain"}}],[11,"into_inner","","Return the inner fixed size array, if it is full to its capacity.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"dispose","","Dispose of `self` without the overwriting that is needed in Drop.",3,{"inputs":[{"name":"self"}],"output":null}],[11,"as_slice","","Return a slice containing all elements of the vector.",3,null],[11,"as_mut_slice","","Return a mutable slice containing all elements of the vector.",3,null],[11,"deref","","",3,null],[11,"deref_mut","","",3,null],[11,"from","","",3,{"inputs":[{"name":"a"}],"output":{"name":"self"}}],[11,"into_iter","","",3,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"drop","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"hash","","",3,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",3,null],[11,"borrow","","",3,null],[11,"borrow_mut","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"arrayvec"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"arrayvec"}],"output":{"name":"ordering"}}],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"ordering"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"self"},{"name":"capacityerror"}],"output":{"name":"bool"}}],[11,"element","","Extract the overflowing element",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"simplify","","Convert into a `CapacityError` that does not carry an element.",6,{"inputs":[{"name":"self"}],"output":{"name":"capacityerror"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[8,"RangeArgument"],[3,"ArrayString"],[8,"Array"],[3,"ArrayVec"],[3,"IntoIter"],[3,"Drain"],[3,"CapacityError"]]};
searchIndex["basic_dsp"] = {"doc":"","items":[[0,"matrix","basic_dsp","",null,null]],"paths":[]};
searchIndex["basic_dsp_matrix"] = {"doc":"In this lib a matrix is simply a collection of vectors. The idea is that the matrix types can be used to reduce the size of a large matrix and that the return types are basic enough so that other specialized matrix libs can do the rest of the work, e.g. inverting the resulting matrix.","items":[[3,"MatrixMxN","basic_dsp_matrix","A matrix which can hold 1 to N vectors.",null,null],[3,"Matrix2xN","","A matrix which can hold exactly 2 vectors.",null,null],[3,"Matrix3xN","","A matrix which can hold exactly 3 vectors.",null,null],[3,"Matrix4xN","","A matrix which can hold exactly 4 vectors.",null,null],[11,"domain","","",0,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"is_complex","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"resize","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"voidresult"}}],[11,"delta","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_delta","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"row_len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"row_points","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col_len","","",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rows","","",0,null],[11,"rows_mut","","",0,null],[11,"domain","","",1,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"is_complex","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"resize","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"voidresult"}}],[11,"delta","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_delta","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"row_len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"row_points","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col_len","","",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rows","","",1,null],[11,"rows_mut","","",1,null],[11,"domain","","",2,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"is_complex","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"resize","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"voidresult"}}],[11,"delta","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_delta","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"row_len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"row_points","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col_len","","",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rows","","",2,null],[11,"rows_mut","","",2,null],[11,"domain","","",3,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"is_complex","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"resize","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"voidresult"}}],[11,"delta","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_delta","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"row_len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"row_points","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"col_len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"rows","","",3,null],[11,"rows_mut","","",3,null],[11,"get","","",0,null],[11,"get","","",1,null],[11,"get","","",2,null],[11,"get","","",3,null],[11,"scale","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"offset","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"scale","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"offset","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"add_smaller","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub_smaller","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div_smaller","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul_smaller","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"add_smaller","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"sub_smaller","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"div_smaller","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"mul_smaller","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"reverse","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves_b","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"diff","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"diff_with_start","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"cum_sum","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"sin","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"cos","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"tan","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"asin","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"acos","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"atan","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"sinh","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"cosh","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"tanh","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"asinh","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"acosh","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"atanh","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"sqrt","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"square","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"root","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"exp","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"log","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"map_inplace","","",0,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"map_inplace","","",0,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"scale","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"offset","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"scale","","",1,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"offset","","",1,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"add","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"div","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"add_smaller","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub_smaller","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div_smaller","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul_smaller","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"add_smaller","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"sub_smaller","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"div_smaller","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"mul_smaller","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"reverse","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves_b","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"diff","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"diff_with_start","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"cum_sum","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"sin","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"cos","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"tan","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"asin","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"acos","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"atan","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"sinh","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"cosh","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"tanh","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"asinh","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"acosh","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"atanh","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"sqrt","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"square","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"root","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"exp","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"log","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"map_inplace","","",1,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"map_inplace","","",1,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"scale","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"offset","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"scale","","",2,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"offset","","",2,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"add_smaller","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub_smaller","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div_smaller","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul_smaller","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"add_smaller","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"sub_smaller","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"div_smaller","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"mul_smaller","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"reverse","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves_b","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"diff","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"diff_with_start","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"cum_sum","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"sin","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"cos","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"tan","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"asin","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"acos","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"atan","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"sinh","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"cosh","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"tanh","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"asinh","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"acosh","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"atanh","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"sqrt","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"square","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"root","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"exp","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"log","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"map_inplace","","",2,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"map_inplace","","",2,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"scale","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"offset","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"scale","","",3,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"offset","","",3,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"add_smaller","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub_smaller","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div_smaller","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul_smaller","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"add_smaller","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"sub_smaller","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"div_smaller","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"mul_smaller","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"voidresult"}}],[11,"reverse","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves_b","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"diff","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"diff_with_start","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"cum_sum","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"sin","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"cos","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"tan","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"asin","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"acos","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"atan","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"sinh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"cosh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"tanh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"asinh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"acosh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"atanh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"sqrt","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"square","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"root","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"exp","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"log","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"map_inplace","","",3,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"map_inplace","","",3,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"dot_product","","",0,{"inputs":[{"name":"self"},{"name":"matrixmxn"}],"output":{"name":"scalarresult"}}],[11,"dot_product","","",1,{"inputs":[{"name":"self"},{"name":"matrix2xn"}],"output":{"name":"scalarresult"}}],[11,"dot_product","","",2,{"inputs":[{"name":"self"},{"name":"matrix3xn"}],"output":{"name":"scalarresult"}}],[11,"dot_product","","",3,{"inputs":[{"name":"self"},{"name":"matrix4xn"}],"output":{"name":"scalarresult"}}],[11,"dot_product","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"scalarresult"}}],[11,"dot_product","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"scalarresult"}}],[11,"dot_product","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"scalarresult"}}],[11,"dot_product","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",0,{"inputs":[{"name":"self"},{"name":"matrixmxn"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",1,{"inputs":[{"name":"self"},{"name":"matrix2xn"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",2,{"inputs":[{"name":"self"},{"name":"matrix3xn"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",3,{"inputs":[{"name":"self"},{"name":"matrix4xn"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",1,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"scalarresult"}}],[11,"map_aggregate","","",0,{"inputs":[{"name":"self"},{"name":"a"},{"name":"fmap"},{"name":"faggr"}],"output":{"name":"scalarresult"}}],[11,"map_aggregate","","",1,{"inputs":[{"name":"self"},{"name":"a"},{"name":"fmap"},{"name":"faggr"}],"output":{"name":"scalarresult"}}],[11,"map_aggregate","","",2,{"inputs":[{"name":"self"},{"name":"a"},{"name":"fmap"},{"name":"faggr"}],"output":{"name":"scalarresult"}}],[11,"map_aggregate","","",3,{"inputs":[{"name":"self"},{"name":"a"},{"name":"fmap"},{"name":"faggr"}],"output":{"name":"scalarresult"}}],[11,"statistics","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"statistics_splitted","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_split","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics","","",1,null],[11,"statistics_splitted","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_split","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics","","",2,null],[11,"statistics_splitted","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_split","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics","","",3,null],[11,"statistics_splitted","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_split","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"sum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sum_sq","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sum","","",1,null],[11,"sum_sq","","",1,null],[11,"sum","","",1,null],[11,"sum_sq","","",1,null],[11,"sum","","",1,null],[11,"sum_sq","","",1,null],[11,"statistics_prec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"statistics_splitted_prec","","",0,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_prec","","",1,null],[11,"statistics_splitted_prec","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_prec","","",2,null],[11,"statistics_splitted_prec","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_prec","","",3,null],[11,"statistics_splitted_prec","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"sum_prec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sum_sq_prec","","",0,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"sum_prec","","",1,null],[11,"sum_sq_prec","","",1,null],[11,"sum_prec","","",2,null],[11,"sum_sq_prec","","",2,null],[11,"sum_prec","","",3,null],[11,"sum_sq_prec","","",3,null],[11,"rededicate_from_force","","",0,{"inputs":[{"name":"matrixmxn"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",0,{"inputs":[{"name":"matrixmxn"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",1,{"inputs":[{"name":"matrix2xn"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",1,{"inputs":[{"name":"matrix2xn"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",2,{"inputs":[{"name":"matrix3xn"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",2,{"inputs":[{"name":"matrix3xn"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",3,{"inputs":[{"name":"matrix4xn"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",3,{"inputs":[{"name":"matrix4xn"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"magnitude","","",0,null],[11,"magnitude_squared","","",0,null],[11,"to_real","","",0,null],[11,"to_imag","","",0,null],[11,"phase","","",0,null],[11,"magnitude_b","","",0,null],[11,"magnitude_squared_b","","",0,null],[11,"to_real_b","","",0,null],[11,"to_imag_b","","",0,null],[11,"phase_b","","",0,null],[11,"get_real","","",0,null],[11,"get_imag","","",0,null],[11,"get_magnitude","","",0,null],[11,"get_magnitude_squared","","",0,null],[11,"get_phase","","",0,null],[11,"get_real_imag","","",0,null],[11,"get_mag_phase","","",0,null],[11,"set_real_imag","","",0,null],[11,"set_mag_phase","","",0,null],[11,"multiply_complex_exponential","","",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"conj","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"magnitude","","",1,null],[11,"magnitude_squared","","",1,null],[11,"to_real","","",1,null],[11,"to_imag","","",1,null],[11,"phase","","",1,null],[11,"magnitude_b","","",1,null],[11,"magnitude_squared_b","","",1,null],[11,"to_real_b","","",1,null],[11,"to_imag_b","","",1,null],[11,"phase_b","","",1,null],[11,"get_real","","",1,null],[11,"get_imag","","",1,null],[11,"get_magnitude","","",1,null],[11,"get_magnitude_squared","","",1,null],[11,"get_phase","","",1,null],[11,"get_real_imag","","",1,null],[11,"get_mag_phase","","",1,null],[11,"set_real_imag","","",1,null],[11,"set_mag_phase","","",1,null],[11,"multiply_complex_exponential","","",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"conj","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"magnitude","","",2,null],[11,"magnitude_squared","","",2,null],[11,"to_real","","",2,null],[11,"to_imag","","",2,null],[11,"phase","","",2,null],[11,"magnitude_b","","",2,null],[11,"magnitude_squared_b","","",2,null],[11,"to_real_b","","",2,null],[11,"to_imag_b","","",2,null],[11,"phase_b","","",2,null],[11,"get_real","","",2,null],[11,"get_imag","","",2,null],[11,"get_magnitude","","",2,null],[11,"get_magnitude_squared","","",2,null],[11,"get_phase","","",2,null],[11,"get_real_imag","","",2,null],[11,"get_mag_phase","","",2,null],[11,"set_real_imag","","",2,null],[11,"set_mag_phase","","",2,null],[11,"multiply_complex_exponential","","",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"conj","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"magnitude","","",3,null],[11,"magnitude_squared","","",3,null],[11,"to_real","","",3,null],[11,"to_imag","","",3,null],[11,"phase","","",3,null],[11,"magnitude_b","","",3,null],[11,"magnitude_squared_b","","",3,null],[11,"to_real_b","","",3,null],[11,"to_imag_b","","",3,null],[11,"phase_b","","",3,null],[11,"get_real","","",3,null],[11,"get_imag","","",3,null],[11,"get_magnitude","","",3,null],[11,"get_magnitude_squared","","",3,null],[11,"get_phase","","",3,null],[11,"get_real_imag","","",3,null],[11,"get_mag_phase","","",3,null],[11,"set_real_imag","","",3,null],[11,"set_mag_phase","","",3,null],[11,"multiply_complex_exponential","","",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"conj","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"to_complex","","",0,{"inputs":[{"name":"self"}],"output":{"name":"transres"}}],[11,"to_complex_b","","",0,null],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"wrap","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"unwrap","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln_approx","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"exp_approx","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"sin_approx","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"cos_approx","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"log_approx","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf_approx","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf_approx","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"to_complex","","",1,{"inputs":[{"name":"self"}],"output":{"name":"transres"}}],[11,"to_complex_b","","",1,null],[11,"abs","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"wrap","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"unwrap","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln_approx","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"exp_approx","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"sin_approx","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"cos_approx","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"log_approx","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf_approx","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf_approx","","",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"to_complex","","",2,{"inputs":[{"name":"self"}],"output":{"name":"transres"}}],[11,"to_complex_b","","",2,null],[11,"abs","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"wrap","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"unwrap","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln_approx","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"exp_approx","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"sin_approx","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"cos_approx","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"log_approx","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf_approx","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf_approx","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"to_complex","","",3,{"inputs":[{"name":"self"}],"output":{"name":"transres"}}],[11,"to_complex_b","","",3,null],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"wrap","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"unwrap","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln_approx","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"exp_approx","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"sin_approx","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"cos_approx","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"log_approx","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf_approx","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf_approx","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"plain_fft","","",0,null],[11,"fft","","",0,null],[11,"windowed_fft","","",0,null],[11,"plain_sfft","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sfft","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sfft","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"plain_ifft","","",0,null],[11,"ifft","","",0,null],[11,"windowed_ifft","","",0,null],[11,"plain_sifft","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sifft","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sifft","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"mirror","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"fft_shift","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"ifft_shift","","",0,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"apply_window","","",0,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"unapply_window","","",0,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"prepare_argument","","",0,null],[11,"prepare_argument_padded","","",0,null],[11,"correlate","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"matrixmxn"}],"output":{"name":"voidresult"}}],[11,"interpolatef","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"interpolatei","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"voidresult"}}],[11,"interpolate","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"option"},{"name":"usize"},{"name":"t"}],"output":{"name":"voidresult"}}],[11,"interpft","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"usize"}],"output":null}],[11,"decimatei","","",0,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"interpolate_hermite","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"interpolate_lin","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"convolve","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"convolve","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"compleximpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"multiply_frequency_response","","",0,{"inputs":[{"name":"self"},{"name":"realfrequencyresponse"},{"name":"t"}],"output":null}],[11,"multiply_frequency_response","","",0,{"inputs":[{"name":"self"},{"name":"complexfrequencyresponse"},{"name":"t"}],"output":null}],[11,"convolve_vector","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"dspvec"}],"output":{"name":"voidresult"}}],[11,"plain_fft","","",1,null],[11,"fft","","",1,null],[11,"windowed_fft","","",1,null],[11,"plain_sfft","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sfft","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sfft","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"plain_ifft","","",1,null],[11,"ifft","","",1,null],[11,"windowed_ifft","","",1,null],[11,"plain_sifft","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sifft","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sifft","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"mirror","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"fft_shift","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"ifft_shift","","",1,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"apply_window","","",1,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"unapply_window","","",1,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"prepare_argument","","",1,null],[11,"prepare_argument_padded","","",1,null],[11,"correlate","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"matrix2xn"}],"output":{"name":"voidresult"}}],[11,"interpolatef","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"interpolatei","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"voidresult"}}],[11,"interpolate","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"option"},{"name":"usize"},{"name":"t"}],"output":{"name":"voidresult"}}],[11,"interpft","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"usize"}],"output":null}],[11,"decimatei","","",1,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"interpolate_hermite","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"interpolate_lin","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"convolve","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"convolve","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"compleximpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"multiply_frequency_response","","",1,{"inputs":[{"name":"self"},{"name":"realfrequencyresponse"},{"name":"t"}],"output":null}],[11,"multiply_frequency_response","","",1,{"inputs":[{"name":"self"},{"name":"complexfrequencyresponse"},{"name":"t"}],"output":null}],[11,"convolve_vector","","",1,{"inputs":[{"name":"self"},{"name":"b"},{"name":"dspvec"}],"output":{"name":"voidresult"}}],[11,"plain_fft","","",2,null],[11,"fft","","",2,null],[11,"windowed_fft","","",2,null],[11,"plain_sfft","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sfft","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sfft","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"plain_ifft","","",2,null],[11,"ifft","","",2,null],[11,"windowed_ifft","","",2,null],[11,"plain_sifft","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sifft","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sifft","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"mirror","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"fft_shift","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"ifft_shift","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"apply_window","","",2,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"unapply_window","","",2,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"prepare_argument","","",2,null],[11,"prepare_argument_padded","","",2,null],[11,"correlate","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"matrix3xn"}],"output":{"name":"voidresult"}}],[11,"interpolatef","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"interpolatei","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"voidresult"}}],[11,"interpolate","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"option"},{"name":"usize"},{"name":"t"}],"output":{"name":"voidresult"}}],[11,"interpft","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"usize"}],"output":null}],[11,"decimatei","","",2,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"interpolate_hermite","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"interpolate_lin","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"convolve","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"convolve","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"compleximpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"multiply_frequency_response","","",2,{"inputs":[{"name":"self"},{"name":"realfrequencyresponse"},{"name":"t"}],"output":null}],[11,"multiply_frequency_response","","",2,{"inputs":[{"name":"self"},{"name":"complexfrequencyresponse"},{"name":"t"}],"output":null}],[11,"convolve_vector","","",2,{"inputs":[{"name":"self"},{"name":"b"},{"name":"dspvec"}],"output":{"name":"voidresult"}}],[11,"plain_fft","","",3,null],[11,"fft","","",3,null],[11,"windowed_fft","","",3,null],[11,"plain_sfft","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sfft","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sfft","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"plain_ifft","","",3,null],[11,"ifft","","",3,null],[11,"windowed_ifft","","",3,null],[11,"plain_sifft","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sifft","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sifft","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"mirror","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"fft_shift","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"ifft_shift","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"apply_window","","",3,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"unapply_window","","",3,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"prepare_argument","","",3,null],[11,"prepare_argument_padded","","",3,null],[11,"correlate","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"matrix4xn"}],"output":{"name":"voidresult"}}],[11,"interpolatef","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"interpolatei","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"voidresult"}}],[11,"interpolate","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"option"},{"name":"usize"},{"name":"t"}],"output":{"name":"voidresult"}}],[11,"interpft","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"usize"}],"output":null}],[11,"decimatei","","",3,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"interpolate_hermite","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"interpolate_lin","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"convolve","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"convolve","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"compleximpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"multiply_frequency_response","","",3,{"inputs":[{"name":"self"},{"name":"realfrequencyresponse"},{"name":"t"}],"output":null}],[11,"multiply_frequency_response","","",3,{"inputs":[{"name":"self"},{"name":"complexfrequencyresponse"},{"name":"t"}],"output":null}],[11,"convolve_vector","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"dspvec"}],"output":{"name":"voidresult"}}],[11,"convolve_vector","","",0,{"inputs":[{"name":"self"},{"name":"b"},{"name":"vec"}],"output":{"name":"voidresult"}}],[11,"convolve_vector","","",1,null],[11,"convolve_vector","","",2,null],[11,"convolve_vector","","",3,null],[6,"Matrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in any number space or domain.",null,null],[6,"Matrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in any number space or domain.",null,null],[6,"RealTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in real number space and time domain.",null,null],[6,"RealTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in real number space and time domain.",null,null],[6,"ComplexTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in complex number space and time domain.",null,null],[6,"ComplexTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in complex number space and time domain.",null,null],[6,"RealFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in real number space and frequency domain.",null,null],[6,"RealFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in real number space and frequency domain.",null,null],[6,"ComplexFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in complex number space and frequency domain.",null,null],[6,"ComplexFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in complex number space and frequency domain.",null,null],[6,"Matrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in any number space or domain.",null,null],[6,"Matrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in any number space or domain.",null,null],[6,"RealTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in real number space and time domain.",null,null],[6,"RealTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in real number space and time domain.",null,null],[6,"ComplexTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in complex number space and time domain.",null,null],[6,"ComplexTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in complex number space and time domain.",null,null],[6,"RealFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in real number space and frequency domain.",null,null],[6,"RealFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in real number space and frequency domain.",null,null],[6,"ComplexFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in complex number space and frequency domain.",null,null],[6,"ComplexFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in complex number space and frequency domain.",null,null],[6,"Matrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in any number space or domain.",null,null],[6,"Matrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit floating point numbers in any number space or domain.",null,null],[6,"RealTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in real number space and time domain.",null,null],[6,"RealTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit floating point numbers in real number space and time domain.",null,null],[6,"ComplexTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in complex number space and time domain.",null,null],[6,"ComplexTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit floating point numbers in complex number space and time domain.",null,null],[6,"RealFreqMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in real number space and frequency domain.",null,null],[6,"RealFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in real number space and frequency domain.",null,null],[6,"ComplexFreqMatrix32x3","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in complex number space and frequency domain.",null,null],[6,"ComplexFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in complex number space and frequency domain.",null,null],[6,"Matrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in any number space or domain.",null,null],[6,"Matrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in any number space or domain.",null,null],[6,"RealTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in real number space and time domain.",null,null],[6,"RealTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in real number space and time domain.",null,null],[6,"ComplexTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in complex number space and time domain.",null,null],[6,"ComplexTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in complex number space and time domain.",null,null],[6,"RealFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in real number space and frequency domain.",null,null],[6,"RealFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in real number space and frequency domain.",null,null],[6,"ComplexFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in complex number space and frequency domain.",null,null],[6,"ComplexFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in complex number space and frequency domain.",null,null],[8,"Matrix","","A trait for matrix types. In this lib a matrix is simply a collection of vectors. The idea is that the matrix types can be used to reduce the size of a large matrix and that the return types are basic enough so that other specialized matrix libs can do the rest of the work, e.g. inverting the resulting matrix.",null,null],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"row_len","","The number of valid elements in each row of the matrix. This can be changed with the `Resize` trait.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"row_points","","The number of valid points in a row. If the matrix is complex then every valid point consists of two floating point numbers, while for real vectors every point only consists of one floating point number.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"col_len","","The number of columns in the matrix.",4,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"rows","","Gets the rows as vectors.",4,null],[10,"rows_mut","","Gets the rows as mutable vectors.",4,null],[8,"ToMatrix","","Conversion from a collection of vectors to a matrix.",null,null],[16,"Output","","",5,null],[10,"to_mat","","Create a new matrix from a collection of vectors.",5,null],[8,"ToDspMatrix","","Conversion from a generic data type into a dsp matrix which tracks its meta information (domain and number space) only at runtime. See `ToRealMatrix` and `ToComplexMatrix` for alternatives which track most of the meta data with the type system and therefore avoid runtime errors.",null,null],[16,"Output","","",6,null],[10,"to_gen_dsp_mat","","Create a new generic matrix. `delta` can be changed after construction with a call of `set_delta`.",6,null],[8,"ToRealTimeMatrix","","Conversion from a generic data type into a dsp matrix with real data.",null,null],[16,"Output","","",7,null],[10,"to_real_time_mat","","Create a new matrix in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",7,null],[8,"ToRealFreqMatrix","","Conversion from a generic data type into a dsp matrix with real data.",null,null],[16,"Output","","",8,null],[10,"to_real_freq_mat","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",8,null],[8,"ToComplexTimeMatrix","","Conversion from a generic data type into a dsp vector with complex data.",null,null],[16,"Output","","",9,null],[10,"to_complex_time_mat","","Create a new matrix in complex number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",9,null],[8,"ToComplexFreqMatrix","","Conversion from a generic data type into a dsp vector with complex data.",null,null],[16,"Output","","",10,null],[10,"to_complex_freq_mat","","Create a new matrix in complex number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",10,null],[8,"FromMatrix","","Retrieves the underlying storage from a matrix.",null,null],[16,"Output","","Type of the underlying storage of a matrix.",11,null],[10,"get","","Gets the underlying matrix and the number of elements which contain valid.",11,null]],"paths":[[3,"MatrixMxN"],[3,"Matrix2xN"],[3,"Matrix3xN"],[3,"Matrix4xN"],[8,"Matrix"],[8,"ToMatrix"],[8,"ToDspMatrix"],[8,"ToRealTimeMatrix"],[8,"ToRealFreqMatrix"],[8,"ToComplexTimeMatrix"],[8,"ToComplexFreqMatrix"],[8,"FromMatrix"]]};
searchIndex["basic_dsp_vector"] = {"doc":"Basic digital signal processing (DSP) operations","items":[[3,"Statistics","basic_dsp_vector","Statistics about numeric data",null,null],[12,"sum","","Sum of all values",0,null],[12,"count","","How many numbers have been considered for the stats",0,null],[12,"average","","Average value",0,null],[12,"rms","","Root-mean-square or rms over all values.",0,null],[12,"min","","The smallest value.",0,null],[12,"min_index","","The index of the smallest value.",0,null],[12,"max","","The largest value.",0,null],[12,"max_index","","The index of the largest value.",0,null],[3,"SingleBuffer","","A buffer which stores a single vector and never shrinks.",null,null],[3,"RealData","","Marker for types containing real data.",null,null],[3,"ComplexData","","Marker for types containing complex data.",null,null],[3,"RealOrComplexData","","Marker for types containing real or complex data.",null,null],[12,"is_complex_current","","",1,null],[3,"TimeData","","Marker for types containing time data.",null,null],[3,"FrequencyData","","Marker for types containing frequency data.",null,null],[3,"TimeOrFrequencyData","","Marker for types containing time or frequency data.",null,null],[12,"domain_current","","",2,null],[3,"DspVec","","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations. All data vector operations consume the vector they operate on and return a new vector. A consumed vector must not be accessed again.",null,null],[12,"data","","The underlying storage. `self.len()` should be called to find out how many elements in `data` contain valid data.",3,null],[3,"TypeMetaData","","Holds meta data about a type.",null,null],[3,"MultiCoreSettings","","Holds parameters which specify how multiple cores are used to execute an operation.",null,null],[12,"core_limit","","All operations will be limited to not create more threads than specified here",4,null],[12,"early_temp_allocation","","Indicates whether the temp arrays of a vector should already be allocated during construction",4,null],[4,"ErrorReason","","Enumeration of all error reasons",null,null],[13,"InputMustHaveTheSameSize","","The operations requires all inputs to have the same size, in most cases this means that the following must be true: `self.len()` == `argument.len()`",5,null],[13,"InputMetaDataMustAgree","","The operations requires all inputs to have the same meta data. For a vector this means that the following must be true: `self.is_complex()` == `argument.is_complex()` && `self.domain()` == `argument.domain()` && `self.delta()`== `argument.domain()`; Consider to convert one of the inputs so that this condition is true. The necessary operations may include FFT/IFFT, complex/real conversion and resampling.",5,null],[13,"InputMustBeComplex","","The operation requires the input to be complex.",5,null],[13,"InputMustBeReal","","The operation requires the input to be real.",5,null],[13,"InputMustBeInTimeDomain","","The operation requires the input to be in time domain.",5,null],[13,"InputMustBeInFrequencyDomain","","The operation requires the input to be in frequency domain.",5,null],[13,"InvalidArgumentLength","","The arguments have an invalid length to perform the operation. The operations documentation should have more information about the requirements. Please open a defect if this isn't the case.",5,null],[13,"InputMustBeConjSymmetric","","The operations is only valid if the data input contains half of a symmetric spectrum. The symmetry definition follows soon however more important is that the element at 0 Hz which happens to be the first vector element must be real. The error message is raised if this is violated, the rest of the definition is only listed here for completeness snce it can't be checked. The required symmetry for a vector is that for every point `vector[x].conj() == vector[-x]`(pseudocode) where `x` is the x-axis position relative to 0 Hz and `conj` is the complex conjugate.",5,null],[13,"InputMustHaveAnOddLength","","`self.points()` must be an odd number.",5,null],[13,"ArgumentFunctionMustBeSymmetric","","The function passed as argument must be symmetric",5,null],[13,"InvalidNumberOfArgumentsForCombinedOp","","The number of arguments passed into a combined operation methods doesn't match with the number of arguments specified previously via the `add_op` methods.",5,null],[13,"InputMustNotBeEmpty","","The operation isn't specified for an empty vector.",5,null],[13,"InputMustHaveAnEvenLength","","Given input must have an even length.",5,null],[13,"TypeCanNotResize","","The arguments would require that the type allocates larger memory. But the type can't do that.",5,null],[4,"PaddingOption","","An option which defines how a vector should be padded",null,null],[13,"End","","Appends zeros to the end of the vector.",6,null],[13,"Surround","","Surrounds the vector with zeros at the beginning and at the end.",6,null],[13,"Center","","Inserts zeros in the center of the vector",6,null],[4,"DataDomain","","The domain of a data vector",null,null],[13,"Time","","Time domain, the x-axis is in [s]",7,null],[13,"Frequency","","Frequency domain, the x-axis in [Hz]",7,null],[11,"get","","",3,null],[11,"to_slice","","",3,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone_from","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"domain","","",3,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"is_complex","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"domain","","",8,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"is_complex","","",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"resize","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"voidresult"}}],[11,"delta","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"set_delta","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"points","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_multicore_settings","","",3,{"inputs":[{"name":"self"}],"output":{"name":"multicoresettings"}}],[11,"set_multicore_settings","","",3,{"inputs":[{"name":"self"},{"name":"multicoresettings"}],"output":null}],[11,"alloc_len","","",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get_meta_data","","",3,{"inputs":[{"name":"self"}],"output":{"name":"typemetadata"}}],[11,"index","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"complex","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"complex"}}],[11,"complex_mut","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"complex"}}],[11,"complex","","",3,null],[11,"complex_mut","","",3,null],[11,"complex","","",3,null],[11,"complex_mut","","",3,null],[11,"complex","","",3,null],[11,"complex_mut","","",3,null],[11,"complex","","",3,null],[11,"complex_mut","","",3,null],[11,"magnitude","","",3,null],[11,"magnitude_squared","","",3,null],[11,"to_real","","",3,null],[11,"to_imag","","",3,null],[11,"phase","","",3,null],[11,"magnitude_b","","",3,null],[11,"magnitude_squared_b","","",3,null],[11,"to_real_b","","",3,null],[11,"to_imag_b","","",3,null],[11,"phase_b","","",3,null],[11,"get_real","","",3,null],[11,"get_imag","","",3,null],[11,"get_magnitude","","",3,null],[11,"get_magnitude_squared","","",3,null],[11,"get_phase","","",3,null],[11,"get_real_imag","","",3,null],[11,"get_mag_phase","","",3,null],[11,"set_real_imag","","",3,null],[11,"set_mag_phase","","",3,null],[11,"multiply_complex_exponential","","",3,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"conj","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"to_complex","","",3,{"inputs":[{"name":"self"}],"output":{"name":"transres"}}],[11,"to_complex_b","","",3,null],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"wrap","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"unwrap","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln_approx","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"exp_approx","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"sin_approx","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"cos_approx","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"log_approx","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf_approx","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf_approx","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"mirror","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"fft_shift","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"ifft_shift","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"apply_window","","",3,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"unapply_window","","",3,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[11,"plain_fft","","",3,null],[11,"fft","","",3,null],[11,"windowed_fft","","",3,null],[11,"plain_sfft","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sfft","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sfft","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"plain_ifft","","",3,null],[11,"ifft","","",3,null],[11,"windowed_ifft","","",3,null],[11,"plain_sifft","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"sifft","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[11,"windowed_sifft","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[11,"prepare_argument","","",3,null],[11,"prepare_argument_padded","","",3,null],[11,"correlate","","",3,null],[11,"convolve","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"convolve","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"compleximpulseresponse"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"convolve_vector","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"multiply_frequency_response","","",3,{"inputs":[{"name":"self"},{"name":"complexfrequencyresponse"},{"name":"t"}],"output":null}],[11,"multiply_frequency_response","","",3,{"inputs":[{"name":"self"},{"name":"realfrequencyresponse"},{"name":"t"}],"output":null}],[11,"interpolatef","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"interpolatei","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"voidresult"}}],[11,"interpft","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"usize"}],"output":null}],[11,"interpolate","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"option"},{"name":"usize"},{"name":"t"}],"output":{"name":"voidresult"}}],[11,"decimatei","","",3,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[11,"interpolate_lin","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"interpolate_hermite","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[11,"convolve_mat","","Convolves a vector of vectors (in this lib also considered a matrix) with a vector of impulse responses and stores the result in `target`.",3,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"errorreason"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"errorreason"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"offset","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"offset","","",3,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"scale","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"scale","","",3,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"add_smaller","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub_smaller","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul_smaller","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div_smaller","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sin","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"cos","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"tan","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"asin","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"acos","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"atan","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"sinh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"cosh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"tanh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"asinh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"acosh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"atanh","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"sqrt","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"square","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"root","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"exp","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"log","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"paddingoption"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"paddingoption"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reverse","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"swap_halves_b","","",3,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[11,"zero_pad","","",3,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"voidresult"}}],[11,"zero_interleave","","",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"voidresult"}}],[11,"zero_pad_b","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"usize"},{"name":"paddingoption"}],"output":null}],[11,"zero_interleave_b","","",3,{"inputs":[{"name":"self"},{"name":"b"},{"name":"u32"}],"output":null}],[11,"split_into","","",3,null],[11,"merge","","",3,null],[11,"diff","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"diff_with_start","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"cum_sum","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"dot_product","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"dot_product","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"dot_product_prec","","",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"scalarresult"}}],[11,"map_inplace","","",3,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"map_aggregate","","",3,{"inputs":[{"name":"self"},{"name":"a"},{"name":"fmap"},{"name":"faggr"}],"output":{"name":"scalarresult"}}],[11,"map_inplace","","",3,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[11,"map_aggregate","","",3,{"inputs":[{"name":"self"},{"name":"a"},{"name":"fmap"},{"name":"faggr"}],"output":{"name":"scalarresult"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"statistics"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"statistics"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"statistics"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"invalid","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"merge","","",0,null],[11,"merge_cols","","",0,null],[11,"empty_vec","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"}],"output":null}],[11,"empty","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"invalid","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"merge","","",0,null],[11,"merge_cols","","",0,null],[11,"empty_vec","","",0,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"},{"name":"usize"}],"output":null}],[11,"statistics","","",3,{"inputs":[{"name":"self"}],"output":{"name":"statistics"}}],[11,"statistics_split","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_splitted","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"sum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"sum_sq","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"statistics","","",3,{"inputs":[{"name":"self"}],"output":{"name":"statistics"}}],[11,"statistics_split","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_splitted","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"sum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sum_sq","","",3,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"statistics_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"statistics"}}],[11,"statistics_splitted_prec","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"statistics"}}],[11,"statistics_splitted_prec","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"sum_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"sum_sq_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"sum_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"sum_sq_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"statistics_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"statistics"}}],[11,"statistics_splitted_prec","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"statistics_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"statistics"}}],[11,"statistics_splitted_prec","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"sum_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sum_sq_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sum_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sum_sq_prec","","",3,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add_prec","","",0,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"},{"name":"t"},{"name":"t"}],"output":null}],[11,"add_prec","","",0,{"inputs":[{"name":"self"},{"name":"complex"},{"name":"usize"},{"name":"complex"},{"name":"complex"}],"output":null}],[11,"new","","Creates a new buffer which is ready to be passed around.",9,{"inputs":[],"output":{"name":"singlebuffer"}}],[11,"with_capacity","","Creates a new buffer which is ready to be passed around.",9,{"inputs":[{"name":"usize"}],"output":{"name":"singlebuffer"}}],[11,"get","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"construct_new","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"free","","",9,{"inputs":[{"name":"self"},{"name":"vec"}],"output":null}],[11,"alloc_len","","",9,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"datadomain"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"realdata"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"realdata"}],"output":{"name":"bool"}}],[11,"is_complex","","",10,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_complex","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"to_real","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"complexdata"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"complexdata"}],"output":{"name":"bool"}}],[11,"is_complex","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_complex","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"to_real","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"realorcomplexdata"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"realorcomplexdata"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"realorcomplexdata"}],"output":{"name":"bool"}}],[11,"is_complex","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_complex","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"to_real","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"timedata"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"timedata"}],"output":{"name":"bool"}}],[11,"domain","","",12,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"to_freq","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"to_time","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"frequencydata"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"frequencydata"}],"output":{"name":"bool"}}],[11,"domain","","",13,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"to_time","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"to_freq","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeorfrequencydata"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"timeorfrequencydata"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"timeorfrequencydata"}],"output":{"name":"bool"}}],[11,"domain","","",2,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"to_freq","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"to_time","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"typemetadata"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"multicoresettings"}}],[11,"default","","Creates multi core settings with default values",4,{"inputs":[],"output":{"name":"multicoresettings"}}],[11,"new","","Creates multi core settings with the given values.",4,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"multicoresettings"}}],[0,"window_functions","","This mod contains a definition for window functions and provides implementations for a few standard windows. See the `WindowFunction` type for more information.",null,null],[3,"TriangularWindow","basic_dsp_vector::window_functions","A triangular window: `https://en.wikipedia.org/wiki/Window_function#Triangular_window`",null,null],[3,"HammingWindow","","A generalized Hamming window: `https://en.wikipedia.org/wiki/Window_function#Hamming_window`",null,null],[3,"ForeignWindowFunction","","A window function which can be constructed outside this crate.",null,null],[12,"window_function","","The window function",14,null],[12,"window_data","","The data which is passed to the window function",14,null],[12,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.window(x) == self.window(-x)`.",14,null],[8,"WindowFunction","","A window function for FFT windows. See `https://en.wikipedia.org/wiki/Window_function` for details. Window functions should document if they aren't applicable for Inverse Fourier Transformations.",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.window(x) == self.window(-x)`.",15,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"window","","Calculates a point of the window function",15,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"is_symmetric","","",16,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"window","","",16,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Creates a new Hamming window",17,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"default","","Creates the default Hamming window as defined in GNU Octave.",17,{"inputs":[],"output":{"name":"self"}}],[11,"is_symmetric","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"window","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[11,"new","","Creates a new window function",14,null],[11,"is_symmetric","","",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"window","","",14,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"t"}}],[0,"conv_types","basic_dsp_vector","Types around a convolution, see also https://en.wikipedia.org/wiki/Convolution.",null,null],[3,"RealTimeLinearTableLookup","basic_dsp_vector::conv_types","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",null,null],[3,"RealFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",null,null],[3,"ComplexTimeLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",null,null],[3,"ComplexFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",null,null],[3,"RaisedCosineFunction","","Raised cosine function according to `https://en.wikipedia.org/wiki/Raised-cosine_filter`",null,null],[3,"SincFunction","","Sinc function according to `https://en.wikipedia.org/wiki/Sinc_function`",null,null],[3,"ForeignRealConvolutionFunction","","A real function which can be constructed outside this crate.",null,null],[12,"conv_function","","The function",18,null],[12,"conv_data","","The data which is passed to the function.",18,null],[12,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",18,null],[3,"ForeignComplexConvolutionFunction","","A complex function which can be constructed outside this crate.",null,null],[12,"conv_function","","The function",19,null],[12,"conv_data","","The data which is passed to the window function",19,null],[12,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",19,null],[8,"RealImpulseResponse","","A convolution function in time domain and real number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",20,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"calc","","Calculates the convolution for a data point",20,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[8,"RealFrequencyResponse","","A convolution function in frequency domain and real number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"calc","","Calculates the convolution for a data point",21,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[8,"ComplexImpulseResponse","","A convolution function in time domain and complex number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"calc","","Calculates the convolution for a data point",22,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[8,"ComplexFrequencyResponse","","A convolution function in frequency domain and complex number space",null,null],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",23,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"calc","","Calculates the convolution for a data point",23,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"table","","Allows to inspect the generated lookup table",24,null],[11,"delta","","Gets the delta value which determines the resolution",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"table","","Allows to inspect the generated lookup table",25,null],[11,"delta","","Gets the delta value which determines the resolution",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"table","","Allows to inspect the generated lookup table",26,null],[11,"delta","","Gets the delta value which determines the resolution",26,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"table","","Allows to inspect the generated lookup table",27,null],[11,"delta","","Gets the delta value which determines the resolution",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_symmetric","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",24,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",24,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",24,{"inputs":[{"name":"realimpulseresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",24,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",24,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",24,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",24,{"inputs":[{"name":"realimpulseresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",25,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"f32"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",25,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",25,{"inputs":[{"name":"realfrequencyresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",25,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",25,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"f64"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",25,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",25,{"inputs":[{"name":"realfrequencyresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"complex32"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",26,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",26,{"inputs":[{"name":"compleximpulseresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"complex64"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",26,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",26,{"inputs":[{"name":"compleximpulseresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",27,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"complex32"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",27,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",27,{"inputs":[{"name":"complexfrequencyresponse"},{"name":"f32"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_symmetric","","",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",27,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"complex64"}}],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",27,null],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",27,{"inputs":[{"name":"complexfrequencyresponse"},{"name":"f64"},{"name":"usize"}],"output":{"name":"self"}}],[11,"to_complex","","Convert the lookup table into complex number space",24,{"inputs":[{"name":"self"}],"output":{"name":"complextimelineartablelookup"}}],[11,"to_complex","","Convert the lookup table into complex number space",24,{"inputs":[{"name":"self"}],"output":{"name":"complextimelineartablelookup"}}],[11,"to_complex","","Convert the lookup table into complex number space",25,{"inputs":[{"name":"self"}],"output":{"name":"complexfrequencylineartablelookup"}}],[11,"to_complex","","Convert the lookup table into complex number space",25,{"inputs":[{"name":"self"}],"output":{"name":"complexfrequencylineartablelookup"}}],[11,"to_real","","Convert the lookup table into real number space",26,{"inputs":[{"name":"self"}],"output":{"name":"realtimelineartablelookup"}}],[11,"to_real","","Convert the lookup table into real number space",26,{"inputs":[{"name":"self"}],"output":{"name":"realtimelineartablelookup"}}],[11,"to_real","","Convert the lookup table into real number space",27,{"inputs":[{"name":"self"}],"output":{"name":"realfrequencylineartablelookup"}}],[11,"to_real","","Convert the lookup table into real number space",27,{"inputs":[{"name":"self"}],"output":{"name":"realfrequencylineartablelookup"}}],[11,"fft","","Convert the lookup table into frequency domain",26,{"inputs":[{"name":"self"}],"output":{"name":"complexfrequencylineartablelookup"}}],[11,"fft","","Convert the lookup table into frequency domain",26,{"inputs":[{"name":"self"}],"output":{"name":"complexfrequencylineartablelookup"}}],[11,"fft","","Convert the lookup table into a magnitude spectrum",24,{"inputs":[{"name":"self"}],"output":{"name":"realfrequencylineartablelookup"}}],[11,"fft","","Convert the lookup table into a magnitude spectrum",24,{"inputs":[{"name":"self"}],"output":{"name":"realfrequencylineartablelookup"}}],[11,"ifft","","Convert the lookup table into time domain",27,{"inputs":[{"name":"self"}],"output":{"name":"complextimelineartablelookup"}}],[11,"ifft","","Convert the lookup table into time domain",27,{"inputs":[{"name":"self"}],"output":{"name":"complextimelineartablelookup"}}],[11,"is_symmetric","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"is_symmetric","","",28,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",28,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"new","","Creates a raised cosine function.",28,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"is_symmetric","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"is_symmetric","","",29,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",29,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"new","","Creates a sinc function.",29,{"inputs":[],"output":{"name":"self"}}],[11,"new","","Creates a new real function",18,null],[11,"is_symmetric","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"is_symmetric","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",18,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"t"}}],[11,"new","","Creates a new real function",19,null],[11,"is_symmetric","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"is_symmetric","","",19,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"calc","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",19,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[0,"combined_ops","basic_dsp_vector","This module allows to combine certain operations into one operation. Since one many machines the speed of many DSP operations is limited by the memory bus speed this approach may result in better register and cache usage and thus decrease the pressure on the memory bus. As with all performance hints remember rule number 1: Benchmark your code. This is especially true at this very early state of the library.",null,null],[3,"MultiOperation1","basic_dsp_vector::combined_ops","A multi operation which holds a vector and records all changes which need to be done to the vectors. By calling `get` on the struct all operations will be executed in one run.",null,null],[3,"MultiOperation2","","A multi operation which holds a vector and records all changes which need to be done to the vectors. By calling `get` on the struct all operations will be executed in one run.",null,null],[3,"Identifier","","An identifier is just a placeholder for a data type used to ensure already at compile time that operations are valid.",null,null],[3,"PreparedOperation1","","An operation on one data vector which has been prepared in advance.",null,null],[3,"PreparedOperation2","","An operation on two data vectors which has been prepared in advance.",null,null],[4,"Operation","","An alternative way to define operations on a vector.",null,null],[13,"AddReal","","",30,null],[13,"MultiplyReal","","",30,null],[13,"Abs","","",30,null],[13,"ToComplex","","",30,null],[13,"MapReal","","",30,null],[13,"AddComplex","","",30,null],[13,"MultiplyComplex","","",30,null],[13,"Magnitude","","",30,null],[13,"MagnitudeSquared","","",30,null],[13,"ComplexConj","","",30,null],[13,"ToReal","","",30,null],[13,"ToImag","","",30,null],[13,"Phase","","",30,null],[13,"MultiplyComplexExponential","","",30,null],[13,"MapComplex","","",30,null],[13,"AddVector","","",30,null],[13,"SubVector","","",30,null],[13,"MulVector","","",30,null],[13,"DivVector","","",30,null],[13,"Sqrt","","",30,null],[13,"Square","","",30,null],[13,"Root","","",30,null],[13,"Powf","","",30,null],[13,"Ln","","",30,null],[13,"Exp","","",30,null],[13,"Log","","",30,null],[13,"Expf","","",30,null],[13,"Sin","","",30,null],[13,"Cos","","",30,null],[13,"Tan","","",30,null],[13,"ASin","","",30,null],[13,"ACos","","",30,null],[13,"ATan","","",30,null],[13,"Sinh","","",30,null],[13,"Cosh","","",30,null],[13,"Tanh","","",30,null],[13,"ASinh","","",30,null],[13,"ACosh","","",30,null],[13,"ATanh","","",30,null],[13,"CloneFrom","","",30,null],[13,"AddPoints","","",30,null],[13,"SubPoints","","",30,null],[13,"MulPoints","","",30,null],[13,"DivPoints","","",30,null],[5,"prepare32_1","","Prepares an operation with one input and one output.",null,{"inputs":[{"name":"n"},{"name":"d"}],"output":{"name":"preparedoperation1"}}],[5,"prepare64_1","","Prepares an operation with one input and one output.",null,{"inputs":[{"name":"n"},{"name":"d"}],"output":{"name":"preparedoperation1"}}],[5,"prepare32_2","","Prepares an operation with one input and one output.",null,{"inputs":[{"name":"n1"},{"name":"d1"},{"name":"n2"},{"name":"d2"}],"output":{"name":"preparedoperation2"}}],[5,"prepare64_2","","Prepares an operation with one input and one output.",null,{"inputs":[{"name":"n1"},{"name":"d1"},{"name":"n2"},{"name":"d2"}],"output":{"name":"preparedoperation2"}}],[5,"multi_ops1","","Creates a new multi operation for one vectors.",null,{"inputs":[{"name":"dspvec"}],"output":{"name":"multioperation1"}}],[5,"multi_ops2","","Creates a new multi operation for two vectors.",null,{"inputs":[{"name":"dspvec"},{"name":"dspvec"}],"output":{"name":"multioperation2"}}],[6,"RealTimeIdent","","A identifier with real numbers in time domain.",null,null],[6,"RealFreqIdent","","A identifier with real numbers in frequency domain.",null,null],[6,"ComplexTimeIdent","","A identifier with complex numbers in time domain.",null,null],[6,"ComplexFreqIdent","","A identifier with complex numbers in frequency domain.",null,null],[6,"GenDspIdent","","A identifier with no information about number space or domain at compile time.",null,null],[8,"PreparedOperation1Exec","","Executes the prepared operations to convert `S`to `D`.",null,null],[10,"exec","","Executes the prepared operations to convert `S`to `D`.",31,{"inputs":[{"name":"self"},{"name":"b"},{"name":"s"}],"output":{"name":"result"}}],[8,"PreparedOperation2Exec","","Executes the prepared operations to convert `S1` and `S2` to `D1` and `D2`.",null,null],[10,"exec","","Executes the prepared operations to convert `S1` and `S2` to `D1` and `D2`.",32,{"inputs":[{"name":"self"},{"name":"b"},{"name":"s1"},{"name":"s2"}],"output":{"name":"result"}}],[8,"IdentifierOps","","Operations for all kind of vectors which can be used in combination with multi ops or prepared ops.",null,null],[10,"domain","","The domain in which the data vector resides. Basically specifies the x-axis and the type of operations which are valid on this vector.",33,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[10,"is_complex","","Indicates whether the vector contains complex data. This also specifies the type of operations which are valid on this vector.",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"clone_from","","Copies data from another vector.",33,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[10,"add_points","","Adds its length to the vector elements # Example",33,{"inputs":[{"name":"self"}],"output":null}],[10,"sub_points","","Subtracts its length from the vector elements # Example",33,{"inputs":[{"name":"self"}],"output":null}],[10,"div_points","","divides the vector elements by its length Subtracts its length from the vector elements # Example",33,{"inputs":[{"name":"self"}],"output":null}],[10,"mul_points","","Multiplies the vector elements with its length # Example",33,{"inputs":[{"name":"self"}],"output":null}],[0,"numbers","basic_dsp_vector","Traits from the `num` crate which are used inside `basic_dsp`. In future the `RealNumber` and `Zero` trait will likely be found here too.",null,null],[8,"Float","basic_dsp_vector::numbers","",null,null],[10,"nan","","Returns the `NaN` value.",34,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",34,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",34,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",34,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",34,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",34,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",34,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",34,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",34,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",34,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",34,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",34,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",34,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",34,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",34,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",35,{"inputs":[],"output":{"name":"self"}}],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",36,null],[12,"im","","Imaginary portion of the complex number",36,null],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",37,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",37,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"DspNumber","","A trait for a numeric value which at least supports a subset of the operations defined in this crate. Can be an integer or a floating point number. In order to have support for all operations in this crate a must implement the `RealNumber`.",null,null],[6,"TransRes","basic_dsp_vector","Result for operations which transform a type (most commonly the type is a vector). On success the transformed type is returned. On failure it contains an error reason and the original type with with invalid data which still can be used in order to avoid memory allocation.",null,null],[6,"VoidResult","","Void/nothing in case of success or a reason in case of an error.",null,null],[6,"ScalarResult","","Scalar result or a reason in case of an error.",null,null],[6,"RealTimeVec","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVec","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVec","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVec","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVec","","A vector with no information about number space or domain at compile time.",null,null],[6,"RealTimeVec32","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVec32","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVec32","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVec32","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVec32","","A vector with no information about number space or domain at compile time.",null,null],[6,"RealTimeVecSlice32","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVecSlice32","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVecSlice32","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVecSlice32","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVecSlice32","","A vector with no information about number space or domain at compile time.",null,null],[6,"RealTimeVec64","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVec64","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVec64","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVec64","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVec64","","A vector with no information about number space or domain at compile time.",null,null],[6,"RealTimeVecSlice64","","A vector with real numbers in time domain.",null,null],[6,"RealFreqVecSlice64","","A vector with real numbers in frequency domain.",null,null],[6,"ComplexTimeVecSlice64","","A vector with complex numbers in time domain.",null,null],[6,"ComplexFreqVecSlice64","","A vector with complex numbers in frequency domain.",null,null],[6,"GenDspVecSlice64","","A vector with no information about number space or domain at compile time.",null,null],[8,"ToSlice","","A trait to convert a type into a slice.",null,null],[10,"to_slice","","Convert to a slice.",38,null],[10,"len","","Length of a slice.",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"is_empty","","Indicates whether or not this storage type is empty.",38,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"alloc_len","","Gets the allocated length of a storage. It's expected that `self.alloc_len() >= self.len()` in all cases.",38,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"try_resize","","Resizes the storage to support at least `len` elements or returns an error if resizing isn't supported.",38,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"voidresult"}}],[8,"ToSliceMut","","A trait to convert a type into a mutable slice.",null,null],[10,"to_slice_mut","","Convert to a mutable slice.",39,null],[8,"Resize","","A trait for storage types which are known to have the capability to increase their capacity.",null,null],[10,"resize","","Resize a storage type. Must work for any value of `len`, however it's okay if after this method `self.alloc_len() > len` or in words: It's okay if the method allocates more memory than specified in the parameter.",40,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[8,"Owner","","A marker trait which states the the type owns its storage.",null,null],[8,"ToDspVector","","Conversion from a generic data type into a dsp vector which tracks its meta information (domain and number space) only at runtime. See `ToRealVector` and `ToComplexVector` for alternatives which track most of the meta data with the type system and therefore avoid runtime errors.",null,null],[10,"to_gen_dsp_vec","","Create a new generic vector. `delta` can be changed after construction with a call of `set_delta`.",41,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"gendspvec"}}],[10,"to_dsp_vec","","Create a new vector from the given meta data. The meta data can be retrieved from an existing vector. If no existing vector is available then one of the other constructor methods should be used.",41,{"inputs":[{"name":"self"},{"name":"typemetadata"}],"output":{"name":"dspvec"}}],[8,"ToRealVector","","Conversion from a generic data type into a dsp vector with real data.",null,null],[10,"to_real_time_vec","","Create a new vector in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",42,{"inputs":[{"name":"self"}],"output":{"name":"realtimevec"}}],[10,"to_real_freq_vec","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",42,{"inputs":[{"name":"self"}],"output":{"name":"realfreqvec"}}],[8,"ToComplexVector","","Conversion from a generic data type into a dsp vector with complex data.",null,null],[10,"to_complex_time_vec","","Create a new vector in complex number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",43,{"inputs":[{"name":"self"}],"output":{"name":"complextimevec"}}],[10,"to_complex_freq_vec","","Create a new vector in complex number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",43,{"inputs":[{"name":"self"}],"output":{"name":"complexfreqvec"}}],[8,"InterleaveToVector","","Conversion from two instances of a generic data type into a dsp vector with complex data.",null,null],[10,"interleave_to_complex_time_vec","","Create a new vector in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",44,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[10,"interleave_to_complex_freq_vec","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",44,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"result"}}],[8,"FromVector","","Retrieves the underlying storage from a vector.",null,null],[16,"Output","","Type of the underlying storage of a vector.",45,null],[10,"get","","Gets the underlying storage and the number of elements which contain valid.",45,null],[10,"to_slice","","Gets the underlying slice of a vector.",45,null],[8,"ComplexIndex","","Like `std::ops::Index` but with a different method name so that it can be used to implement an additional range accessor for complex data.",null,null],[16,"Output","","",46,null],[10,"complex","","The method for complex indexing",46,null],[8,"ComplexIndexMut","","Like `std::ops::IndexMut` but with a different method name so that it can be used to implement a additional range accessor for complex data.",null,null],[10,"complex_mut","","The method for complex indexing",47,null],[8,"MetaData","","A trait which provides information about number space and domain.",null,null],[10,"domain","","The domain in which the data vector resides. Basically specifies the x-axis and the type of operations which are valid on this vector.",48,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[10,"is_complex","","Indicates whether the vector contains complex data. This also specifies the type of operations which are valid on this vector.",48,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"ResizeOps","","Operations to resize a data type.",null,null],[10,"resize","","Changes `self.len()`. If `self.is_complex()` is true then `len` must be an even number. `len > self.alloc_len()` is only possible if the underlying storage supports resizing.",49,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"voidresult"}}],[8,"Vector","","A trait for vector types.",null,null],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",50,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",50,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"len","","The number of valid elements in the vector. This can be changed with the `Resize` trait.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"is_empty","","Indicates whether or not the vector is empty.",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"points","","The number of valid points. If the vector is complex then every valid point consists of two floating point numbers, while for real vectors every point only consists of one floating point number.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"get_multicore_settings","","Gets the multi core settings which determine how the work is split between several cores if the amount of data gets larger.",50,{"inputs":[{"name":"self"}],"output":{"name":"multicoresettings"}}],[10,"set_multicore_settings","","Sets the multi core settings which determine how the work is split between several cores if the amount of data gets larger.",50,{"inputs":[{"name":"self"},{"name":"multicoresettings"}],"output":null}],[10,"alloc_len","","Gets the number of allocated elements in the underlying vector. The allocated length may be larger than the length of valid points. In most cases you likely want to have `len`or `points` instead.",50,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"GetMetaData","","Gets the meta data of a type. This can be used to create a new type with the same meta data. # Example",null,null],[10,"get_meta_data","","Gets a copy of the vector meta data. This can be used to create new types with the same meta data.",51,{"inputs":[{"name":"self"}],"output":{"name":"typemetadata"}}],[8,"ComplexToRealTransformsOps","","Defines transformations from complex to real number space.",null,null],[10,"magnitude","","Gets the absolute value, magnitude or norm of all vector elements. # Example",52,null],[10,"magnitude_squared","","Gets the square root of the absolute value of all vector elements. # Example",52,null],[10,"to_real","","Gets all real elements. # Example",52,null],[10,"to_imag","","Gets all imag elements. # Example",52,null],[10,"phase","","Gets the phase of all elements in [rad]. # Example",52,null],[8,"ComplexToRealTransformsOpsBuffered","","Defines transformations from complex to real number space.",null,null],[10,"magnitude_b","","Gets the absolute value, magnitude or norm of all vector elements. # Example",53,null],[10,"magnitude_squared_b","","Gets the square root of the absolute value of all vector elements. # Example",53,null],[10,"to_real_b","","Gets all real elements. # Example",53,null],[10,"to_imag_b","","Gets all imag elements. # Example",53,null],[10,"phase_b","","Gets the phase of all elements in [rad]. # Example",53,null],[8,"ComplexToRealGetterOps","","Defines getters to get real data from complex types.",null,null],[10,"get_real","","Copies all real elements into the given vector. # Example",54,null],[10,"get_imag","","Copies all imag elements into the given vector. # Example",54,null],[10,"get_magnitude","","Copies the absolute value or magnitude of all vector elements into the given target vector. # Example",54,null],[10,"get_magnitude_squared","","Copies the absolute value squared or magnitude squared of all vector elements into the given target vector. # Example",54,null],[10,"get_phase","","Copies the phase of all elements in [rad] into the given vector. # Example",54,null],[10,"get_real_imag","","Gets the real and imaginary parts and stores them in the given vectors. See also  `get_phase` and `get_complex_abs` for further information.",54,null],[10,"get_mag_phase","","Gets the magnitude and phase and stores them in the given vectors. See also `get_real` and `get_imag` for further information.",54,null],[8,"ComplexToRealSetterOps","","Defines setters to create complex data from real data.",null,null],[10,"set_real_imag","","Overrides the `self` vectors data with the real and imaginary data in the given vectors. `real` and `imag` must have the same size.",55,null],[10,"set_mag_phase","","Overrides the `self` vectors data with the magnitude and phase data in the given vectors. Note that `self` vector will immediately convert the data into a real and imaginary representation of the complex numbers which is its default format. `mag` and `phase` must have the same size.",55,null],[8,"ComplexOps","","Operations on complex types.",null,null],[10,"multiply_complex_exponential","","Multiplies each vector element with `exp(j*(a*idx*self.delta() + b))` where `a` and `b` are arguments and `idx` is the index of the data points in the vector ranging from `0 to self.points() - 1`. `j` is the imaginary number and `exp` the exponential function.",56,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[10,"conj","","Calculates the complex conjugate of the vector. # Example",56,{"inputs":[{"name":"self"}],"output":null}],[8,"RealToComplexTransformsOps","","Defines transformations from real to complex number space.",null,null],[10,"to_complex","","Converts the real vector into a complex vector.",57,{"inputs":[{"name":"self"}],"output":{"name":"transres"}}],[8,"RealToComplexTransformsOpsBuffered","","Defines transformations from real to complex number space.",null,null],[10,"to_complex_b","","Converts the real vector into a complex vector. The buffer allows this operation to succeed even if the storage type doesn't allow resizing.",58,null],[8,"RealOps","","Operations on real types.",null,null],[10,"abs","","Gets the absolute value of all vector elements. # Example",59,{"inputs":[{"name":"self"}],"output":null}],[8,"ModuloOps","","Operations on real types.",null,null],[10,"wrap","","Each value in the vector is dividable by the divisor and the remainder is stored in the resulting vector. This the same a modulo operation or to phase wrapping.",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"unwrap","","This function corrects the jumps in the given vector which occur due to wrap or modulo operations. This will undo a wrap operation only if the deltas are smaller than half the divisor.",60,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ApproximatedOps","","Recommended to be only used with feature flags `use_sse` or `use_avx`.",null,null],[10,"ln_approx","","Computes the principal value approximation of natural logarithm of every element in the vector.",61,{"inputs":[{"name":"self"}],"output":null}],[10,"exp_approx","","Calculates the natural exponential approximation for every vector element.",61,{"inputs":[{"name":"self"}],"output":null}],[10,"sin_approx","","Calculates the sine approximation of each element in radians.",61,{"inputs":[{"name":"self"}],"output":null}],[10,"cos_approx","","Calculates the cosine approximation of each element in radians",61,{"inputs":[{"name":"self"}],"output":null}],[10,"log_approx","","Calculates the approximated logarithm to the given base for every vector element.",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"expf_approx","","Calculates the approximated exponential to the given base for every vector element.",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"powf_approx","","Raises every vector element to approximately a floating point power.",61,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"FrequencyDomainOperations","","Defines all operations which are valid on `DataVecs` containing frequency domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in frequency domain and complex number space.",null,null],[10,"mirror","","This function mirrors the spectrum vector to transform a symmetric spectrum into a full spectrum with the DC element at index 0 (no FFT shift/swap halves).",62,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[10,"fft_shift","","Swaps vector halves after a Fourier Transformation.",62,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[10,"ifft_shift","","Swaps vector halves before an Inverse Fourier Transformation.",62,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[8,"TimeDomainOperations","","Defines all operations which are valid on `DataVecs` containing time domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in time domain.",null,null],[10,"apply_window","","Applies a window to the data vector.",63,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[10,"unapply_window","","Removes a window from the data vector.",63,{"inputs":[{"name":"self"},{"name":"windowfunction"}],"output":null}],[8,"TimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs` containing time domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in time domain.",null,null],[10,"plain_fft","","Performs a Fast Fourier Transformation transforming a time domain vector into a frequency domain vector.",64,null],[10,"fft","","Performs a Fast Fourier Transformation transforming a time domain vector into a frequency domain vector. # Unstable FFTs of real vectors are unstable. # Example",64,null],[10,"windowed_fft","","Applies a FFT window and performs a Fast Fourier Transformation transforming a time domain vector into a frequency domain vector.",64,null],[8,"SymmetricTimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs` containing real time domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in time domain or with `VectorMustHaveAnOddLength` if `self.points()` isn't and odd number.",null,null],[10,"plain_sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self` is symmetric around the center. This assumption isn't verified and no error is raised if the vector isn't symmetric.",65,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[10,"sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self` is symmetric around the center. This assumption isn't verified and no error is raised if the vector isn't symmetric. # Failures TransRes may report the following `ErrorReason` members:",65,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[10,"windowed_sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self` is symmetric around the center. This assumption isn't verified and no error is raised if the vector isn't symmetric. # Failures TransRes may report the following `ErrorReason` members:",65,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[8,"FrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs` containing frequency domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in frequency domain and complex number space.",null,null],[10,"plain_ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector into a time domain vector.",66,null],[10,"ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector into a time domain vector. # Example",66,null],[10,"windowed_ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector into a time domain vector and removes the FFT window.",66,null],[8,"SymmetricFrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs` containing frequency domain data and the data is assumed to half of complex conjugate symmetric spectrum round 0 Hz where the 0 Hz element itself is real. # Failures All operations in this trait set `self.len()` to `0` if the first element (0Hz) isn't real.",null,null],[10,"plain_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation under the assumption that `self` contains half of a symmetric spectrum starting from 0 Hz. This assumption isn't verified and no error is raised if the spectrum isn't symmetric. The reason for this is that there is no robust verification possible.",67,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[10,"sifft","","Performs a Symmetric Inverse Fast Fourier Transformation under the assumption that `self` contains half of a symmetric spectrum starting from 0 Hz. This assumption isn't verified and no error is raised if the spectrum isn't symmetric. The reason for this is that there is no robust verification possible.",67,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"transres"}}],[10,"windowed_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation (SIFFT) and removes the FFT window. The SIFFT is performed under the assumption that `self` contains half of a symmetric spectrum starting from 0 Hz. This assumption isn't verified and no error is raised if the spectrum isn't symmetric. The reason for this is that there is no robust verification possible.",67,{"inputs":[{"name":"self"},{"name":"b"},{"name":"windowfunction"}],"output":{"name":"transres"}}],[8,"CrossCorrelationArgumentOps","","Cross-correlation of data vectors. See also https://en.wikipedia.org/wiki/Cross-correlation",null,null],[10,"prepare_argument","","Prepares an argument to be used for convolution. Preparing an argument includes two steps:",68,null],[10,"prepare_argument_padded","","Prepares an argument to be used for convolution. The argument is zero padded to length of `2 * self.points() - 1` and then the same operations are performed as described for `prepare_argument`.",68,null],[8,"CrossCorrelationOps","","A trait to calculate the cross correlation.",null,null],[10,"correlate","","Calculates the correlation between `self` and `other`. `other` needs to be a time vector which went through one of the prepare functions `prepare_argument` or `prepare_argument_padded`. See also the trait description for more details.",69,{"inputs":[{"name":"self"},{"name":"b"},{"name":"a"}],"output":{"name":"voidresult"}}],[8,"Convolution","","Provides a convolution operations.",null,null],[10,"convolve","","Convolves `self` with the convolution function `impulse_response`. For performance consider to to use `FrequencyMultiplication` instead of this operation depending on `len`.",70,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"t"},{"name":"usize"}],"output":null}],[8,"ConvolutionOps","","Provides a convolution operation for types which at some point are slice based.",null,null],[10,"convolve_vector","","Convolves `self` with the convolution function `impulse_response`. For performance it's recommended to use multiply both vectors in frequency domain instead of this operation.",71,{"inputs":[{"name":"self"},{"name":"b"},{"name":"a"}],"output":{"name":"voidresult"}}],[8,"FrequencyMultiplication","","Provides a frequency response multiplication operations.",null,null],[10,"multiply_frequency_response","","Multiplies `self` with the frequency response function `frequency_response`.",72,{"inputs":[{"name":"self"},{"name":"c"},{"name":"t"}],"output":null}],[8,"InterpolationOps","","Provides interpolation operations for real and complex data vectors. # Unstable This functionality has been recently added in order to find out if the definitions are consistent. However the actual implementation is lacking tests.",null,null],[10,"interpolatef","","Interpolates `self` with the convolution function `function` by the real value `interpolation_factor`. InterpolationOps is done in time domain and the argument `conv_len` can be used to balance accuracy and computational performance. A `delay` can be used to delay or phase shift the vector. The `delay` considers `self.delta()`.",73,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realimpulseresponse"},{"name":"t"},{"name":"t"},{"name":"usize"}],"output":null}],[10,"interpolatei","","Interpolates `self` with the convolution function `function` by the interger value `interpolation_factor`. InterpolationOps is done in in frequency domain.",73,{"inputs":[{"name":"self"},{"name":"b"},{"name":"realfrequencyresponse"},{"name":"u32"}],"output":{"name":"voidresult"}}],[10,"interpolate","","Interpolates the signal in frequency domain by padding it with zeros.",73,{"inputs":[{"name":"self"},{"name":"b"},{"name":"option"},{"name":"usize"},{"name":"t"}],"output":{"name":"voidresult"}}],[10,"interpft","","Interpolates the signal in frequency domain by padding it with zeros. This function preserves the shape of the signal in frequency domain.",73,{"inputs":[{"name":"self"},{"name":"b"},{"name":"usize"}],"output":null}],[10,"decimatei","","Decimates or downsamples `self`. `decimatei` is the inverse function to `interpolatei`.",73,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"u32"}],"output":null}],[8,"RealInterpolationOps","","Provides interpolation operations which are only applicable for real data vectors. # Failures All operations in this trait fail with `VectorMustBeReal` if the vector isn't in the real number space.",null,null],[10,"interpolate_hermite","","Piecewise cubic hermite interpolation between samples. # Unstable Algorithm might need to be revised. This operation and `interpolate_lin` might be merged into one function with an additional argument in future.",74,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[10,"interpolate_lin","","Linear interpolation between samples. # Unstable This operation and `interpolate_hermite` might be merged into one function with an additional argument in future.",74,{"inputs":[{"name":"self"},{"name":"b"},{"name":"t"},{"name":"t"}],"output":null}],[8,"RededicateOps","","This trait allows to change a data type. The operations will convert a type to a different one and set `self.len()` to zero. However `self.allocated_len()` will remain unchanged. The use case for this is to allow to reuse the memory of a vector for different operations.",null,null],[10,"rededicate_from","","Make `Other` a `Self`. # Example",75,{"inputs":[{"name":"other"}],"output":{"name":"self"}}],[8,"RededicateForceOps","","This trait allows to change a data type and performs the Conversion without any checks. `RededicateOps` provides the same functionality but performs runtime checks to avoid that data is interpreted the wrong way.",null,null],[10,"rededicate_from_force","","Make `Other` a `Self` without performing any checks.",76,{"inputs":[{"name":"other"}],"output":{"name":"self"}}],[10,"rededicate_with_runtime_data","","Make `Other` a `Self` without performing any checks.",76,{"inputs":[{"name":"other"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[8,"RededicateToOps","","This trait allows to change a data type. The operations will convert a type to a different one and set `self.len()` to zero. However `self.allocated_len()` will remain unchanged. The use case for this is to allow to reuse the memory of a vector for different operations.",null,null],[10,"rededicate","","Make `Selfr` a `SelOther`.",77,{"inputs":[{"name":"self"}],"output":{"name":"other"}}],[8,"ToRealResult","","Specifies what the the result is if a type is transformed to real numbers.",null,null],[16,"RealResult","","",78,null],[8,"ToComplexResult","","Specifies what the the result is if a type is transformed to complex numbers.",null,null],[16,"ComplexResult","","",79,null],[8,"ToTimeResult","","Specifies what the the result is if a type is transformed to time domain.",null,null],[16,"TimeResult","","Specifies what the the result is if a type is transformed to time domain.",80,null],[8,"ToFreqResult","","Specifies what the the result is if a type is transformed to frequency domain.",null,null],[16,"FreqResult","","",81,null],[8,"ToRealTimeResult","","Specifies what the the result is if a type is transformed to real numbers in time domain.",null,null],[16,"RealTimeResult","","",82,null],[8,"ScaleOps","","An operation which multiplies each vector element with a constant",null,null],[10,"scale","","Multiplies the vector element with a scalar.",83,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"OffsetOps","","An operation which adds a constant to each vector element",null,null],[10,"offset","","Adds a scalar to each vector element.",84,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ElementaryOps","","Elementary algebra on types: addition, subtraction, multiplication and division",null,null],[10,"add","","Calculates the sum of `self + summand`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",85,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"voidresult"}}],[10,"sub","","Calculates the difference of `self - subtrahend`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",85,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"voidresult"}}],[10,"mul","","Calculates the product of `self * factor`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",85,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"voidresult"}}],[10,"div","","Calculates the quotient of `self / summand`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",85,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"voidresult"}}],[8,"ElementaryWrapAroundOps","","Elementary algebra on types where the argument might contain less data points than `self`.",null,null],[10,"add_smaller","","Calculates the sum of `self + summand`. `summand` may be smaller than `self` as long as `self.len() % summand.len() == 0`. THe result is the same as it would be if you would repeat `summand` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",86,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"voidresult"}}],[10,"sub_smaller","","Calculates the sum of `self - subtrahend`. `subtrahend` may be smaller than `self` as long as `self.len() % subtrahend.len() == 0`. THe result is the same as it would be if you would repeat `subtrahend` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",86,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"voidresult"}}],[10,"mul_smaller","","Calculates the sum of `self - factor`. `factor` may be smaller than `self` as long as `self.len() % factor.len() == 0`. THe result is the same as it would be if you would repeat `factor` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",86,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"voidresult"}}],[10,"div_smaller","","Calculates the sum of `self - divisor`. `divisor` may be smaller than `self` as long as `self.len() % divisor.len() == 0`. THe result is the same as it would be if you would repeat `divisor` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",86,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"voidresult"}}],[8,"TrigOps","","Trigonometry methods.",null,null],[10,"sin","","Calculates the sine of each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"cos","","Calculates the cosine of each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"tan","","Calculates the tangent of each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"asin","","Calculates the principal value of the inverse sine of each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"acos","","Calculates the principal value of the inverse cosine of each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"atan","","Calculates the principal value of the inverse tangent of each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"sinh","","Calculates the hyperbolic sine each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"cosh","","Calculates the hyperbolic cosine each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"tanh","","Calculates the hyperbolic tangent each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"asinh","","Calculates the principal value of the inverse hyperbolic sine of each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"acosh","","Calculates the principal value of the inverse hyperbolic cosine of each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[10,"atanh","","Calculates the principal value of the inverse hyperbolic tangent of each element in radians.",87,{"inputs":[{"name":"self"}],"output":null}],[8,"PowerOps","","Roots, powers, exponentials and logarithms.",null,null],[10,"sqrt","","Gets the square root of all vector elements.",88,{"inputs":[{"name":"self"}],"output":null}],[10,"square","","Squares all vector elements.",88,{"inputs":[{"name":"self"}],"output":null}],[10,"root","","Calculates the n-th root of every vector element.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"powf","","Raises every vector element to a floating point power.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"ln","","Computes the principal value of natural logarithm of every element in the vector.",88,{"inputs":[{"name":"self"}],"output":null}],[10,"exp","","Calculates the natural exponential for every vector element.",88,{"inputs":[{"name":"self"}],"output":null}],[10,"log","","Calculates the logarithm to the given base for every vector element.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[10,"expf","","Calculates the exponential to the given base for every vector element.",88,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[8,"ReorganizeDataOps","","This trait allows to reorganize the data by changing positions of the individual elements.",null,null],[10,"reverse","","Reverses the data inside the vector.",89,{"inputs":[{"name":"self"}],"output":null}],[10,"swap_halves","","This function swaps both halves of the vector. This operation is also called FFT shift Use it after a `plain_fft` to get a spectrum which is centered at `0 Hz`.",89,{"inputs":[{"name":"self"}],"output":null}],[8,"ReorganizeDataOpsBuffered","","This trait allows to reorganize the data by changing positions of the individual elements. Deprecated since it requires a buffer which is never used since there would be no beneifit in using it.",null,null],[10,"swap_halves_b","","This function swaps both halves of the vector. This operation is also called FFT shift Use it after a `plain_fft` to get a spectrum which is centered at `0 Hz`.",90,{"inputs":[{"name":"self"},{"name":"b"}],"output":null}],[8,"InsertZerosOps","","A trait to insert zeros into the data at some specified positions.",null,null],[10,"zero_pad","","Appends zeros add the end of the vector until the vector has the size given in the points argument. If `points` smaller than the `self.len()` then this operation won't do anything, however in future it will raise an error.",91,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"paddingoption"}],"output":{"name":"voidresult"}}],[10,"zero_interleave","","Interleaves zeros `factor - 1`times after every vector element, so that the resulting vector will have a length of `self.len() * factor`.",91,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"voidresult"}}],[8,"InsertZerosOpsBuffered","","A trait to insert zeros into the data at some specified positions. A buffer is used for types which can't be resized and/or to speed up the calculation.",null,null],[10,"zero_pad_b","","Appends zeros add the end of the vector until the vector has the size given in the points argument. If `points` smaller than the `self.len()` then this operation won't do anything, however in future it will raise an error",92,{"inputs":[{"name":"self"},{"name":"b"},{"name":"usize"},{"name":"paddingoption"}],"output":null}],[10,"zero_interleave_b","","Interleaves zeros `factor - 1`times after every vector element, so that the resulting vector will have a length of `self.len() * factor`.",92,{"inputs":[{"name":"self"},{"name":"b"},{"name":"u32"}],"output":null}],[8,"SplitOps","","Splits the data into several smaller pieces of equal size.",null,null],[10,"split_into","","Splits the vector into several smaller vectors. `self.len()` must be dividable by `targets.len()` without a remainder and this condition must be true too `targets.len() > 0`. # Failures TransRes may report the following `ErrorReason` members:",93,null],[8,"MergeOps","","Merges several pieces of equal size into one data chunk.",null,null],[10,"merge","","Merges several vectors into `self`. All vectors must have the same size and at least one vector must be provided. # Failures TransRes may report the following `ErrorReason` members:",94,null],[8,"DiffSumOps","","A trait to calculate the diff (1st derivative in a discrete number space) or cumulative sum  (integral  in a discrete number space).",null,null],[10,"diff","","Calculates the delta of each elements to its previous element. This will decrease the vector length by one point.",95,{"inputs":[{"name":"self"}],"output":null}],[10,"diff_with_start","","Calculates the delta of each elements to its previous element. The first element will remain unchanged.",95,{"inputs":[{"name":"self"}],"output":null}],[10,"cum_sum","","Calculates the cumulative sum of all elements. This operation undoes the `diff_with_start`operation.",95,{"inputs":[{"name":"self"}],"output":null}],[8,"DotProductOps","","An operation which multiplies each vector element with a constant",null,null],[16,"Output","","",96,null],[10,"dot_product","","Calculates the dot product of self and factor. Self and factor remain unchanged.",96,null],[8,"PreciseDotProductOps","","An operation which multiplies each vector element with a constant",null,null],[16,"Output","","",97,null],[10,"dot_product_prec","","Calculates the dot product of self and factor using a more precise but slower algorithm. Self and factor remain unchanged.",97,null],[8,"MapInplaceOps","","Operations which allow to iterate over the vector and to derive results or to change the vector.",null,null],[10,"map_inplace","","Transforms all vector elements using the function `map`.",98,{"inputs":[{"name":"self"},{"name":"a"},{"name":"f"}],"output":null}],[8,"MapInplaceNoArgsOps","","Operations which allow to iterate over the vector change the vector contents.",null,null],[10,"map_inplace","","Transforms all vector elements using the function `map`.",99,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"MapAggregateOps","","Operations which allow to iterate over the vector and to derive results.",null,null],[16,"Output","","",100,null],[10,"map_aggregate","","Transforms all vector elements using the function `map` and then aggregates all the results with `aggregate`. `aggregate` must be a commutativity and associativity; that's because there is no guarantee that the numbers will be aggregated in any deterministic order.",100,null],[8,"StatisticsOps","","This trait offers operations to calculate statistics about the data in a type.",null,null],[10,"statistics","","Calculates the statistics of the data.",101,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"statistics_split","","Calculates the statistics of the data contained in the vector as if the vector would have been split into `len` pieces. `self.len` should be dividable by `len` without a remainder, but this isn't enforced by the implementation.",101,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[10,"statistics_splitted","","",101,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[8,"SumOps","","Offers operations to calculate the sum or the sum of squares.",null,null],[10,"sum","","Calculates the sum of the data contained in the vector. # Example",102,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"sum_sq","","Calculates the sum of the squared data contained in the vector. # Example",102,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"Stats","","Operations on statistics.",null,null],[10,"empty","","Creates an empty statistics struct.",103,{"inputs":[],"output":{"name":"self"}}],[10,"empty_vec","","Creates a vector of empty statistics structs.",103,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[10,"invalid","","Creates a statistics struct which resembles an invalid result.",103,{"inputs":[],"output":{"name":"self"}}],[10,"merge","","Merges several statistics into one.",103,null],[10,"merge_cols","","Merges several vectors of statistics into one vector.",103,null],[10,"add","","Adds a new value to the statistics, all statistic fields get updated.",103,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"}],"output":null}],[8,"PreciseStatisticsOps","","Offers the same functionality as the `StatisticsOps` trait but the statistics are calculated in a more precise (and slower) way.",null,null],[10,"statistics_prec","","Calculates the statistics of the data contained in the vector using a more precise but slower algorithm.",104,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"statistics_splitted_prec","","Calculates the statistics of the data contained in the vector as if the vector would have been split into `len` pieces using a more precise but slower algorithm. `self.len` should be dividable by `len` without a remainder, but this isn't enforced by the implementation.",104,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"vec"}}],[8,"PreciseSumOps","","Offers the same functionality as the `SumOps` trait but the sums are calculated in a more precise (and slower) way.",null,null],[10,"sum_prec","","Calculates the sum of the data contained in the vector using a more precise but slower algorithm. # Example",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"sum_sq_prec","","Calculates the sum of the squared data contained in the vector using a more precise but slower algorithm. # Example",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"PreciseStats","","A trait for statistics which allows to add new values in a way so that the numerical uncertainty has less impact on the final results.",null,null],[10,"add_prec","","Adds a new values to the statistics using the Kahan summation algorithm described here: https://en.wikipedia.org/wiki/Kahan_summation_algorithm",106,{"inputs":[{"name":"self"},{"name":"t"},{"name":"usize"},{"name":"t"},{"name":"t"}],"output":null}],[8,"Buffer","","A buffer which can be used by other types. Types will call buffers to create new arrays. A buffer may can implement any buffering strategy.",null,null],[10,"get","","Asks the buffer for new storage. `len` is the minimum size the storage needs to provide. S doesn't need to have be initialized with any default value.",107,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[10,"construct_new","","Asks the buffer for newly created storage which isn't buffered.",107,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"s"}}],[10,"free","","Returns a storage to the buffer. The buffer isn't required to free it and might just reuse the storage.",107,{"inputs":[{"name":"self"},{"name":"s"}],"output":null}],[10,"alloc_len","","Returns the allocated length of all storage within this buffer.",107,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[8,"NumberSpace","","Number space (real or complex) information.",null,null],[10,"is_complex","","",108,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_complex","","For implementations which track meta data at runtime this method may be implemented to transition between different states. For all other implementations they may leave this empty.",108,{"inputs":[{"name":"self"}],"output":null}],[10,"to_real","","See `RealNumberSpace` for some more details.",108,{"inputs":[{"name":"self"}],"output":null}],[8,"Domain","","Domain (time or frequency) information.",null,null],[10,"domain","","",109,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[10,"to_freq","","See `RealNumberSpace` for some more details.",109,{"inputs":[{"name":"self"}],"output":null}],[10,"to_time","","See `RealNumberSpace` for some more details.",109,{"inputs":[{"name":"self"}],"output":null}],[8,"RealNumberSpace","","Trait for types containing real data.",null,null],[8,"ComplexNumberSpace","","Trait for types containing complex data.",null,null],[8,"TimeDomain","","Trait for types containing time domain data.",null,null],[8,"FrequencyDomain","","Trait for types containing frequency domain data.",null,null],[8,"ToSimd","","Associates a number type with a SIMD register type.",null,null],[16,"Reg","","Type for the SIMD register on the CPU.",110,null],[16,"GpuReg","","Type for the SIMD register on the GPU. Defaults to an arbitrary type if GPU support is not compiled in.",110,null],[8,"RealNumber","","A real floating pointer number intended to abstract over `f32` and `f64`.",null,null],[8,"Zero","","This trait is necessary so that we can define zero for types outside this crate. It calls the `num_traits::Zero` trait where possible.",null,null],[10,"zero","","",111,{"inputs":[],"output":{"name":"self"}}],[11,"zero","basic_dsp_vector::numbers","",36,{"inputs":[],"output":{"name":"self"}}],[11,"from","basic_dsp_vector","",112,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"from","","",113,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"from","","",114,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"from","","",115,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"clone","basic_dsp_vector::combined_ops","",30,{"inputs":[{"name":"self"}],"output":{"name":"operation"}}],[11,"extend","","Extends the operation to operate on one more vector.",116,{"inputs":[{"name":"self"},{"name":"ni2"},{"name":"di2"}],"output":{"name":"preparedoperation2"}}],[11,"add_ops","","Adds new operations which will be executed with the next call to `exec`",116,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"preparedoperation1"}}],[11,"add_enum_op","","Allows to directly push an `Operation` enum to a `PreparedOperation1`. This mainly exists as interop between Rust and other languages.",116,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"exec","","Executes all recorded operations on the input vectors.",116,{"inputs":[{"name":"self"},{"name":"b"},{"name":"dspvec"}],"output":{"name":"result"}}],[11,"add_ops","","Adds new operations which will be executed with the next call to `exec`",117,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"preparedoperation2"}}],[11,"add_enum_op","","Allows to directly push an `Operation` enum to a `PreparedOperation1`. This mainly exists as interop between Rust and other languages.",117,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"exec","","Executes all recorded operations on the input vectors.",117,{"inputs":[{"name":"self"},{"name":"b"},{"name":"dspvec"},{"name":"dspvec"}],"output":{"name":"result"}}],[11,"extend","","Extends the operation to operate on one more vector.",118,{"inputs":[{"name":"self"},{"name":"dspvec"}],"output":{"name":"multioperation2"}}],[11,"get","","Executes all recorded operations on the stored vector.",118,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"add_ops","","Adds new operations which will be executed with the next call to `get`",118,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"multioperation1"}}],[11,"add_enum_op","","Allows to directly push an `Operation` enum to a `MultiOperation1`. This mainly exists as interop between Rust and other languages.",118,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"get","","Executes all recorded operations on the stored vector.",119,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"result"}}],[11,"add_ops","","Adds new operations which will be executed with the next call to `get`",119,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"multioperation2"}}],[11,"add_enum_op","","Allows to directly push an `Operation` enum to a `MultiOperation1`. This mainly exists as interop between Rust and other languages.",119,{"inputs":[{"name":"self"},{"name":"operation"}],"output":null}],[11,"rededicate_from_force","","",120,{"inputs":[{"name":"identifier"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",120,{"inputs":[{"name":"identifier"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",121,{"inputs":[{"name":"identifier"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",121,{"inputs":[{"name":"identifier"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",122,{"inputs":[{"name":"identifier"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",122,{"inputs":[{"name":"identifier"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",123,{"inputs":[{"name":"identifier"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",123,{"inputs":[{"name":"identifier"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",124,{"inputs":[{"name":"identifier"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",124,{"inputs":[{"name":"identifier"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"offset","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"scale","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"offset","","",125,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"scale","","",125,{"inputs":[{"name":"self"},{"name":"complex"}],"output":null}],[11,"sin","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"cos","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"tan","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"asin","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"acos","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"atan","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"sinh","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"cosh","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"tanh","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"asinh","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"acosh","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"atanh","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"sqrt","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"square","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"root","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"powf","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"ln","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"exp","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"log","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"expf","","",125,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"abs","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"map_inplace","","",125,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"map_inplace","","",125,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"multiply_complex_exponential","","",125,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":null}],[11,"conj","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"add","","",125,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"sub","","",125,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"mul","","",125,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"div","","",125,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"voidresult"}}],[11,"domain","","",125,{"inputs":[{"name":"self"}],"output":{"name":"datadomain"}}],[11,"is_complex","","",125,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clone_from","","",125,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"add_points","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"sub_points","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"div_points","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"mul_points","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"to_complex","","",125,{"inputs":[{"name":"self"}],"output":{"name":"transres"}}],[11,"magnitude","","",125,null],[11,"magnitude_squared","","",125,null],[11,"to_real","","",125,null],[11,"to_imag","","",125,null],[11,"phase","","",125,null],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",116,{"inputs":[{"name":"self"}],"output":{"name":"preparedoperation1"}}],[11,"clone","","",117,{"inputs":[{"name":"self"}],"output":{"name":"preparedoperation2"}}],[11,"rededicate_from_force","basic_dsp_vector","",112,{"inputs":[{"name":"dspvec"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",112,{"inputs":[{"name":"dspvec"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",114,{"inputs":[{"name":"dspvec"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",114,{"inputs":[{"name":"dspvec"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",113,{"inputs":[{"name":"dspvec"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",113,{"inputs":[{"name":"dspvec"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",115,{"inputs":[{"name":"dspvec"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",115,{"inputs":[{"name":"dspvec"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"rededicate_from_force","","",126,{"inputs":[{"name":"dspvec"}],"output":{"name":"self"}}],[11,"rededicate_with_runtime_data","","",126,{"inputs":[{"name":"dspvec"},{"name":"bool"},{"name":"datadomain"}],"output":{"name":"self"}}],[11,"decode","basic_dsp_vector::numbers","",36,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"default","","",36,{"inputs":[],"output":{"name":"complex"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"neg","","",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",36,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",36,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",36,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"one","","",36,{"inputs":[],"output":{"name":"complex"}}],[11,"hash","","",36,null],[11,"div","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"encode","","",36,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",36,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",36,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",36,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",36,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",36,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",36,null],[11,"from_polar","","Convert a polar representation into a complex number.",36,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",36,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",36,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",36,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Statistics"],[3,"RealOrComplexData"],[3,"TimeOrFrequencyData"],[3,"DspVec"],[3,"MultiCoreSettings"],[4,"ErrorReason"],[4,"PaddingOption"],[4,"DataDomain"],[3,"TypeMetaData"],[3,"SingleBuffer"],[3,"RealData"],[3,"ComplexData"],[3,"TimeData"],[3,"FrequencyData"],[3,"ForeignWindowFunction"],[8,"WindowFunction"],[3,"TriangularWindow"],[3,"HammingWindow"],[3,"ForeignRealConvolutionFunction"],[3,"ForeignComplexConvolutionFunction"],[8,"RealImpulseResponse"],[8,"RealFrequencyResponse"],[8,"ComplexImpulseResponse"],[8,"ComplexFrequencyResponse"],[3,"RealTimeLinearTableLookup"],[3,"RealFrequencyLinearTableLookup"],[3,"ComplexTimeLinearTableLookup"],[3,"ComplexFrequencyLinearTableLookup"],[3,"RaisedCosineFunction"],[3,"SincFunction"],[4,"Operation"],[8,"PreparedOperation1Exec"],[8,"PreparedOperation2Exec"],[8,"IdentifierOps"],[8,"Float"],[8,"One"],[3,"Complex"],[8,"Num"],[8,"ToSlice"],[8,"ToSliceMut"],[8,"Resize"],[8,"ToDspVector"],[8,"ToRealVector"],[8,"ToComplexVector"],[8,"InterleaveToVector"],[8,"FromVector"],[8,"ComplexIndex"],[8,"ComplexIndexMut"],[8,"MetaData"],[8,"ResizeOps"],[8,"Vector"],[8,"GetMetaData"],[8,"ComplexToRealTransformsOps"],[8,"ComplexToRealTransformsOpsBuffered"],[8,"ComplexToRealGetterOps"],[8,"ComplexToRealSetterOps"],[8,"ComplexOps"],[8,"RealToComplexTransformsOps"],[8,"RealToComplexTransformsOpsBuffered"],[8,"RealOps"],[8,"ModuloOps"],[8,"ApproximatedOps"],[8,"FrequencyDomainOperations"],[8,"TimeDomainOperations"],[8,"TimeToFrequencyDomainOperations"],[8,"SymmetricTimeToFrequencyDomainOperations"],[8,"FrequencyToTimeDomainOperations"],[8,"SymmetricFrequencyToTimeDomainOperations"],[8,"CrossCorrelationArgumentOps"],[8,"CrossCorrelationOps"],[8,"Convolution"],[8,"ConvolutionOps"],[8,"FrequencyMultiplication"],[8,"InterpolationOps"],[8,"RealInterpolationOps"],[8,"RededicateOps"],[8,"RededicateForceOps"],[8,"RededicateToOps"],[8,"ToRealResult"],[8,"ToComplexResult"],[8,"ToTimeResult"],[8,"ToFreqResult"],[8,"ToRealTimeResult"],[8,"ScaleOps"],[8,"OffsetOps"],[8,"ElementaryOps"],[8,"ElementaryWrapAroundOps"],[8,"TrigOps"],[8,"PowerOps"],[8,"ReorganizeDataOps"],[8,"ReorganizeDataOpsBuffered"],[8,"InsertZerosOps"],[8,"InsertZerosOpsBuffered"],[8,"SplitOps"],[8,"MergeOps"],[8,"DiffSumOps"],[8,"DotProductOps"],[8,"PreciseDotProductOps"],[8,"MapInplaceOps"],[8,"MapInplaceNoArgsOps"],[8,"MapAggregateOps"],[8,"StatisticsOps"],[8,"SumOps"],[8,"Stats"],[8,"PreciseStatisticsOps"],[8,"PreciseSumOps"],[8,"PreciseStats"],[8,"Buffer"],[8,"NumberSpace"],[8,"Domain"],[8,"ToSimd"],[8,"Zero"],[6,"RealTimeVec"],[6,"ComplexTimeVec"],[6,"RealFreqVec"],[6,"ComplexFreqVec"],[3,"PreparedOperation1"],[3,"PreparedOperation2"],[3,"MultiOperation1"],[3,"MultiOperation2"],[6,"RealTimeIdent"],[6,"RealFreqIdent"],[6,"ComplexTimeIdent"],[6,"ComplexFreqIdent"],[6,"GenDspIdent"],[3,"Identifier"],[6,"GenDspVec"]]};
searchIndex["crossbeam"] = {"doc":"Support for concurrent and parallel programming.","items":[[3,"Scope","crossbeam","",null,null],[3,"ScopedJoinHandle","","A handle to a scoped thread",null,null],[5,"scope","","Create a new `scope`, for deferred destructors.",null,{"inputs":[{"name":"f"}],"output":{"name":"r"}}],[5,"spawn_unsafe","","Like `std::thread::spawn`, but without the closure bounds.",null,{"inputs":[{"name":"f"}],"output":{"name":"joinhandle"}}],[0,"mem","","Memory management for concurrent data structures",null,null],[3,"CachePadded","crossbeam::mem","Pad `T` to the length of a cacheline.",null,null],[0,"epoch","","Epoch-based memory management",null,null],[3,"Atomic","crossbeam::mem::epoch","Like `std::sync::atomic::AtomicPtr`.",null,null],[3,"Guard","","An RAII-style guard for pinning the current epoch.",null,null],[3,"Owned","","Like `Box<T>`: an owned, heap-allocated data value of type `T`.",null,null],[3,"Shared","","Like `&'a T`: a shared reference valid for lifetime `'a`.",null,null],[5,"pin","","Pin the current epoch.",null,{"inputs":[],"output":{"name":"guard"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"null","","",0,{"inputs":[],"output":{"name":"atomic"}}],[11,"new","","Create a new atomic pointer",0,{"inputs":[{"name":"t"}],"output":{"name":"atomic"}}],[11,"load","","Do an atomic load with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"store","","Do an atomic store with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"store_and_ref","","Do an atomic store with the given memory ordering, immediately yielding a shared reference to the pointer that was stored.",0,{"inputs":[{"name":"self"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"shared"}}],[11,"store_shared","","Do an atomic store of a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"}],"output":null}],[11,"cas","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"result"}}],[11,"cas_and_ref","","Do a compare-and-set from a `Shared` to an `Owned` pointer with the given memory ordering, immediatley acquiring a new `Shared` reference to the previously-owned pointer if successful.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"owned"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"result"}}],[11,"cas_shared","","Do a compare-and-set from a `Shared` to another `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"option"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"swap","","Do an atomic swap with an `Owned` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"swap_shared","","Do an atomic swap with a `Shared` pointer with the given memory ordering.",0,{"inputs":[{"name":"self"},{"name":"option"},{"name":"ordering"},{"name":"guard"}],"output":{"name":"option"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"unlinked","","Assert that the value is no longer reachable from a lock-free data structure and should be collected when sufficient epochs have passed.",1,{"inputs":[{"name":"self"},{"name":"shared"}],"output":null}],[11,"migrate_garbage","","Move the thread-local garbage into the global set of garbage.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Move `t` to a new heap allocation.",2,{"inputs":[{"name":"t"}],"output":{"name":"owned"}}],[11,"into_inner","","Move data out of the owned box, deallocating the box.",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"shared"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"deref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"as_raw","","",3,null],[11,"fmt","crossbeam::mem","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"zeroed","","A const fn equivalent to mem::zeroed().",4,{"inputs":[],"output":{"name":"cachepadded"}}],[11,"new","","Wrap `t` with cacheline padding.",4,{"inputs":[{"name":"t"}],"output":{"name":"cachepadded"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[8,"ZerosValid","","Types for which mem::zeroed() is safe.",null,null],[0,"sync","crossbeam","Synchronization primitives.",null,null],[3,"MsQueue","crossbeam::sync","A Michael-Scott lock-free queue, with support for blocking `pop`s.",null,null],[3,"AtomicOption","","",null,null],[3,"TreiberStack","","Treiber's lock-free stack.",null,null],[3,"SegQueue","","A Michael-Scott queue that allocates \"segments\" (arrays of nodes) for efficiency.",null,null],[3,"ArcCell","","A type providing atomic storage and retrieval of an `Arc<T>`.",null,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",5,{"inputs":[],"output":{"name":"atomicoption"}}],[11,"swap_box","","",5,{"inputs":[{"name":"self"},{"name":"box"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"swap","","",5,{"inputs":[{"name":"self"},{"name":"t"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"take","","",5,{"inputs":[{"name":"self"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",6,{"inputs":[],"output":{"name":"msqueue"}}],[11,"push","","Add `t` to the back of the queue, possibly waking up threads blocked on `pop`.",6,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"is_empty","","Check if this queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"try_pop","","Attempt to dequeue from the front.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop","","Dequeue an element from the front of the queue, blocking if the queue is empty.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty stack.",7,{"inputs":[],"output":{"name":"treiberstack"}}],[11,"push","","Push `t` on top of the stack.",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"pop","","Attempt to pop the top element of the stack. Deprecated method, use try_pop",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"try_pop","","Attempt to pop the top element of the stack.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_empty","","Check if this queue is empty.",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new, empty queue.",8,{"inputs":[],"output":{"name":"segqueue"}}],[11,"push","","Add `t` to the back of the queue.",8,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Attempt to dequeue from the front.",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"chase_lev","","A lock-free concurrent work-stealing deque",null,null],[3,"Worker","crossbeam::sync::chase_lev","Worker half of the work-stealing deque. This worker has exclusive access to one side of the deque, and uses `push` and `try_pop` method to manipulate it.",null,null],[3,"Stealer","","The stealing half of the work-stealing deque. Stealers have access to the opposite end of the deque from the worker, and they only have access to the `steal` method.",null,null],[4,"Steal","","When stealing some data, this is an enumeration of the possible outcomes.",null,null],[13,"Empty","","The deque was empty at the time of stealing",9,null],[13,"Abort","","The stealer lost the race for stealing data, and a retry may return more data.",9,null],[13,"Data","","The stealer has successfully stolen some data.",9,null],[5,"deque","","Creates a new empty deque",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"steal"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"push","","Pushes data onto the front of this work queue.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"try_pop","","Pops data off the front of the work queue, returning `None` on an empty queue.",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"steal","","Steals work off the end of the queue (opposite of the worker's end)",11,{"inputs":[{"name":"self"}],"output":{"name":"steal"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"stealer"}}],[11,"fmt","crossbeam::sync","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `ArcCell`.",12,{"inputs":[{"name":"arc"}],"output":{"name":"arccell"}}],[11,"set","","Stores a new value in the `ArcCell`, returning the previous value.",12,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"name":"arc"}}],[11,"get","","Returns a copy of the value stored by the `ArcCell`.",12,{"inputs":[{"name":"self"}],"output":{"name":"arc"}}],[11,"fmt","crossbeam","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"defer","","Schedule code to be executed when exiting the scope.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"spawn","","Create a scoped thread.",13,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"scopedjoinhandle"}}],[11,"join","","Join the scoped thread, returning the result it produced.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"thread","","Get the underlying thread handle.",14,{"inputs":[{"name":"self"}],"output":{"name":"thread"}}],[11,"drop","","",13,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"Atomic"],[3,"Guard"],[3,"Owned"],[3,"Shared"],[3,"CachePadded"],[3,"AtomicOption"],[3,"MsQueue"],[3,"TreiberStack"],[3,"SegQueue"],[4,"Steal"],[3,"Worker"],[3,"Stealer"],[3,"ArcCell"],[3,"Scope"],[3,"ScopedJoinHandle"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"stat","libc","",null,null],[12,"st_dev","","",0,null],[12,"st_ino","","",0,null],[12,"st_mode","","",0,null],[12,"st_nlink","","",0,null],[12,"st_uid","","",0,null],[12,"st_gid","","",0,null],[12,"st_rdev","","",0,null],[12,"st_size","","",0,null],[12,"st_atime","","",0,null],[12,"st_mtime","","",0,null],[12,"st_ctime","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"timezone","","",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"chmod","","",null,null],[5,"wchmod","","",null,null],[5,"mkdir","","",null,null],[5,"wrmdir","","",null,null],[5,"fstat","","",null,null],[5,"stat","","",null,null],[5,"wstat","","",null,null],[5,"wutime","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"wopen","","",null,null],[5,"creat","","",null,null],[5,"access","","",null,null],[5,"chdir","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"execvpe","","",null,null],[5,"getcwd","","",null,null],[5,"getpid","","",null,null],[5,"isatty","","",null,null],[5,"lseek","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"unlink","","",null,null],[5,"write","","",null,null],[5,"commit","","",null,null],[5,"get_osfhandle","","",null,null],[5,"open_osfhandle","","",null,null],[5,"setlocale","","",null,null],[5,"wsetlocale","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"c_char","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"wchar_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"off_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"time64_t","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_TEXT","","",null,null],[17,"O_BINARY","","",null,null],[17,"O_NOINHERIT","","",null,null],[17,"O_TRUNC","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EDEADLK","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EILSEQ","","",null,null],[17,"STRUNCATE","","",null,null]],"paths":[[3,"stat"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"]]};
searchIndex["nodrop"] = {"doc":"","items":[[3,"NoDrop","nodrop","A type holding T that will not call its destructor on drop",null,null],[11,"new","","Create a new NoDrop.",0,{"inputs":[{"name":"t"}],"output":{"name":"nodrop"}}],[11,"into_inner","","Extract the inner value.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref_mut","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[3,"NoDrop"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[3,"BigInt","num","A big signed integer type.",null,null],[3,"BigUint","","A big unsigned integer type.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[3,"Complex","","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",1,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",5,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",6,{"inputs":[],"output":{"name":"self"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",12,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",12,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",12,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",13,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",13,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",13,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",13,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",13,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",13,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",13,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",13,null],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",15,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",16,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"pow","num","",null,null],[5,"pow","num::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"checked_pow","num","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"bigint","","",null,null],[0,"complex","","",null,null],[0,"integer","","",null,null],[0,"iter","","",null,null],[0,"traits","","",null,null],[0,"rational","","",null,null],[11,"new","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",17,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",17,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",17,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",17,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",17,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",17,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",17,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",17,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"encode","","",18,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",18,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"to_i64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"checked_add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"checked_div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"default","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"zero","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"zero","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"shr","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"one","","",18,{"inputs":[],"output":{"name":"biguint"}}],[11,"one","","",17,{"inputs":[],"output":{"name":"bigint"}}],[11,"to_bigint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_biguint","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_i64","","",18,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",18,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_i64","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shl","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"checked_mul","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"abs","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",18,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"neg","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u64"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u64"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from","","",18,{"inputs":[{"name":"u8"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u16"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"u32"}],"output":{"name":"biguint"}}],[11,"from","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"biguint"}}],[11,"from","","",17,{"inputs":[{"name":"i8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"i32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"isize"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u8"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u16"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"u32"}],"output":{"name":"bigint"}}],[11,"from","","",17,{"inputs":[{"name":"usize"}],"output":{"name":"bigint"}}],[11,"hash","","",18,null],[11,"hash","","",17,null],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_rem","","",18,null],[11,"div_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",18,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",18,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"div_rem","","",17,null],[11,"div_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",17,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",17,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",18,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",18,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",18,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",18,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",18,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",18,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[3,"BigInt"],[3,"BigUint"]]};
searchIndex["num_bigint"] = {"doc":"A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).","items":[[3,"BigUint","num_bigint","A big unsigned integer type.",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",0,null],[13,"Other","","",0,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",1,null],[13,"NoSign","","",1,null],[13,"Plus","","",1,null],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"encode","","",2,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"is_zero","","",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",2,{"inputs":[],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",2,{"inputs":[{"name":"self"}],"output":{"name":"biguint"}}],[11,"checked_add","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",2,null],[11,"div_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",2,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",2,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",2,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",2,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"to_biguint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a `BigUint`.",2,{"inputs":[{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",2,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",2,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",2,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",2,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"encode","","",1,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"neg","","Negate Sign value.",1,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"mul","","",1,{"inputs":[{"name":"self"},{"name":"sign"}],"output":{"name":"sign"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"__s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",3,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"is_zero","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",3,{"inputs":[],"output":{"name":"bigint"}}],[11,"abs","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"is_positive","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bigint"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",3,null],[11,"div_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",3,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_i64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from_i64","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f64","","",3,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"i32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"isize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u16"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"biguint"}],"output":{"name":"self"}}],[11,"to_bigint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_bigint","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_biguint","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",3,{"inputs":[{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",3,{"inputs":[{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",3,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",3,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",3,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",3,null],[11,"to_str_radix","","Returns the integer formatted as a string in the given radix. `radix` must be in the range `[2, 36]`.",3,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"string"}}],[11,"sign","","Returns the sign of the `BigInt` as a `Sign`.",3,{"inputs":[{"name":"self"}],"output":{"name":"sign"}}],[11,"parse_bytes","","Creates and initializes a `BigInt`.",3,null],[11,"bits","","Determines the fewest bits necessary to express the `BigInt`, not including the sign.",3,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",3,{"inputs":[{"name":"self"},{"name":"bigint"}],"output":{"name":"option"}}],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num_bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[6,"BigDigit","","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num_bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its size is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails when the bound is zero.",6,{"inputs":[{"name":"self"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower bound is inclusive; the upper bound is exclusive. Fails when the upper bound is not greater than the lower bound.",6,{"inputs":[{"name":"self"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",0,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}]],"paths":[[4,"ParseBigIntError"],[4,"Sign"],[3,"BigUint"],[3,"BigInt"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"powf","","Raises `self` to a floating point power.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"powc","","Raises `self` to a complex power.",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"expf","","Raises a floating point number to the complex power `self`.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current machine. If not possible on the particular architecture returns same as get() which is the logical CPUs.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","items":[[5,"div_rem","num_integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The result is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus. Returns `(quotient, remainder)`.",0,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns `(quotient, remainder)`.",0,null]],"paths":[[8,"Integer"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting at start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rangestep"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"self"},{"name":"__st"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or reducing.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a reduced copy of self.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number, with division rounded towards zero.",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",0,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"ratio"}}],[11,"from","","",0,null],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"is_zero","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",0,{"inputs":[{"name":"self"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ratio"}}],[11,"is_positive","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_negative","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"into","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"self"}],"output":{"name":"str"}}]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,{"inputs":[{"name":"t"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",4,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",5,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",6,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",7,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",8,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",9,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",10,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",11,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",12,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",13,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",14,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",14,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",14,{"inputs":[{"name":"self"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `Float::infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `Float::neg_infinity()`.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error. This produces a more accurate result with better performance than a separate multiplication operation followed by an add.",14,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",14,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_degrees","","Converts radians to degrees.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"to_radians","","Converts degrees to radians.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",14,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",14,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`. The floating point encoding is documented in the [Reference][floating-point].",14,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",15,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",15,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",15,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",16,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, the `None` is returned.",17,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",18,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",19,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",19,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"self"}}],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",20,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",20,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["odds"] = {"doc":"Odds and ends — collection miscellania.","items":[[3,"Fix","odds","Fixpoint combinator for rust closures, generalized over the return type.",null,null],[12,"0","","",0,null],[5,"fix","","Fixpoint combinator for rust closures, generalized over the return type.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"r"}}],[5,"ref_eq","","Compare if a and b are equal as pointers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"bool"}}],[5,"ptr_eq","","Compare if a and b are equal pointers.",null,null],[5,"raw_byte_repr","","Safe to use with any wholly initialized memory `ptr`",null,null],[5,"get_unchecked","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"get_unchecked_mut","","Use `debug_assert!` to check indexing in debug mode. In release mode, no checks are done.",null,null],[5,"debug_assert_unreachable","","Act as `debug_assert!` in debug mode, asserting that this point is not reached.",null,null],[5,"slice_unchecked","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"slice_unchecked_mut","","Check slicing bounds in debug mode, otherwise just act as an unchecked slice call.",null,null],[5,"ref_slice","","Create a length 1 slice out of a reference",null,null],[5,"ref_slice_mut","","Create a length 1 mutable slice out of a reference",null,null],[11,"call","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"r"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"char","","Extra functions for `char`",null,null],[3,"EncodeUtf8Error","odds::char","Placeholder",null,null],[5,"encode_utf8","","Encode a char into buf using UTF-8.",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"encodeutf8error"}}],[0,"string","odds","Extensions to `&str` and `String`",null,null],[3,"Prefixes","odds::string","Iterator of all non-empty prefixes",null,null],[3,"Suffixes","","Iterator of all non-empty suffixes",null,null],[3,"Substrings","","Iterator of all non-empty substrings",null,null],[3,"CharChunks","","An iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",null,null],[3,"CharWindows","","An iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",null,null],[3,"CharStr","","A single-char string.",null,null],[8,"StrExt","","Extra methods for `str`",null,null],[10,"rep","","Repeat the string `n` times.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"string"}}],[10,"append","","Requires `feature=\"std\"`",2,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"string"}}],[10,"prefixes","","All non-empty prefixes",2,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[10,"suffixes","","All non-empty suffixes",2,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[10,"substrings","","Produce all non-empty substrings",2,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[10,"is_acceptable_index","","Return `true` if `index` is acceptable for slicing the string.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[8,"StrSlice","","Extension trait for `str` for string slicing without panicking",null,null],[10,"get_slice","","Return a slice of the string, if it is in bounds /and on character boundaries/, otherwise return `None`",3,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"option"}}],[8,"StringExt","","Extra methods for `String`",null,null],[10,"insert_str","","Panics if `index` is out of bounds.",4,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"str"}],"output":null}],[8,"StrChunksWindows","","Extension traits for the `char_chunks` and `char_windows` methods",null,null],[10,"char_chunks","","Return an iterator that splits the string in substrings of each `n` `char` per substring. The last item will contain the remainder if `n` does not divide the char length of the string evenly.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charchunks"}}],[10,"char_windows","","Return an iterator that produces substrings of each `n` `char` per substring in a sliding window that advances one char at a time.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"charwindows"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"prefixes"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"suffixes"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"substrings"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"charchunks"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"charwindows"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",10,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"charstr"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new string from `c`.",11,{"inputs":[{"name":"char"}],"output":{"name":"charstr"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[0,"vec","odds","Extensions to `Vec`",null,null],[5,"vec","odds::vec","Create a new vec from the iterable",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[8,"VecExt","","Extra methods for `Vec<T>`",null,null],[10,"splice","","Remove elements in a range, and insert from an iterator in their place.",12,{"inputs":[{"name":"self"},{"name":"r"},{"name":"i"}],"output":null}],[10,"retain_mut","","Retains only the elements specified by the predicate.",12,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[8,"VecFindRemove","","",null,null],[16,"Item","","",13,null],[10,"find_remove","","Linear search for the first element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind_remove","","Linear search for the last element equal to `elt` and remove it if found.",13,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[0,"slice","odds","Extra functions for slices",null,null],[3,"MendSlices","odds::slice","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"RevSlice","","A reversed view of a slice.",null,null],[5,"shared_prefix","","Return the end index of the longest shared (equal) prefix of `a` and `b`.",null,null],[5,"rotate_left","","Rotate `steps` towards lower indices.",null,null],[5,"split_aligned_for","","Split the input slice into three chunks, so that the middle chunk is a slice of a larger \"block size\" (for example T could be u64) that is correctly aligned for `T`.",null,null],[0,"unalign","","",null,null],[3,"UnalignedIter","odds::slice::unalign","An iterator of `T` (by value) where each value read using an unaligned load.",null,null],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"from_raw_parts","","Create an `UnalignedIter` from `ptr` and `end`, which must be spaced an whole number of `T` offsets apart.",14,null],[11,"from_slice","","Create an `UnalignedIter` out of the slice of data, which iterates first in blocks of `T` (unaligned loads), and then leaves a tail of the remaining bytes.",14,null],[11,"tail","","Return a byte iterator of the remaining tail of the iterator; this can be called at any time, but in particular when the iterator has returned None.",14,{"inputs":[{"name":"self"}],"output":{"name":"slicecopyiter"}}],[11,"has_tail","","Return `true` if the tail is not empty.",14,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"peek_next","","Return the next iterator element, without stepping the iterator.",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"iter","odds::slice","",null,null],[3,"SliceCopyIter","odds::slice::iter","Slice (contiguous data) iterator.",null,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","",15,null],[11,"into_raw","","Return the start, end pointer of the iterator",15,null],[11,"next","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",15,null],[11,"count","","",15,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"last","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",15,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",15,null],[11,"default","","Create an empty `SliceCopyIter`.",15,{"inputs":[],"output":{"name":"self"}}],[8,"SliceFind","odds::slice","Element-finding methods for slices",null,null],[16,"Item","","",16,null],[10,"find","","Linear search for the first occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[10,"rfind","","Linear search for the last occurrence  `elt` in the slice.",16,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[8,"SliceFindSplit","","Element-finding methods for slices",null,null],[16,"Item","","",17,null],[10,"find_split","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split","","Linear search for the last occurrence  `elt` in the slice.",17,null],[10,"find_split_mut","","Linear search for the first occurrence  `elt` in the slice.",17,null],[10,"rfind_split_mut","","Linear search for the last occurrence  `elt` in the slice.",17,null],[8,"SliceIterExt","","Extra iterator adaptors for iterators of slice elements.",null,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",18,{"inputs":[{"name":"self"}],"output":{"name":"mendslices"}}],[8,"MendSlice","","A trait for items that can maybe be joined together.",null,null],[8,"Pod","","\"plain old data\": Types that we can stick arbitrary bit patterns into, and thus use them as blocks in `split_aligned_for` or in `UnalignedIter`.",null,null],[11,"find","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"rfind","","",19,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"option"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","Return the length of the slice.",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_mut","","Get element at index `i`.",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"inner_ref","","",19,null],[11,"inner_mut","","",19,null],[11,"into_boxed_slice","","",19,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"iter","","Return a by-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"iter_mut","","Return a by-mutable-reference iterator",19,{"inputs":[{"name":"self"}],"output":{"name":"rev"}}],[11,"split_at","","",19,null],[11,"split_at_mut","","",19,null],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"revslice"}],"output":{"name":"bool"}}],[11,"eq","","",19,null],[11,"hash","","",19,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[11,"index_mut","","",19,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"revslice"}}],[0,"stride","odds","Slice iterator with custom step size",null,null],[3,"Stride","odds::stride","(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[11,"from_ptr_len","","Create a Stride iterator from a raw pointer.",21,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",22,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",21,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",21,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",21,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",21,null],[11,"next_back","","",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",21,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",22,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",22,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride, in effect reversing the iterator.",22,{"inputs":[{"name":"self"}],"output":null}],[11,"len","","Return the number of elements in the iterator.",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"get","","Return a reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",22,null],[11,"next_back","","",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","Return a reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"stride"}}],[11,"get_mut","","Return a mutable reference to the element of a stride at the given index, or None if the index is out of bounds.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"index_mut","","Return a mutable reference to the element at a given index.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"a"}}],[0,"prelude","odds","prelude of often used traits and functions",null,null],[8,"IndexRange","","IndexRange is implemented by Rust's built-in range types, produced by range syntax like `..`, `a..`, `..b` or `c..d`.",null,null],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"start","","Start index (inclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"end","","End index (exclusive)",23,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[3,"Fix"],[3,"EncodeUtf8Error"],[8,"StrExt"],[8,"StrSlice"],[8,"StringExt"],[8,"StrChunksWindows"],[3,"Prefixes"],[3,"Suffixes"],[3,"Substrings"],[3,"CharChunks"],[3,"CharWindows"],[3,"CharStr"],[8,"VecExt"],[8,"VecFindRemove"],[3,"UnalignedIter"],[3,"SliceCopyIter"],[8,"SliceFind"],[8,"SliceFindSplit"],[8,"SliceIterExt"],[3,"RevSlice"],[3,"MendSlices"],[3,"Stride"],[3,"StrideMut"],[8,"IndexRange"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified format configuration, returning the owned string.",4,{"inputs":[{"name":"self"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into an owned vector of bytes, returning the vector.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"characterset"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"newline"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"config"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned string.",7,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data, into an owned vector of bytes, returning the vector.",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical structure of the JSON stream. For example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming an iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack. For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the StackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON on-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"self"},{"name":"json"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"errorcode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"self"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"encodererror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",12,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact JSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level. This is safe to set during encoding.",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",17,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",17,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",17,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",17,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",17,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",17,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",17,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",17,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",17,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",17,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",17,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",17,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",17,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",17,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",17,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",17,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",17,{"inputs":[{"name":"self"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",17,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",17,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",9,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty representation for it via `Display`.",9,{"inputs":[{"name":"self"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key. Otherwise, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`. If any key is found not to exist, find_path will return None. Otherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until a value associated with the provided key is found. If no value is found or the Json value is not an Object, returns None.",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns a reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns a mutable reference to the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_object","","If the Json value is an Object, returns the associated BTreeMap. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns a reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns a mutable reference to the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_array","","If the Json value is an Array, returns the associated vector. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool. Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns (). Returns None otherwise.",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",9,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"json"}}],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"stackelement"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",18,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index. lower indices are at the bottom of the stack while higher indices are at the top.",18,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as the ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",19,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the JSON stream.",19,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",21,{"inputs":[{"name":"self"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",21,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",21,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",21,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",21,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",9,{"inputs":[{"name":"self"}],"output":{"name":"json"}}],[11,"fmt","","Encodes a json value into a string",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",24,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","Trait for reading in an encoding for deserialization.",null,null],[16,"Error","","The error type for method results.",25,null],[10,"read_nil","","Read a nil value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_usize","","Read a usize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u64","","Read a u64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u32","","Read a u32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u16","","Read a u16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_u8","","Read a u8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_isize","","Read a isize value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i64","","Read a i64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i32","","Read a i32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i16","","Read a i16 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_i8","","Read a i8 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_bool","","Read a bool value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f64","","Read a f64 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_f32","","Read a f32 value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_char","","Read a char value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_str","","Read a string value.",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"read_enum","","Read an enumeration value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","Read an enumeration value.",25,null],[10,"read_enum_variant_arg","","Read an unnamed data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","Read an enumeration value.",25,null],[10,"read_enum_struct_variant_field","","Read a named data item for an enumeration variant.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","Read an struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","Read a field for a struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","Read a tuple value.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","Read a data item for a tuple.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","Read a tuple struct value.",25,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","Read a data item for a tuple struct.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","Read an optional value.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","Read a sequence of values.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","Read an element in the sequence.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","Read an associative container (map).",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","Read the key for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","Read the value for an entry in a map.",25,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","Record a decoding error.",25,null],[8,"Encoder","","Trait for writing out an encoding when serializing.",null,null],[16,"Error","","The error type for method results.",26,null],[10,"emit_nil","","Emit a nil value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_usize","","Emit a usize value.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","Emit a u64 value.",26,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","Emit a u32 value.",26,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","Emit a u16 value.",26,{"inputs":[{"name":"self"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","Emit a u8 value.",26,{"inputs":[{"name":"self"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","Emit a isize value.",26,{"inputs":[{"name":"self"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","Emit a i64 value.",26,{"inputs":[{"name":"self"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","Emit a i32 value.",26,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","Emit a i16 value.",26,{"inputs":[{"name":"self"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","Emit a i8 value.",26,{"inputs":[{"name":"self"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","Emit a bool value.",26,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","Emit a f64 value.",26,{"inputs":[{"name":"self"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","Emit a f32 value.",26,{"inputs":[{"name":"self"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","Emit a char value.",26,{"inputs":[{"name":"self"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","Emit a string value.",26,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","Emit an enumeration value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","Emit a enumeration variant value with no or unnamed data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","Emit an unnamed data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","Emit a enumeration variant value with no or named data.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","Emit a named data item for an enumeration variant.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","Emit a struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","Emit a field item for a struct.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","Emit a tuple value.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","Emit a data item for a tuple.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","Emit a tuple struct value.",26,{"inputs":[{"name":"self"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","Emit a data item for a tuple struct.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","Emit an optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","Emit the `None` optional value.",26,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"emit_option_some","","Emit the `Some(x)` optional value.",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","Emit a sequence of values.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","Emit an element in a sequence.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","Emit an associative container (map).",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","Emit the key for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","Emit the value for an entry in a map.",26,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","Trait for deserializing a type.",null,null],[10,"decode","","Deserialize a value using a `Decoder`.",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","Trait for serializing a type.",null,null],[10,"encode","","Serialize a value using an `Encoder`.",28,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","Trait with helper functions for implementing `Decodable`.",null,null],[10,"read_to_vec","","Read a sequence into a vector.",29,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","Trait with helper functions for implementing `Encodable`.",null,null],[10,"emit_from_vec","","Emit a vector as a sequence.",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rustfft"] = {"doc":"","items":[[3,"FFT","rustfft","",null,null],[5,"dft","","",null,null],[11,"new","","Creates a new FFT context that will process signal of length `len`. If `inverse` is `true`, then this struct will run inverse FFTs. This implementation of the FFT doesn't do any scaling on both the forward and backward transforms, so doing a forward then backward FFT on a signal will scale the signal by its length.",0,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"process","","Runs the FFT on the input `signal` buffer, and places the output in the `spectrum` buffer.",0,null]],"paths":[[3,"FFT"]]};
initSearch(searchIndex);
