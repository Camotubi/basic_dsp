var N = null;var searchIndex = {};
searchIndex["basic_dsp"]={"doc":"","items":[[0,"conv_types","basic_dsp","Types around a convolution, see also https://en.wikipedia.org/wiki/Convolution.",N,N],[8,"RealImpulseResponse","basic_dsp::conv_types","A convolution function in time domain and real number space",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",0,[[["self"]],["bool"]]],[10,"calc","","Calculates the convolution for a data point",0,[[["self"],["t"]],["t"]]],[8,"RealFrequencyResponse","","A convolution function in frequency domain and real number space",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",1,[[["self"]],["bool"]]],[10,"calc","","Calculates the convolution for a data point",1,[[["self"],["t"]],["t"]]],[8,"ComplexImpulseResponse","","A convolution function in time domain and complex number space",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",2,[[["self"]],["bool"]]],[10,"calc","","Calculates the convolution for a data point",2,[[["self"],["t"]],["complex"]]],[8,"ComplexFrequencyResponse","","A convolution function in frequency domain and complex number space",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",3,[[["self"]],["bool"]]],[10,"calc","","Calculates the convolution for a data point",3,[[["self"],["t"]],["complex"]]],[3,"RealTimeLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",N,N],[3,"RealFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",N,N],[3,"ComplexTimeLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",N,N],[3,"ComplexFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",N,N],[3,"RaisedCosineFunction","","Raised cosine function according to `https://en.wikipedia.org/wiki/Raised-cosine_filter`",N,N],[3,"SincFunction","","Sinc function according to `https://en.wikipedia.org/wiki/Sinc_function`",N,N],[0,"meta","basic_dsp","",N,N],[3,"Real","basic_dsp::meta","Marker for types containing real data.",N,N],[3,"Complex","","Marker for types containing complex data.",N,N],[3,"RealOrComplex","","Marker for types containing real or complex data.",N,N],[12,"is_complex_current","","",4,N],[3,"Time","","Marker for types containing time data.",N,N],[3,"Freq","","Marker for types containing frequency data.",N,N],[3,"TimeOrFreq","","Marker for types containing time or frequency data.",N,N],[12,"domain_current","","",5,N],[0,"window_functions","basic_dsp","This mod contains a definition for window functions and provides implementations for a few standard windows. See the `WindowFunction` type for more information.",N,N],[8,"WindowFunction","basic_dsp::window_functions","A window function for FFT windows. See `https://en.wikipedia.org/wiki/Window_function` for details. Window functions should document if they aren't applicable for Inverse Fourier Transformations.",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around the y axis or not. Symmetry is defined as `self.window(x) == self.window(-x)`.",6,[[["self"]],["bool"]]],[10,"window","","Calculates a point of the window function. Callers will ensure that `n <= length`.",6,[[["self"],["usize"],["usize"]],["t"]]],[3,"TriangularWindow","","A triangular window: `https://en.wikipedia.org/wiki/Window_function#Triangular_window`",N,N],[3,"HammingWindow","","A generalized Hamming window: `https://en.wikipedia.org/wiki/Window_function#Hamming_window`",N,N],[0,"numbers","basic_dsp","Traits from the `num` crate which are used inside `basic_dsp` and extensions to those traits.",N,N],[8,"DspNumber","basic_dsp::numbers","A trait for a numeric value which at least supports a subset of the operations defined in this crate. Can be an integer or a floating point number. In order to have support for all operations in this crate a must implement the `RealNumber`.",N,N],[8,"ToSimd","","Associates a number type with a SIMD register type.",N,N],[16,"RegFallback","","Type for the SIMD register on the CPU.",7,N],[16,"RegSse","","",7,N],[16,"RegAvx","","",7,N],[16,"RegAvx512","","",7,N],[16,"GpuReg","","Type for the SIMD register on the GPU. Defaults to an arbitrary type if GPU support is not compiled in.",7,N],[8,"RealNumber","","A real floating pointer number intended to abstract over `f32` and `f64`.",N,N],[8,"Zero","","This trait is necessary so that we can define zero for types outside this crate. It calls the `num_traits::Zero` trait where possible.",N,N],[10,"zero","","",8,[[],["self"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",9,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",9,[[["str"],["u32"]],["result"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",10,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",10,[[["self"]],["bool"]]],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",11,[[],["self"]]],[10,"infinity","","Returns the infinite value.",11,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",11,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",11,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",11,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",11,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",11,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",11,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",11,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",11,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",11,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",11,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",11,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",11,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",11,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",11,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",11,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",11,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",11,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",11,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",11,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",11,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",11,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",11,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",11,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",11,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",11,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",11,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",11,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",11,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",11,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",11,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",11,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",11,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",11,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",11,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",11,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",11,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",11,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",11,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",11,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",11,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",11,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",11,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",11,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",11,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",11,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",11,N],[3,"Complex","","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",12,N],[12,"im","","Imaginary portion of the complex number",12,N],[6,"ComplexFreqVec64","basic_dsp","A vector with complex numbers in frequency domain.",N,N],[3,"NoTradeBufferBurrow","","Buffer borrow type for `NoTradeBufferBurrow`.",N,N],[6,"ScalarResult","","Scalar result or a reason in case of an error.",N,N],[8,"ResizeBufferedOps","","Operations to resize a data type.",N,N],[10,"resize_b","","Changes `self.len()`. If `self.is_complex()` is true then `len` must be an even number. `len > self.alloc_len()` is only possible if the underlying storage or the buffer supports resizing.",13,[[["self"],["b"],["usize"]],["result",["errorreason"]]]],[8,"RededicateToOps","","This trait allows to change a data type. The operations will convert a type to a different one and set `self.len()` to zero. However `self.allocated_len()` will remain unchanged. The use case for this is to allow to reuse the memory of a vector for different operations.",N,N],[10,"rededicate","","Converts `Self` inot `Other`.",14,[[["self"]],["other"]]],[8,"ToSlice","","A trait to convert a type into a slice.",N,N],[10,"to_slice","","Convert to a slice.",15,N],[10,"len","","Length of a slice.",15,[[["self"]],["usize"]]],[10,"is_empty","","Indicates whether or not this storage type is empty.",15,[[["self"]],["bool"]]],[10,"alloc_len","","Gets the allocated length of a storage. It's expected that `self.alloc_len() >= self.len()` in all cases.",15,[[["self"]],["usize"]]],[10,"try_resize","","Resizes the storage to support at least `len` elements or returns an error if resizing isn't supported.",15,[[["self"],["usize"]],["result",["errorreason"]]]],[6,"RealFreqVecSlice32","","A vector with real numbers in frequency domain.",N,N],[8,"RededicateForceOps","","This trait allows to change a data type and performs the Conversion without any checks. `RededicateOps` provides the same functionality but performs runtime checks to avoid that data is interpreted the wrong way.",N,N],[10,"rededicate_from_force","","Make `Other` a `Self` without performing any checks.",16,[[["other"]],["self"]]],[10,"rededicate_with_runtime_data","","Make `Other` a `Self` without performing any checks.",16,[[["other"],["bool"],["datadomain"]],["self"]]],[8,"FrequencyMultiplication","","Provides a frequency response multiplication operations.",N,N],[10,"multiply_frequency_response","","Multiplies `self` with the frequency response function `frequency_response`.",17,N],[6,"TransRes","","Result for operations which transform a type (most commonly the type is a vector). On success the transformed type is returned. On failure it contains an error reason and the original type with with invalid data which still can be used in order to avoid memory allocation.",N,N],[8,"ComplexNumberSpace","","Trait for types containing complex data.",N,N],[6,"ComplexFreqVec32","","A vector with complex numbers in frequency domain.",N,N],[17,"STATS_VEC_CAPACTIY","","The maximum `len` for any of the `*split` methods.",N,N],[8,"StatisticsOps","","This trait offers operations to calculate statistics about the data in a type.",N,N],[16,"Result","","",18,N],[10,"statistics","","Calculates the statistics of the data.",18,N],[6,"ComplexFreqVecSlice64","","A vector with complex numbers in frequency domain.",N,N],[8,"ComplexIndexMut","","Like `std::ops::IndexMut` but with a different method name so that it can be used to implement a additional range accessor for complex data.",N,N],[10,"complex_mut","","The method for complex indexing",19,N],[8,"MetaData","","A trait which provides information about number space and domain.",N,N],[10,"domain","","The domain in which the data vector resides. Basically specifies the x-axis and the type of operations which are valid on this vector.",20,[[["self"]],["datadomain"]]],[10,"is_complex","","Indicates whether the vector contains complex data. This also specifies the type of operations which are valid on this vector.",20,[[["self"]],["bool"]]],[3,"SingleBufferBurrow","","Buffer borrow type for `SingleBuffer`.",N,N],[8,"FromVector","","Retrieves the underlying storage from a vector.",N,N],[16,"Output","","Type of the underlying storage of a vector.",21,N],[10,"get","","Gets the underlying storage and the number of elements which contain valid.",21,N],[10,"to_slice","","Gets the underlying slice of a vector.",21,N],[4,"DataDomain","","The domain of a data vector",N,N],[13,"Time","","Time domain, the x-axis is in [s].",22,N],[13,"Frequency","","Frequency domain, the x-axis is in [Hz].",22,N],[8,"ToDspVector","","Conversion from a generic data type into a dsp vector which tracks its meta information (domain and number space) only at runtime. See `ToRealVector` and `ToComplexVector` for alternatives which track most of the meta data with the type system and therefore avoid runtime errors.",N,N],[10,"to_gen_dsp_vec","","Create a new generic vector. `delta` can be changed after construction with a call of `set_delta`.",23,[[["self"],["bool"],["datadomain"]],["dspvec",["realorcomplex","timeorfreq"]]]],[10,"to_dsp_vec","","Create a new vector from the given meta data. The meta data can be retrieved from an existing vector. If no existing vector is available then one of the other constructor methods should be used.",23,[[["self"],["typemetadata"]],["dspvec"]]],[8,"Convolution","","Provides a convolution operations.",N,N],[10,"convolve","","Convolves `self` with the convolution function `impulse_response`. For performance consider to to use `FrequencyMultiplication` instead of this operation depending on `len`.",24,N],[8,"ToTimeResult","","Specifies what the the result is if a type is transformed to time domain.",N,N],[16,"TimeResult","","Specifies what the the result is if a type is transformed to time domain.",25,N],[8,"FrequencyDomainOperations","","Defines all operations which are valid on `DataVecs` containing frequency domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in frequency domain and complex number space.",N,N],[10,"mirror","","This function mirrors the spectrum vector to transform a symmetric spectrum into a full spectrum with the DC element at index 0 (no FFT shift/swap halves).",26,N],[10,"fft_shift","","Swaps vector halves after a Fourier Transformation.",26,N],[10,"ifft_shift","","Swaps vector halves before an Inverse Fourier Transformation.",26,N],[8,"PreciseSumOps","","Offers the same functionality as the `SumOps` trait but the sums are calculated in a more precise (and slower) way.",N,N],[10,"sum_prec","","Calculates the sum of the data contained in the vector using a more precise but slower algorithm. # Example",27,[[["self"]],["t"]]],[10,"sum_sq_prec","","Calculates the sum of the squared data contained in the vector using a more precise but slower algorithm. # Example",27,[[["self"]],["t"]]],[8,"FrequencyDomain","","Trait for types containing frequency domain data.",N,N],[6,"GenDspVecSlice32","","A vector with no information about number space or domain at compile time.",N,N],[8,"ReorganizeDataOps","","This trait allows to reorganize the data by changing positions of the individual elements.",N,N],[10,"reverse","","Reverses the data inside the vector.",28,N],[10,"swap_halves","","This function swaps both halves of the vector. This operation is also called FFT shift Use it after a `plain_fft` to get a spectrum which is centered at `0 Hz`.",28,N],[8,"SplitOps","","Splits the data into several smaller pieces of equal size.",N,N],[10,"split_into","","Splits the vector into several smaller vectors. `self.len()` must be dividable by `targets.len()` without a remainder and this condition must be true too `targets.len() > 0`. # Failures TransRes may report the following `ErrorReason` members:",29,N],[8,"Resize","","A trait for storage types which are known to have the capability to increase their capacity.",N,N],[10,"resize","","Resize a storage type. Must work for any value of `len`, however it's okay if after this method `self.alloc_len() > len` or in words: It's okay if the method allocates more memory than specified in the parameter.",30,N],[8,"PosEq","","Expresses at compile time that two classes could potentially represent the same number space or domain.",N,N],[6,"VoidResult","","Void/nothing in case of success or a reason in case of an error.",N,N],[8,"RealInterpolationOps","","Provides interpolation operations which are only applicable for real data vectors. # Failures All operations in this trait fail with `VectorMustBeReal` if the vector isn't in the real number space.",N,N],[10,"interpolate_hermite","","Piecewise cubic hermite interpolation between samples.",31,N],[10,"interpolate_lin","","Linear interpolation between samples.",31,N],[6,"RealFreqVec64","","A vector with real numbers in frequency domain.",N,N],[3,"NoBuffer","","This type can be used everytime the API asks for a buffer to disable any buffering.",N,N],[3,"SingleBuffer","","A buffer which stores a single vector and never shrinks.",N,N],[3,"DspVec","","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations.",N,N],[12,"data","","The underlying storage. `self.len()` should be called to find out how many elements in `data` contain valid data.",32,N],[8,"PreciseStatisticsOps","","Offers the same functionality as the `StatisticsOps` trait but the statistics are calculated in a more precise (and slower) way.",N,N],[16,"Result","","",33,N],[10,"statistics_prec","","Calculates the statistics of the data contained in the vector using a more precise but slower algorithm.",33,N],[8,"CrossCorrelationArgumentOps","","Cross-correlation of data vectors. See also https://en.wikipedia.org/wiki/Cross-correlation",N,N],[10,"prepare_argument","","Prepares an argument to be used for convolution. Preparing an argument includes two steps:",34,N],[10,"prepare_argument_padded","","Prepares an argument to be used for convolution. The argument is zero padded to length of `2 * self.points() - 1` and then the same operations are performed as described for `prepare_argument`.",34,N],[8,"ComplexToRealGetterOps","","Defines getters to get real data from complex types.",N,N],[10,"get_real","","Copies all real elements into the given vector. # Example",35,N],[10,"get_imag","","Copies all imag elements into the given vector. # Example",35,N],[10,"get_magnitude","","Copies the absolute value or magnitude of all vector elements into the given target vector. # Example",35,N],[10,"get_magnitude_squared","","Copies the absolute value squared or magnitude squared of all vector elements into the given target vector. # Example",35,N],[10,"get_phase","","Copies the phase of all elements in [rad] into the given vector. # Example",35,N],[10,"get_real_imag","","Gets the real and imaginary parts and stores them in the given vectors. See also  `get_phase` and `get_complex_abs` for further information.",35,N],[10,"get_mag_phase","","Gets the magnitude and phase and stores them in the given vectors. See also `get_real` and `get_imag` for further information.",35,N],[8,"MapInplaceOps","","Operations which allow to iterate over the vector and to derive results or to change the vector.",N,N],[10,"map_inplace","","Transforms all vector elements using the function `map`.",36,N],[8,"Stats","","Operations on statistics.",N,N],[10,"empty","","Creates an empty statistics struct.",37,[[],["self"]]],[10,"empty_vec","","Creates a vector of empty statistics structs.",37,[[["usize"]],["arrayvec"]]],[10,"invalid","","Creates a statistics struct which resembles an invalid result.",37,[[],["self"]]],[10,"merge","","Merges several statistics into one.",37,N],[10,"merge_cols","","Merges several vectors of statistics into one vector.",37,N],[10,"add","","Adds a new value to the statistics, all statistic fields get updated.",37,N],[8,"Vector","","A trait for vector types.",N,N],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",38,[[["self"]],["t"]]],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",38,N],[10,"len","","The number of valid elements in the vector. This can be changed with the `Resize` trait.",38,[[["self"]],["usize"]]],[10,"is_empty","","Indicates whether or not the vector is empty.",38,[[["self"]],["bool"]]],[10,"points","","The number of valid points. If the vector is complex then every valid point consists of two floating point numbers, while for real vectors every point only consists of one floating point number.",38,[[["self"]],["usize"]]],[10,"get_multicore_settings","","Gets the multi core settings which determine how the work is split between several cores if the amount of data gets larger.",38,[[["self"]],["multicoresettings"]]],[10,"set_multicore_settings","","Sets the multi core settings which determine how the work is split between several cores if the amount of data gets larger.",38,N],[10,"alloc_len","","Gets the number of allocated elements in the underlying vector. The allocated length may be larger than the length of valid points. In most cases you likely want to have `len`or `points` instead.",38,[[["self"]],["usize"]]],[8,"Domain","","Domain (time or frequency) information.",N,N],[10,"domain","","",39,[[["self"]],["datadomain"]]],[10,"to_freq","","See `to_complex` for some details.",39,N],[10,"to_time","","See `to_complex` for some details.",39,N],[6,"RealFreqVec32","","A vector with real numbers in frequency domain.",N,N],[8,"ComplexToRealTransformsOpsBuffered","","Defines transformations from complex to real number space.",N,N],[10,"magnitude_b","","Gets the absolute value, magnitude or norm of all vector elements. # Example",40,N],[10,"magnitude_squared_b","","Gets the square root of the absolute value of all vector elements. # Example",40,N],[10,"to_real_b","","Gets all real elements. # Example",40,N],[10,"to_imag_b","","Gets all imag elements. # Example",40,N],[10,"phase_b","","Gets the phase of all elements in [rad]. # Example",40,N],[8,"RealNumberSpace","","Trait for types containing real data.",N,N],[8,"RealToComplexTransformsOpsBuffered","","Defines transformations from real to complex number space.",N,N],[10,"to_complex_b","","Converts the real vector into a complex vector. The buffer allows this operation to succeed even if the storage type doesn't allow resizing.",41,N],[6,"ComplexTimeVec","","A vector with complex numbers in time domain.",N,N],[8,"Buffer","","A buffer which can be used by other types. Types will call buffers to create new arrays. A buffer may can implement any buffering strategy.",N,N],[16,"Borrow","","The type of the burrow which is returned.",42,N],[10,"borrow","","Asks the buffer for new storage of exactly size `len`. The returned array doesn't need to have be initialized with any default value.",42,N],[10,"alloc_len","","Returns the allocated length of all storage within this buffer.",42,[[["self"]],["usize"]]],[6,"ComplexFreqVecSlice32","","A vector with complex numbers in frequency domain.",N,N],[8,"SymmetricTimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs` containing real time domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in time domain or with `VectorMustHaveAnOddLength` if `self.points()` isn't and odd number.",N,N],[10,"plain_sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self` is symmetric around the center. This assumption isn't verified and no error is raised if the vector isn't symmetric.",43,[[["self"],["b"]],["result"]]],[10,"sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self` is symmetric around the center. This assumption isn't verified and no error is raised if the vector isn't symmetric. # Failures TransRes may report the following `ErrorReason` members:",43,[[["self"],["b"]],["result"]]],[10,"windowed_sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self` is symmetric around the center. This assumption isn't verified and no error is raised if the vector isn't symmetric. # Failures TransRes may report the following `ErrorReason` members:",43,[[["self"],["b"],["windowfunction"]],["result"]]],[8,"ComplexIndex","","Like `std::ops::Index` but with a different method name so that it can be used to implement an additional range accessor for complex data.",N,N],[16,"Output","","",44,N],[10,"complex","","The method for complex indexing",44,N],[6,"RealTimeVec32","","A vector with real numbers in time domain.",N,N],[8,"ComplexOps","","Operations on complex types.",N,N],[10,"multiply_complex_exponential","","Multiplies each vector element with `exp(j*(a*idx*self.delta() + b))` where `a` and `b` are arguments and `idx` is the index of the data points in the vector ranging from `0 to self.points() - 1`. `j` is the imaginary number and `exp` the exponential function.",45,N],[10,"conj","","Calculates the complex conjugate of the vector. # Example",45,N],[6,"ComplexFreqVec","","A vector with complex numbers in frequency domain.",N,N],[8,"RealOps","","Operations on real types.",N,N],[10,"abs","","Gets the absolute value of all vector elements. # Example",46,N],[8,"PreciseStats","","A trait for statistics which allows to add new values in a way so that the numerical uncertainty has less impact on the final results.",N,N],[10,"add_prec","","Adds a new values to the statistics using the Kahan summation algorithm described here: https://en.wikipedia.org/wiki/Kahan_summation_algorithm",47,N],[6,"GenDspVec32","","A vector with no information about number space or domain at compile time.",N,N],[8,"FrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs` containing frequency domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in frequency domain and complex number space.",N,N],[10,"plain_ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector into a time domain vector.",48,N],[10,"ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector into a time domain vector. # Example",48,N],[10,"windowed_ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector into a time domain vector and removes the FFT window.",48,N],[8,"PreciseStatisticsSplitOps","","Offers the same functionality as the `StatisticsOps` trait but the statistics are calculated in a more precise (and slower) way.",N,N],[16,"Result","","",49,N],[10,"statistics_split_prec","","Calculates the statistics of the data contained in the vector as if the vector would have been split into `len` pieces using a more precise but slower algorithm. `self.len` should be dividable by `len` without a remainder, but this isn't enforced by the implementation. For implementation reasons `len <= 16` must be true.",49,[[["self"],["usize"]],["result",["errorreason"]]]],[8,"InterpolationOps","","Provides interpolation operations for real and complex data vectors.",N,N],[10,"interpolatef","","Interpolates `self` with the convolution function `function` by the real value `interpolation_factor`. InterpolationOps is done in time domain and the argument `conv_len` can be used to balance accuracy and computational performance. A `delay` can be used to delay or phase shift the vector. The `delay` considers `self.delta()`.",50,N],[10,"interpolatei","","Interpolates `self` with the convolution function `function` by the integer value `interpolation_factor`. InterpolationOps is done in in frequency domain.",50,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["result",["errorreason"]]]],[10,"interpolate","","Interpolates the signal in frequency domain by padding it with zeros.",50,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["result",["errorreason"]]]],[10,"interpft","","Interpolates the signal in frequency domain by padding it with zeros. This function preserves the shape of the signal in frequency domain.",50,N],[10,"decimatei","","Decimates or downsamples `self`. `decimatei` is the inverse function to `interpolatei`.",50,N],[6,"RealTimeVec","","A vector with real numbers in time domain.",N,N],[8,"InsertZerosOps","","A trait to insert zeros into the data at some specified positions.",N,N],[10,"zero_pad","","Appends zeros add the end of the vector until the vector has the size given in the points argument. If `points` smaller than the `self.len()` then this operation won't do anything, however in future it will raise an error.",51,[[["self"],["usize"],["paddingoption"]],["result",["errorreason"]]]],[10,"zero_interleave","","Interleaves zeros `factor - 1`times after every vector element, so that the resulting vector will have a length of `self.len() * factor`.",51,[[["self"],["u32"]],["result",["errorreason"]]]],[6,"ComplexTimeVecSlice32","","A vector with complex numbers in time domain.",N,N],[8,"ElementaryOps","","Elementary algebra on types: addition, subtraction, multiplication and division",N,N],[10,"add","","Calculates the sum of `self + summand`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",52,[[["self"],["a"]],["result",["errorreason"]]]],[10,"sub","","Calculates the difference of `self - subtrahend`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",52,[[["self"],["a"]],["result",["errorreason"]]]],[10,"mul","","Calculates the product of `self * factor`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",52,[[["self"],["a"]],["result",["errorreason"]]]],[10,"div","","Calculates the quotient of `self / summand`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",52,[[["self"],["a"]],["result",["errorreason"]]]],[8,"StatisticsSplitOps","","This trait offers operations to calculate statistics about the data in a type.",N,N],[16,"Result","","",53,N],[10,"statistics_split","","Calculates the statistics of the data contained in the vector as if the vector would have been split into `len` pieces. `self.len` should be dividable by `len` without a remainder, but this isn't enforced by the implementation. For implementation reasons `len <= 16` must be true.",53,[[["self"],["usize"]],["result",["errorreason"]]]],[8,"SymmetricFrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs` containing frequency domain data and the data is assumed to half of complex conjugate symmetric spectrum round 0 Hz where the 0 Hz element itself is real. # Failures All operations in this trait set `self.len()` to `0` if the first element (0Hz) isn't real.",N,N],[10,"plain_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation under the assumption that `self` contains half of a symmetric spectrum starting from 0 Hz. This assumption isn't verified and no error is raised if the spectrum isn't symmetric. The reason for this is that there is no robust verification possible.",54,[[["self"],["b"]],["result"]]],[10,"sifft","","Performs a Symmetric Inverse Fast Fourier Transformation under the assumption that `self` contains half of a symmetric spectrum starting from 0 Hz. This assumption isn't verified and no error is raised if the spectrum isn't symmetric. The reason for this is that there is no robust verification possible.",54,[[["self"],["b"]],["result"]]],[10,"windowed_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation (SIFFT) and removes the FFT window. The SIFFT is performed under the assumption that `self` contains half of a symmetric spectrum starting from 0 Hz. This assumption isn't verified and no error is raised if the spectrum isn't symmetric. The reason for this is that there is no robust verification possible.",54,[[["self"],["b"],["windowfunction"]],["result"]]],[8,"SumOps","","Offers operations to calculate the sum or the sum of squares.",N,N],[10,"sum","","Calculates the sum of the data contained in the vector. # Example",55,[[["self"]],["t"]]],[10,"sum_sq","","Calculates the sum of the squared data contained in the vector. # Example",55,[[["self"]],["t"]]],[4,"ErrorReason","","Enumeration of all error reasons",N,N],[13,"InputMustHaveTheSameSize","","The operations requires all inputs to have the same size, in most cases this means that the following must be true: `self.len()` == `argument.len()`",56,N],[13,"InputMetaDataMustAgree","","The operations requires all inputs to have the same meta data. For a vector this means that the following must be true: `self.is_complex()` == `argument.is_complex()` && `self.domain()` == `argument.domain()` && `self.delta()`== `argument.domain()`; Consider to convert one of the inputs so that this condition is true. The necessary operations may include FFT/IFFT, complex/real conversion and resampling.",56,N],[13,"InputMustBeComplex","","The operation requires the input to be complex.",56,N],[13,"InputMustBeReal","","The operation requires the input to be real.",56,N],[13,"InputMustBeInTimeDomain","","The operation requires the input to be in time domain.",56,N],[13,"InputMustBeInFrequencyDomain","","The operation requires the input to be in frequency domain.",56,N],[13,"InvalidArgumentLength","","The arguments have an invalid length to perform the operation. The operations documentation should have more information about the requirements. Please open a defect if this isn't the case.",56,N],[13,"InputMustBeConjSymmetric","","The operations is only valid if the data input contains half of a symmetric spectrum. The symmetry definition follows soon however more important is that the element at 0 Hz which happens to be the first vector element must be real. The error message is raised if this is violated, the rest of the definition is only listed here for completeness snce it can't be checked. The required symmetry for a vector is that for every point `vector[x].conj() == vector[-x]`(pseudocode) where `x` is the x-axis position relative to 0 Hz and `conj` is the complex conjugate.",56,N],[13,"InputMustHaveAnOddLength","","`self.points()` must be an odd number.",56,N],[13,"ArgumentFunctionMustBeSymmetric","","The function passed as argument must be symmetric",56,N],[13,"InvalidNumberOfArgumentsForCombinedOp","","The number of arguments passed into a combined operation methods doesn't match with the number of arguments specified previously via the `add_op` methods.",56,N],[13,"InputMustNotBeEmpty","","The operation isn't specified for an empty vector.",56,N],[13,"InputMustHaveAnEvenLength","","Given input must have an even length.",56,N],[13,"TypeCanNotResize","","The arguments would require that the type allocates larger memory. But the type can't do that.",56,N],[8,"DotProductOps","","An operation which multiplies each vector element with a constant",N,N],[16,"Output","","",57,N],[10,"dot_product","","Calculates the dot product of self and factor. Self and factor remain unchanged.",57,N],[6,"RealFreqVec","","A vector with real numbers in frequency domain.",N,N],[6,"GenDspVecSlice64","","A vector with no information about number space or domain at compile time.",N,N],[3,"NoBufferBurrow","","Buffer borrow type for `NoBuffer`.",N,N],[8,"TrigOps","","Trigonometry methods.",N,N],[10,"sin","","Calculates the sine of each element in radians.",58,N],[10,"cos","","Calculates the cosine of each element in radians.",58,N],[10,"tan","","Calculates the tangent of each element in radians.",58,N],[10,"asin","","Calculates the principal value of the inverse sine of each element in radians.",58,N],[10,"acos","","Calculates the principal value of the inverse cosine of each element in radians.",58,N],[10,"atan","","Calculates the principal value of the inverse tangent of each element in radians.",58,N],[10,"sinh","","Calculates the hyperbolic sine each element in radians.",58,N],[10,"cosh","","Calculates the hyperbolic cosine each element in radians.",58,N],[10,"tanh","","Calculates the hyperbolic tangent each element in radians.",58,N],[10,"asinh","","Calculates the principal value of the inverse hyperbolic sine of each element in radians.",58,N],[10,"acosh","","Calculates the principal value of the inverse hyperbolic cosine of each element in radians.",58,N],[10,"atanh","","Calculates the principal value of the inverse hyperbolic tangent of each element in radians.",58,N],[8,"ApproximatedOps","","Recommended to be only used with the CPU feature flags `sse` or `avx`.",N,N],[10,"ln_approx","","Computes the principal value approximation of natural logarithm of every element in the vector.",59,N],[10,"exp_approx","","Calculates the natural exponential approximation for every vector element.",59,N],[10,"sin_approx","","Calculates the sine approximation of each element in radians.",59,N],[10,"cos_approx","","Calculates the cosine approximation of each element in radians",59,N],[10,"log_approx","","Calculates the approximated logarithm to the given base for every vector element.",59,N],[10,"expf_approx","","Calculates the approximated exponential to the given base for every vector element.",59,N],[10,"powf_approx","","Raises every vector element to approximately a floating point power.",59,N],[6,"ComplexTimeVec64","","A vector with complex numbers in time domain.",N,N],[8,"ToRealTimeResult","","Specifies what the the result is if a type is transformed to real numbers in time domain.",N,N],[16,"RealTimeResult","","",60,N],[8,"ToComplexVector","","Conversion from a generic data type into a dsp vector with complex data.",N,N],[10,"to_complex_time_vec","","Create a new vector in complex number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",61,[[["self"]],["dspvec",["complex","time"]]]],[10,"to_complex_freq_vec","","Create a new vector in complex number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",61,[[["self"]],["dspvec",["complex","freq"]]]],[8,"ComplexToRealSetterOps","","Defines setters to create complex data from real data.",N,N],[10,"set_real_imag","","Overrides the `self` vectors data with the real and imaginary data in the given vectors. `real` and `imag` must have the same size.",62,[[["self"],["a"],["a"]],["result",["errorreason"]]]],[10,"set_mag_phase","","Overrides the `self` vectors data with the magnitude and phase data in the given vectors. Note that `self` vector will immediately convert the data into a real and imaginary representation of the complex numbers which is its default format. `mag` and `phase` must have the same size.",62,[[["self"],["a"],["a"]],["result",["errorreason"]]]],[8,"GetMetaData","","Gets the meta data of a type. This can be used to create a new type with the same meta data. # Example",N,N],[10,"get_meta_data","","Gets a copy of the vector meta data. This can be used to create new types with the same meta data.",63,[[["self"]],["typemetadata"]]],[8,"OffsetOps","","An operation which adds a constant to each vector element",N,N],[10,"offset","","Adds a scalar to each vector element.",64,N],[8,"TimeDomain","","Trait for types containing time domain data.",N,N],[6,"RealTimeVecSlice32","","A vector with real numbers in time domain.",N,N],[8,"ToDspVectorPar","","Conversion from a generic data type into a dsp vector which tracks its meta information (domain and number space) only at runtime. See `ToRealVector` and `ToComplexVector` for alternatives which track most of the meta data with the type system and therefore avoid runtime errors.",N,N],[10,"to_gen_dsp_vec_par","","Create a new generic vector. `delta` can be changed after construction with a call of `set_delta`.",65,[[["self"],["bool"],["datadomain"]],["dspvec",["realorcomplex","timeorfreq"]]]],[10,"to_dsp_vec_par","","Create a new vector from the given meta data. The meta data can be retrieved from an existing vector. If no existing vector is available then one of the other constructor methods should be used.",65,[[["self"],["typemetadata"]],["dspvec"]]],[3,"FixedLenBufferBurrow","","Buffer borrow type for `SingleBuffer`.",N,N],[8,"CrossCorrelationOps","","A trait to calculate the cross correlation.",N,N],[10,"correlate","","Calculates the correlation between `self` and `other`. `other` needs to be a time vector which went through one of the prepare functions `prepare_argument` or `prepare_argument_padded`. See also the trait description for more details.",66,[[["self"],["b"],["a"]],["result",["errorreason"]]]],[8,"ModuloOps","","Operations on real types.",N,N],[10,"wrap","","Each value in the vector is dividable by the divisor and the remainder is stored in the resulting vector. This the same a modulo operation or to phase wrapping.",67,N],[10,"unwrap","","This function corrects the jumps in the given vector which occur due to wrap or modulo operations. This will undo a wrap operation only if the deltas are smaller than half the divisor.",67,N],[8,"ToFreqResult","","Specifies what the the result is if a type is transformed to frequency domain.",N,N],[16,"FreqResult","","",68,N],[8,"ScaleOps","","An operation which multiplies each vector element with a constant",N,N],[10,"scale","","Multiplies the vector element with a scalar.",69,N],[3,"TypeMetaData","","Holds meta data about a type.",N,N],[6,"GenDspVec","","A vector with no information about number space or domain at compile time.",N,N],[6,"ComplexTimeVecSlice64","","A vector with complex numbers in time domain.",N,N],[8,"ComplexToRealTransformsOps","","Defines transformations from complex to real number space.",N,N],[10,"magnitude","","Gets the absolute value, magnitude or norm of all vector elements. # Example",70,N],[10,"magnitude_squared","","Gets the square root of the absolute value of all vector elements. # Example",70,N],[10,"to_real","","Gets all real elements. # Example",70,N],[10,"to_imag","","Gets all imag elements. # Example",70,N],[10,"phase","","Gets the phase of all elements in [rad]. # Example",70,N],[8,"MapAggregateOps","","Operations which allow to iterate over the vector and to derive results.",N,N],[16,"Output","","",71,N],[10,"map_aggregate","","Transforms all vector elements using the function `map` and then aggregates all the results with `aggregate`. `aggregate` must be a commutativity and associativity; that's because there is no guarantee that the numbers will be aggregated in any deterministic order.",71,N],[8,"ConvolutionOps","","Provides a convolution operation for types which at some point are slice based.",N,N],[10,"convolve_signal","","Convolves `self` with the convolution function `impulse_response`. For performance it's recommended to use multiply both vectors in frequency domain instead of this operation.",72,[[["self"],["b"],["a"]],["result",["errorreason"]]]],[8,"PreciseDotProductOps","","An operation which multiplies each vector element with a constant",N,N],[16,"Output","","",73,N],[10,"dot_product_prec","","Calculates the dot product of self and factor using a more precise but slower algorithm. Self and factor remain unchanged.",73,N],[6,"ComplexTimeVec32","","A vector with complex numbers in time domain.",N,N],[8,"ToSliceMut","","A trait to convert a type into a mutable slice.",N,N],[10,"to_slice_mut","","Convert to a mutable slice.",74,N],[8,"ToComplexResult","","Specifies what the the result is if a type is transformed to complex numbers.",N,N],[16,"ComplexResult","","",75,N],[8,"ToRealVector","","Conversion from a generic data type into a dsp vector with real data.",N,N],[10,"to_real_time_vec","","Create a new vector in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",76,[[["self"]],["dspvec",["real","time"]]]],[10,"to_real_freq_vec","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",76,[[["self"]],["dspvec",["real","freq"]]]],[6,"GenDspVec64","","A vector with no information about number space or domain at compile time.",N,N],[8,"RededicateOps","","This trait allows to change a data type. The operations will convert a type to a different one and set `self.len()` to zero. However `self.allocated_len()` will remain unchanged. The use case for this is to allow to reuse the memory of a vector for different operations.",N,N],[10,"rededicate_from","","Make `Other` a `Self`. # Example",77,[[["other"]],["self"]]],[8,"PowerOps","","Roots, powers, exponentials and logarithms.",N,N],[10,"sqrt","","Gets the square root of all vector elements.",78,N],[10,"square","","Squares all vector elements.",78,N],[10,"root","","Calculates the n-th root of every vector element.",78,N],[10,"powf","","Raises every vector element to a floating point power.",78,N],[10,"ln","","Computes the principal value of natural logarithm of every element in the vector.",78,N],[10,"exp","","Calculates the natural exponential for every vector element.",78,N],[10,"log","","Calculates the logarithm to the given base for every vector element.",78,N],[10,"expf","","Calculates the exponential to the given base for every vector element.",78,N],[8,"ToRealVectorPar","","Conversion from a generic data type into a dsp vector with real data.",N,N],[10,"to_real_time_vec_par","","Create a new vector in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",79,[[["self"]],["dspvec",["real","time"]]]],[10,"to_real_freq_vec_par","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",79,[[["self"]],["dspvec",["real","freq"]]]],[3,"Statistics","","Statistics about numeric data",N,N],[12,"sum","","Sum of all values",80,N],[12,"count","","How many numbers have been considered for the stats",80,N],[12,"average","","Average value",80,N],[12,"rms","","Root-mean-square or rms over all values.",80,N],[12,"min","","The smallest value.",80,N],[12,"min_index","","The index of the smallest value.",80,N],[12,"max","","The largest value.",80,N],[12,"max_index","","The index of the largest value.",80,N],[8,"TimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs` containing time domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in time domain.",N,N],[10,"plain_fft","","Performs a Fast Fourier Transformation transforming a time domain vector into a frequency domain vector.",81,N],[10,"fft","","Performs a Fast Fourier Transformation transforming a time domain vector into a frequency domain vector. # Example",81,N],[10,"windowed_fft","","Applies a FFT window and performs a Fast Fourier Transformation transforming a time domain vector into a frequency domain vector.",81,N],[8,"InsertZerosOpsBuffered","","A trait to insert zeros into the data at some specified positions. A buffer is used for types which can't be resized and/or to speed up the calculation.",N,N],[10,"zero_pad_b","","Appends zeros add the end of the vector until the vector has the size given in the points argument. If `points` smaller than the `self.len()` then this operation will return an error.",82,[[["self"],["b"],["usize"],["paddingoption"]],["result",["errorreason"]]]],[10,"zero_interleave_b","","Interleaves zeros `factor - 1`times after every vector element, so that the resulting vector will have a length of `self.len() * factor`.",82,N],[4,"PaddingOption","","An option which defines how a vector should be padded",N,N],[13,"End","","Appends zeros to the end of the vector.",83,N],[13,"Surround","","Surrounds the vector with zeros at the beginning and at the end.",83,N],[13,"Center","","Inserts zeros in the center of the vector",83,N],[3,"MultiCoreSettings","","Holds parameters which specify how multiple cores are used to execute an operation.",N,N],[12,"core_limit","","All operations will be limited to not create more threads than specified here",84,N],[12,"med_dual_core_threshold","","",84,N],[12,"med_multi_core_threshold","","",84,N],[12,"large_dual_core_threshold","","",84,N],[12,"large_multi_core_threshold","","",84,N],[8,"TimeDomainOperations","","Defines all operations which are valid on `DataVecs` containing time domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in time domain.",N,N],[10,"apply_window","","Applies a window to the data vector.",85,N],[10,"unapply_window","","Removes a window from the data vector.",85,N],[6,"RealTimeVec64","","A vector with real numbers in time domain.",N,N],[6,"StatsVec","","Alias for a vector of any statistical information.",N,N],[8,"MergeOps","","Merges several pieces of equal size into one data chunk.",N,N],[10,"merge","","Merges several vectors into `self`. All vectors must have the same size and at least one vector must be provided. # Failures TransRes may report the following `ErrorReason` members:",86,N],[6,"RealFreqVecSlice64","","A vector with real numbers in frequency domain.",N,N],[8,"ElementaryWrapAroundOps","","Elementary algebra on types where the argument might contain less data points than `self`.",N,N],[10,"add_smaller","","Calculates the sum of `self + summand`. `summand` may be smaller than `self` as long as `self.len() % summand.len() == 0`. THe result is the same as it would be if you would repeat `summand` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",87,[[["self"],["a"]],["result",["errorreason"]]]],[10,"sub_smaller","","Calculates the sum of `self - subtrahend`. `subtrahend` may be smaller than `self` as long as `self.len() % subtrahend.len() == 0`. THe result is the same as it would be if you would repeat `subtrahend` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",87,[[["self"],["a"]],["result",["errorreason"]]]],[10,"mul_smaller","","Calculates the sum of `self - factor`. `factor` may be smaller than `self` as long as `self.len() % factor.len() == 0`. THe result is the same as it would be if you would repeat `factor` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",87,[[["self"],["a"]],["result",["errorreason"]]]],[10,"div_smaller","","Calculates the sum of `self - divisor`. `divisor` may be smaller than `self` as long as `self.len() % divisor.len() == 0`. THe result is the same as it would be if you would repeat `divisor` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",87,[[["self"],["a"]],["result",["errorreason"]]]],[8,"BufferBorrow","","A \"slice-like\" type which also allows to",N,N],[10,"trade","","Moves the content of this slice into `storage`. This operation might just copy all contents into `storage` or",88,N],[8,"RealToComplexTransformsOps","","Defines transformations from real to complex number space.",N,N],[10,"to_complex","","Converts the real vector into a complex vector.",89,[[["self"]],["result"]]],[8,"ToComplexVectorPar","","Conversion from a generic data type into a dsp vector with complex data.",N,N],[10,"to_complex_time_vec_par","","Create a new vector in complex number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",90,[[["self"]],["dspvec",["complex","time"]]]],[10,"to_complex_freq_vec_par","","Create a new vector in complex number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",90,[[["self"]],["dspvec",["complex","freq"]]]],[8,"DiffSumOps","","A trait to calculate the diff (1st derivative in a discrete number space) or cumulative sum (integral  in a discrete number space).",N,N],[10,"diff","","Calculates the delta of each elements to its previous element. This will decrease the vector length by one point.",91,N],[10,"diff_with_start","","Calculates the delta of each elements to its previous element. The first element will remain unchanged.",91,N],[10,"cum_sum","","Calculates the cumulative sum of all elements. This operation undoes the `diff_with_start`operation.",91,N],[6,"RealTimeVecSlice64","","A vector with real numbers in time domain.",N,N],[8,"InterleaveToVector","","Conversion from two instances of a generic data type into a dsp vector with complex data.",N,N],[10,"interleave_to_complex_time_vec","","Create a new vector in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",92,[[["self"],["self"]],["result",["dspvec","errorreason"]]]],[10,"interleave_to_complex_freq_vec","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",92,[[["self"],["self"]],["result",["dspvec","errorreason"]]]],[3,"FixedLenBuffer","","A buffer which gets initalized with a data storage type and then always keeps that.",N,N],[8,"ToRealResult","","Specifies what the the result is if a type is transformed to real numbers.",N,N],[16,"RealResult","","",93,N],[5,"print_calibration","","Prints debug information about the calibration. The calibration determines when the library will start to spawn threads. If a calibration hasn't been performed yet than calling this function will trigger the calibration.",N,[[],["string"]]],[8,"ResizeOps","","Operations to resize a data type.",N,N],[10,"resize","","Changes `self.len()`. If `self.is_complex()` is true then `len` must be an even number. `len > self.alloc_len()` is only possible if the underlying storage supports resizing.",94,[[["self"],["usize"]],["result",["errorreason"]]]],[8,"NumberSpace","","Number space (real or complex) information.",N,N],[10,"is_complex","","",95,[[["self"]],["bool"]]],[10,"to_complex","","For implementations which track meta data at runtime this method may be implemented to transition between different states. For all other implementations they may leave this empty.",95,N],[10,"to_real","","See `to_complex` for more details.",95,N],[0,"matrix","","",N,N],[3,"MatrixMxN","basic_dsp::matrix","A matrix which can hold 1 to N vectors.",N,N],[3,"Matrix2xN","","A matrix which can hold exactly 2 vectors.",N,N],[3,"Matrix3xN","","A matrix which can hold exactly 3 vectors.",N,N],[3,"Matrix4xN","","A matrix which can hold exactly 4 vectors.",N,N],[6,"Matrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in any number space or domain.",N,N],[6,"Matrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in any number space or domain.",N,N],[6,"RealTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in real number space and time domain.",N,N],[6,"RealTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in real number space and time domain.",N,N],[6,"ComplexTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in complex number space and time domain.",N,N],[6,"ComplexTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in complex number space and time domain.",N,N],[6,"RealFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in real number space and frequency domain.",N,N],[6,"RealFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in real number space and frequency domain.",N,N],[6,"ComplexFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"ComplexFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"Matrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in any number space or domain.",N,N],[6,"Matrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in any number space or domain.",N,N],[6,"RealTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in real number space and time domain.",N,N],[6,"RealTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in real number space and time domain.",N,N],[6,"ComplexTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in complex number space and time domain.",N,N],[6,"ComplexTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in complex number space and time domain.",N,N],[6,"RealFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in real number space and frequency domain.",N,N],[6,"RealFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in real number space and frequency domain.",N,N],[6,"ComplexFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"ComplexFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"Matrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in any number space or domain.",N,N],[6,"Matrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit floating point numbers in any number space or domain.",N,N],[6,"RealTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in real number space and time domain.",N,N],[6,"RealTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit floating point numbers in real number space and time domain.",N,N],[6,"ComplexTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in complex number space and time domain.",N,N],[6,"ComplexTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit floating point numbers in complex number space and time domain.",N,N],[6,"RealFreqMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in real number space and frequency domain.",N,N],[6,"RealFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in real number space and frequency domain.",N,N],[6,"ComplexFreqMatrix32x3","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"ComplexFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"Matrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in any number space or domain.",N,N],[6,"Matrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in any number space or domain.",N,N],[6,"RealTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in real number space and time domain.",N,N],[6,"RealTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in real number space and time domain.",N,N],[6,"ComplexTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in complex number space and time domain.",N,N],[6,"ComplexTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in complex number space and time domain.",N,N],[6,"RealFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in real number space and frequency domain.",N,N],[6,"RealFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in real number space and frequency domain.",N,N],[6,"ComplexFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"ComplexFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in complex number space and frequency domain.",N,N],[8,"ToComplexTimeMatrix","","Conversion from a generic data type into a dsp vector with complex data.",N,N],[16,"Output","","",96,N],[10,"to_complex_time_mat","","Create a new matrix in complex number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",96,N],[8,"Matrix","","A trait for matrix types. In this lib a matrix is simply a collection of vectors. The idea is that the matrix types can be used to reduce the size of a large matrix and that the return types are basic enough so that other specialized matrix libs can do the rest of the work, e.g. inverting the resulting matrix.",N,N],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",97,[[["self"]],["t"]]],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",97,N],[10,"row_len","","The number of valid elements in each row of the matrix. This can be changed with the `Resize` trait.",97,[[["self"]],["usize"]]],[10,"row_points","","The number of valid points in a row. If the matrix is complex then every valid point consists of two floating point numbers, while for real vectors every point only consists of one floating point number.",97,[[["self"]],["usize"]]],[10,"col_len","","The number of columns in the matrix.",97,[[["self"]],["usize"]]],[10,"rows","","Gets the rows as vectors.",97,N],[10,"rows_mut","","Gets the rows as mutable vectors.",97,N],[8,"FromMatrix","","Retrieves the underlying storage from a matrix.",N,N],[16,"Output","","Type of the underlying storage of a matrix.",98,N],[10,"get","","Gets the underlying matrix and the number of elements which contain valid.",98,N],[8,"ToDspMatrix","","Conversion from a generic data type into a dsp matrix which tracks its meta information (domain and number space) only at runtime. See `ToRealMatrix` and `ToComplexMatrix` for alternatives which track most of the meta data with the type system and therefore avoid runtime errors.",N,N],[16,"Output","","",99,N],[10,"to_gen_dsp_mat","","Create a new generic matrix. `delta` can be changed after construction with a call of `set_delta`.",99,N],[8,"ToComplexFreqMatrix","","Conversion from a generic data type into a dsp vector with complex data.",N,N],[16,"Output","","",100,N],[10,"to_complex_freq_mat","","Create a new matrix in complex number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",100,N],[8,"ToRealTimeMatrix","","Conversion from a generic data type into a dsp matrix with real data.",N,N],[16,"Output","","",101,N],[10,"to_real_time_mat","","Create a new matrix in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",101,N],[8,"ToRealFreqMatrix","","Conversion from a generic data type into a dsp matrix with real data.",N,N],[16,"Output","","",102,N],[10,"to_real_freq_mat","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",102,N],[8,"ToMatrix","","Conversion from a collection of vectors to a matrix.",N,N],[16,"Output","","",103,N],[10,"to_mat","","Create a new matrix from a collection of vectors.",103,N],[11,"from","basic_dsp::conv_types","",104,[[["t"]],["t"]]],[11,"into","","",104,[[["self"]],["u"]]],[11,"try_from","","",104,[[["u"]],["result"]]],[11,"borrow","","",104,[[["self"]],["t"]]],[11,"get_type_id","","",104,[[["self"]],["typeid"]]],[11,"borrow_mut","","",104,[[["self"]],["t"]]],[11,"try_into","","",104,[[["self"]],["result"]]],[11,"from","","",105,[[["t"]],["t"]]],[11,"into","","",105,[[["self"]],["u"]]],[11,"try_from","","",105,[[["u"]],["result"]]],[11,"borrow","","",105,[[["self"]],["t"]]],[11,"get_type_id","","",105,[[["self"]],["typeid"]]],[11,"borrow_mut","","",105,[[["self"]],["t"]]],[11,"try_into","","",105,[[["self"]],["result"]]],[11,"from","","",106,[[["t"]],["t"]]],[11,"into","","",106,[[["self"]],["u"]]],[11,"try_from","","",106,[[["u"]],["result"]]],[11,"borrow","","",106,[[["self"]],["t"]]],[11,"get_type_id","","",106,[[["self"]],["typeid"]]],[11,"borrow_mut","","",106,[[["self"]],["t"]]],[11,"try_into","","",106,[[["self"]],["result"]]],[11,"from","","",107,[[["t"]],["t"]]],[11,"into","","",107,[[["self"]],["u"]]],[11,"try_from","","",107,[[["u"]],["result"]]],[11,"borrow","","",107,[[["self"]],["t"]]],[11,"get_type_id","","",107,[[["self"]],["typeid"]]],[11,"borrow_mut","","",107,[[["self"]],["t"]]],[11,"try_into","","",107,[[["self"]],["result"]]],[11,"from","","",108,[[["t"]],["t"]]],[11,"into","","",108,[[["self"]],["u"]]],[11,"try_from","","",108,[[["u"]],["result"]]],[11,"borrow","","",108,[[["self"]],["t"]]],[11,"get_type_id","","",108,[[["self"]],["typeid"]]],[11,"borrow_mut","","",108,[[["self"]],["t"]]],[11,"try_into","","",108,[[["self"]],["result"]]],[11,"from","","",109,[[["t"]],["t"]]],[11,"into","","",109,[[["self"]],["u"]]],[11,"try_from","","",109,[[["u"]],["result"]]],[11,"borrow","","",109,[[["self"]],["t"]]],[11,"get_type_id","","",109,[[["self"]],["typeid"]]],[11,"borrow_mut","","",109,[[["self"]],["t"]]],[11,"try_into","","",109,[[["self"]],["result"]]],[11,"from","basic_dsp::meta","",110,[[["t"]],["t"]]],[11,"into","","",110,[[["self"]],["u"]]],[11,"to_owned","","",110,[[["self"]],["t"]]],[11,"clone_into","","",110,N],[11,"try_from","","",110,[[["u"]],["result"]]],[11,"borrow","","",110,[[["self"]],["t"]]],[11,"get_type_id","","",110,[[["self"]],["typeid"]]],[11,"borrow_mut","","",110,[[["self"]],["t"]]],[11,"try_into","","",110,[[["self"]],["result"]]],[11,"from","","",111,[[["t"]],["t"]]],[11,"into","","",111,[[["self"]],["u"]]],[11,"to_owned","","",111,[[["self"]],["t"]]],[11,"clone_into","","",111,N],[11,"try_from","","",111,[[["u"]],["result"]]],[11,"borrow","","",111,[[["self"]],["t"]]],[11,"get_type_id","","",111,[[["self"]],["typeid"]]],[11,"borrow_mut","","",111,[[["self"]],["t"]]],[11,"try_into","","",111,[[["self"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"from","","",112,[[["t"]],["t"]]],[11,"into","","",112,[[["self"]],["u"]]],[11,"to_owned","","",112,[[["self"]],["t"]]],[11,"clone_into","","",112,N],[11,"try_from","","",112,[[["u"]],["result"]]],[11,"borrow","","",112,[[["self"]],["t"]]],[11,"get_type_id","","",112,[[["self"]],["typeid"]]],[11,"borrow_mut","","",112,[[["self"]],["t"]]],[11,"try_into","","",112,[[["self"]],["result"]]],[11,"from","","",113,[[["t"]],["t"]]],[11,"into","","",113,[[["self"]],["u"]]],[11,"to_owned","","",113,[[["self"]],["t"]]],[11,"clone_into","","",113,N],[11,"try_from","","",113,[[["u"]],["result"]]],[11,"borrow","","",113,[[["self"]],["t"]]],[11,"get_type_id","","",113,[[["self"]],["typeid"]]],[11,"borrow_mut","","",113,[[["self"]],["t"]]],[11,"try_into","","",113,[[["self"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"from","basic_dsp::window_functions","",114,[[["t"]],["t"]]],[11,"into","","",114,[[["self"]],["u"]]],[11,"try_from","","",114,[[["u"]],["result"]]],[11,"borrow","","",114,[[["self"]],["t"]]],[11,"get_type_id","","",114,[[["self"]],["typeid"]]],[11,"borrow_mut","","",114,[[["self"]],["t"]]],[11,"try_into","","",114,[[["self"]],["result"]]],[11,"from","","",115,[[["t"]],["t"]]],[11,"into","","",115,[[["self"]],["u"]]],[11,"try_from","","",115,[[["u"]],["result"]]],[11,"borrow","","",115,[[["self"]],["t"]]],[11,"get_type_id","","",115,[[["self"]],["typeid"]]],[11,"borrow_mut","","",115,[[["self"]],["t"]]],[11,"try_into","","",115,[[["self"]],["result"]]],[11,"to_string","basic_dsp::numbers","",12,[[["self"]],["string"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"zero","","",12,[[],["t"]]],[11,"from","basic_dsp","",116,[[["t"]],["t"]]],[11,"into","","",116,[[["self"]],["u"]]],[11,"try_from","","",116,[[["u"]],["result"]]],[11,"borrow","","",116,[[["self"]],["t"]]],[11,"get_type_id","","",116,[[["self"]],["typeid"]]],[11,"borrow_mut","","",116,[[["self"]],["t"]]],[11,"try_into","","",116,[[["self"]],["result"]]],[11,"from","","",117,[[["t"]],["t"]]],[11,"into","","",117,[[["self"]],["u"]]],[11,"try_from","","",117,[[["u"]],["result"]]],[11,"borrow","","",117,[[["self"]],["t"]]],[11,"get_type_id","","",117,[[["self"]],["typeid"]]],[11,"borrow_mut","","",117,[[["self"]],["t"]]],[11,"try_into","","",117,[[["self"]],["result"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"from","","",118,[[["t"]],["t"]]],[11,"into","","",118,[[["self"]],["u"]]],[11,"try_from","","",118,[[["u"]],["result"]]],[11,"borrow","","",118,[[["self"]],["t"]]],[11,"get_type_id","","",118,[[["self"]],["typeid"]]],[11,"borrow_mut","","",118,[[["self"]],["t"]]],[11,"try_into","","",118,[[["self"]],["result"]]],[11,"from","","",119,[[["t"]],["t"]]],[11,"into","","",119,[[["self"]],["u"]]],[11,"try_from","","",119,[[["u"]],["result"]]],[11,"borrow","","",119,[[["self"]],["t"]]],[11,"get_type_id","","",119,[[["self"]],["typeid"]]],[11,"borrow_mut","","",119,[[["self"]],["t"]]],[11,"try_into","","",119,[[["self"]],["result"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"to_owned","","",56,[[["self"]],["t"]]],[11,"clone_into","","",56,N],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"from","","",120,[[["t"]],["t"]]],[11,"into","","",120,[[["self"]],["u"]]],[11,"try_from","","",120,[[["u"]],["result"]]],[11,"borrow","","",120,[[["self"]],["t"]]],[11,"get_type_id","","",120,[[["self"]],["typeid"]]],[11,"borrow_mut","","",120,[[["self"]],["t"]]],[11,"try_into","","",120,[[["self"]],["result"]]],[11,"from","","",121,[[["t"]],["t"]]],[11,"into","","",121,[[["self"]],["u"]]],[11,"try_from","","",121,[[["u"]],["result"]]],[11,"borrow","","",121,[[["self"]],["t"]]],[11,"get_type_id","","",121,[[["self"]],["typeid"]]],[11,"borrow_mut","","",121,[[["self"]],["t"]]],[11,"try_into","","",121,[[["self"]],["result"]]],[11,"from","","",122,[[["t"]],["t"]]],[11,"into","","",122,[[["self"]],["u"]]],[11,"to_owned","","",122,[[["self"]],["t"]]],[11,"clone_into","","",122,N],[11,"try_from","","",122,[[["u"]],["result"]]],[11,"borrow","","",122,[[["self"]],["t"]]],[11,"get_type_id","","",122,[[["self"]],["typeid"]]],[11,"borrow_mut","","",122,[[["self"]],["t"]]],[11,"try_into","","",122,[[["self"]],["result"]]],[11,"from","","",80,[[["t"]],["t"]]],[11,"into","","",80,[[["self"]],["u"]]],[11,"to_owned","","",80,[[["self"]],["t"]]],[11,"clone_into","","",80,N],[11,"try_from","","",80,[[["u"]],["result"]]],[11,"borrow","","",80,[[["self"]],["t"]]],[11,"get_type_id","","",80,[[["self"]],["typeid"]]],[11,"borrow_mut","","",80,[[["self"]],["t"]]],[11,"try_into","","",80,[[["self"]],["result"]]],[11,"from","","",83,[[["t"]],["t"]]],[11,"into","","",83,[[["self"]],["u"]]],[11,"to_owned","","",83,[[["self"]],["t"]]],[11,"clone_into","","",83,N],[11,"try_from","","",83,[[["u"]],["result"]]],[11,"borrow","","",83,[[["self"]],["t"]]],[11,"get_type_id","","",83,[[["self"]],["typeid"]]],[11,"borrow_mut","","",83,[[["self"]],["t"]]],[11,"try_into","","",83,[[["self"]],["result"]]],[11,"from","","",84,[[["t"]],["t"]]],[11,"into","","",84,[[["self"]],["u"]]],[11,"to_owned","","",84,[[["self"]],["t"]]],[11,"clone_into","","",84,N],[11,"try_from","","",84,[[["u"]],["result"]]],[11,"borrow","","",84,[[["self"]],["t"]]],[11,"get_type_id","","",84,[[["self"]],["typeid"]]],[11,"borrow_mut","","",84,[[["self"]],["t"]]],[11,"try_into","","",84,[[["self"]],["result"]]],[11,"from","","",123,[[["t"]],["t"]]],[11,"into","","",123,[[["self"]],["u"]]],[11,"try_from","","",123,[[["u"]],["result"]]],[11,"borrow","","",123,[[["self"]],["t"]]],[11,"get_type_id","","",123,[[["self"]],["typeid"]]],[11,"borrow_mut","","",123,[[["self"]],["t"]]],[11,"try_into","","",123,[[["self"]],["result"]]],[11,"from","basic_dsp::matrix","",124,[[["t"]],["t"]]],[11,"into","","",124,[[["self"]],["u"]]],[11,"try_from","","",124,[[["u"]],["result"]]],[11,"borrow","","",124,[[["self"]],["t"]]],[11,"get_type_id","","",124,[[["self"]],["typeid"]]],[11,"borrow_mut","","",124,[[["self"]],["t"]]],[11,"try_into","","",124,[[["self"]],["result"]]],[11,"from","","",125,[[["t"]],["t"]]],[11,"into","","",125,[[["self"]],["u"]]],[11,"try_from","","",125,[[["u"]],["result"]]],[11,"borrow","","",125,[[["self"]],["t"]]],[11,"get_type_id","","",125,[[["self"]],["typeid"]]],[11,"borrow_mut","","",125,[[["self"]],["t"]]],[11,"try_into","","",125,[[["self"]],["result"]]],[11,"from","","",126,[[["t"]],["t"]]],[11,"into","","",126,[[["self"]],["u"]]],[11,"try_from","","",126,[[["u"]],["result"]]],[11,"borrow","","",126,[[["self"]],["t"]]],[11,"get_type_id","","",126,[[["self"]],["typeid"]]],[11,"borrow_mut","","",126,[[["self"]],["t"]]],[11,"try_into","","",126,[[["self"]],["result"]]],[11,"from","","",127,[[["t"]],["t"]]],[11,"into","","",127,[[["self"]],["u"]]],[11,"try_from","","",127,[[["u"]],["result"]]],[11,"borrow","","",127,[[["self"]],["t"]]],[11,"get_type_id","","",127,[[["self"]],["typeid"]]],[11,"borrow_mut","","",127,[[["self"]],["t"]]],[11,"try_into","","",127,[[["self"]],["result"]]],[11,"multiply_complex_exponential","","",127,N],[11,"conj","","",127,N],[11,"multiply_complex_exponential","","",124,N],[11,"conj","","",124,N],[11,"multiply_complex_exponential","","",125,N],[11,"conj","","",125,N],[11,"multiply_complex_exponential","","",126,N],[11,"conj","","",126,N],[11,"rededicate_from_force","","",126,[[["matrix3xn"]],["matrix3xn"]]],[11,"rededicate_with_runtime_data","","",126,[[["matrix3xn"],["bool"],["datadomain"]],["matrix3xn"]]],[11,"rededicate_from_force","","",127,[[["matrix4xn"]],["matrix4xn"]]],[11,"rededicate_with_runtime_data","","",127,[[["matrix4xn"],["bool"],["datadomain"]],["matrix4xn"]]],[11,"rededicate_from_force","","",125,[[["matrix2xn"]],["matrix2xn"]]],[11,"rededicate_with_runtime_data","","",125,[[["matrix2xn"],["bool"],["datadomain"]],["matrix2xn"]]],[11,"rededicate_from_force","","",124,[[["matrixmxn"]],["matrixmxn"]]],[11,"rededicate_with_runtime_data","","",124,[[["matrixmxn"],["bool"],["datadomain"]],["matrixmxn"]]],[11,"sum","","",125,N],[11,"sum_sq","","",125,N],[11,"sum","","",124,[[["self"]],["vec"]]],[11,"sum_sq","","",124,[[["self"]],["vec"]]],[11,"sum","","",125,N],[11,"sum_sq","","",125,N],[11,"sum","","",125,N],[11,"sum_sq","","",125,N],[11,"statistics_prec","","",127,N],[11,"statistics_prec","","",124,[[["self"]],["vec",["statistics"]]]],[11,"statistics_prec","","",125,N],[11,"statistics_prec","","",126,N],[11,"domain","","",127,[[["self"]],["datadomain"]]],[11,"is_complex","","",127,[[["self"]],["bool"]]],[11,"domain","","",126,[[["self"]],["datadomain"]]],[11,"is_complex","","",126,[[["self"]],["bool"]]],[11,"domain","","",125,[[["self"]],["datadomain"]]],[11,"is_complex","","",125,[[["self"]],["bool"]]],[11,"domain","","",124,[[["self"]],["datadomain"]]],[11,"is_complex","","",124,[[["self"]],["bool"]]],[11,"statistics_split_prec","","",127,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"statistics_split_prec","","",126,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"statistics_split_prec","","",124,[[["self"],["usize"]],["result",["vec","errorreason"]]]],[11,"statistics_split_prec","","",125,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"plain_fft","","",125,N],[11,"fft","","",125,N],[11,"windowed_fft","","",125,N],[11,"plain_fft","","",127,N],[11,"fft","","",127,N],[11,"windowed_fft","","",127,N],[11,"plain_fft","","",124,N],[11,"fft","","",124,N],[11,"windowed_fft","","",124,N],[11,"plain_fft","","",126,N],[11,"fft","","",126,N],[11,"windowed_fft","","",126,N],[11,"convolve_signal","","",124,[[["self"],["b"],["dspvec"]],["result",["errorreason"]]]],[11,"convolve_signal","","",124,[[["self"],["b"],["vec"]],["result",["errorreason"]]]],[11,"convolve_signal","","",125,N],[11,"convolve_signal","","",127,N],[11,"convolve_signal","","",127,[[["self"],["b"],["dspvec"]],["result",["errorreason"]]]],[11,"convolve_signal","","",126,[[["self"],["b"],["dspvec"]],["result",["errorreason"]]]],[11,"convolve_signal","","",125,[[["self"],["b"],["dspvec"]],["result",["errorreason"]]]],[11,"convolve_signal","","",126,N],[11,"set_real_imag","","",127,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"set_mag_phase","","",127,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"set_real_imag","","",125,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"set_mag_phase","","",125,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"set_real_imag","","",126,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"set_mag_phase","","",126,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"set_real_imag","","",124,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"set_mag_phase","","",124,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"dot_product","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"dot_product","","",124,[[["self"],["matrixmxn"]],["result",["vec","errorreason"]]]],[11,"dot_product","","",124,[[["self"],["v"]],["result",["vec","errorreason"]]]],[11,"dot_product","","",127,[[["self"],["matrix4xn"]],["result",["vec","errorreason"]]]],[11,"dot_product","","",126,[[["self"],["matrix3xn"]],["result",["vec","errorreason"]]]],[11,"dot_product","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"dot_product","","",125,[[["self"],["matrix2xn"]],["result",["vec","errorreason"]]]],[11,"dot_product","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"multiply_frequency_response","","",124,N],[11,"multiply_frequency_response","","",125,N],[11,"multiply_frequency_response","","",127,N],[11,"multiply_frequency_response","","",124,N],[11,"multiply_frequency_response","","",126,N],[11,"multiply_frequency_response","","",127,N],[11,"multiply_frequency_response","","",126,N],[11,"multiply_frequency_response","","",125,N],[11,"plain_ifft","","",124,N],[11,"ifft","","",124,N],[11,"windowed_ifft","","",124,N],[11,"plain_ifft","","",126,N],[11,"ifft","","",126,N],[11,"windowed_ifft","","",126,N],[11,"plain_ifft","","",127,N],[11,"ifft","","",127,N],[11,"windowed_ifft","","",127,N],[11,"plain_ifft","","",125,N],[11,"ifft","","",125,N],[11,"windowed_ifft","","",125,N],[11,"magnitude","","",127,N],[11,"magnitude_squared","","",127,N],[11,"to_real","","",127,N],[11,"to_imag","","",127,N],[11,"phase","","",127,N],[11,"magnitude","","",126,N],[11,"magnitude_squared","","",126,N],[11,"to_real","","",126,N],[11,"to_imag","","",126,N],[11,"phase","","",126,N],[11,"magnitude","","",124,N],[11,"magnitude_squared","","",124,N],[11,"to_real","","",124,N],[11,"to_imag","","",124,N],[11,"phase","","",124,N],[11,"magnitude","","",125,N],[11,"magnitude_squared","","",125,N],[11,"to_real","","",125,N],[11,"to_imag","","",125,N],[11,"phase","","",125,N],[11,"map_inplace","","",125,N],[11,"map_inplace","","",127,N],[11,"map_inplace","","",124,N],[11,"map_inplace","","",127,N],[11,"map_inplace","","",125,N],[11,"map_inplace","","",126,N],[11,"map_inplace","","",126,N],[11,"map_inplace","","",124,N],[11,"add","","",124,[[["self"],["v"]],["result",["errorreason"]]]],[11,"sub","","",124,[[["self"],["v"]],["result",["errorreason"]]]],[11,"div","","",124,[[["self"],["v"]],["result",["errorreason"]]]],[11,"mul","","",124,[[["self"],["v"]],["result",["errorreason"]]]],[11,"add","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"sub","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"div","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"mul","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"add","","",125,[[["self"],["matrix2xn"]],["result",["errorreason"]]]],[11,"sub","","",125,[[["self"],["matrix2xn"]],["result",["errorreason"]]]],[11,"div","","",125,[[["self"],["matrix2xn"]],["result",["errorreason"]]]],[11,"mul","","",125,[[["self"],["matrix2xn"]],["result",["errorreason"]]]],[11,"add","","",126,[[["self"],["matrix3xn"]],["result",["errorreason"]]]],[11,"sub","","",126,[[["self"],["matrix3xn"]],["result",["errorreason"]]]],[11,"div","","",126,[[["self"],["matrix3xn"]],["result",["errorreason"]]]],[11,"mul","","",126,[[["self"],["matrix3xn"]],["result",["errorreason"]]]],[11,"add","","",124,[[["self"],["matrixmxn"]],["result",["errorreason"]]]],[11,"sub","","",124,[[["self"],["matrixmxn"]],["result",["errorreason"]]]],[11,"div","","",124,[[["self"],["matrixmxn"]],["result",["errorreason"]]]],[11,"mul","","",124,[[["self"],["matrixmxn"]],["result",["errorreason"]]]],[11,"add","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"sub","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"div","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"mul","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"add","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"sub","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"div","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"mul","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"add","","",127,[[["self"],["matrix4xn"]],["result",["errorreason"]]]],[11,"sub","","",127,[[["self"],["matrix4xn"]],["result",["errorreason"]]]],[11,"div","","",127,[[["self"],["matrix4xn"]],["result",["errorreason"]]]],[11,"mul","","",127,[[["self"],["matrix4xn"]],["result",["errorreason"]]]],[11,"map_aggregate","","",124,[[["self"],["a"],["fmap"],["faggr"]],["result",["vec","errorreason"]]]],[11,"map_aggregate","","",125,[[["self"],["a"],["fmap"],["faggr"]],["result",["errorreason"]]]],[11,"map_aggregate","","",127,[[["self"],["a"],["fmap"],["faggr"]],["result",["errorreason"]]]],[11,"map_aggregate","","",126,[[["self"],["a"],["fmap"],["faggr"]],["result",["errorreason"]]]],[11,"statistics","","",126,N],[11,"statistics","","",125,N],[11,"statistics","","",124,[[["self"]],["vec",["statistics"]]]],[11,"statistics","","",127,N],[11,"statistics_split","","",127,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"statistics_split","","",124,[[["self"],["usize"]],["result",["vec","errorreason"]]]],[11,"statistics_split","","",126,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"statistics_split","","",125,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"add_smaller","","",124,[[["self"],["matrixmxn"]],["result",["errorreason"]]]],[11,"sub_smaller","","",124,[[["self"],["matrixmxn"]],["result",["errorreason"]]]],[11,"div_smaller","","",124,[[["self"],["matrixmxn"]],["result",["errorreason"]]]],[11,"mul_smaller","","",124,[[["self"],["matrixmxn"]],["result",["errorreason"]]]],[11,"add_smaller","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"sub_smaller","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"div_smaller","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"mul_smaller","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"add_smaller","","",127,[[["self"],["matrix4xn"]],["result",["errorreason"]]]],[11,"sub_smaller","","",127,[[["self"],["matrix4xn"]],["result",["errorreason"]]]],[11,"div_smaller","","",127,[[["self"],["matrix4xn"]],["result",["errorreason"]]]],[11,"mul_smaller","","",127,[[["self"],["matrix4xn"]],["result",["errorreason"]]]],[11,"add_smaller","","",125,[[["self"],["matrix2xn"]],["result",["errorreason"]]]],[11,"sub_smaller","","",125,[[["self"],["matrix2xn"]],["result",["errorreason"]]]],[11,"div_smaller","","",125,[[["self"],["matrix2xn"]],["result",["errorreason"]]]],[11,"mul_smaller","","",125,[[["self"],["matrix2xn"]],["result",["errorreason"]]]],[11,"add_smaller","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"sub_smaller","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"div_smaller","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"mul_smaller","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"add_smaller","","",126,[[["self"],["matrix3xn"]],["result",["errorreason"]]]],[11,"sub_smaller","","",126,[[["self"],["matrix3xn"]],["result",["errorreason"]]]],[11,"div_smaller","","",126,[[["self"],["matrix3xn"]],["result",["errorreason"]]]],[11,"mul_smaller","","",126,[[["self"],["matrix3xn"]],["result",["errorreason"]]]],[11,"add_smaller","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"sub_smaller","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"div_smaller","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"mul_smaller","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"add_smaller","","",124,[[["self"],["v"]],["result",["errorreason"]]]],[11,"sub_smaller","","",124,[[["self"],["v"]],["result",["errorreason"]]]],[11,"div_smaller","","",124,[[["self"],["v"]],["result",["errorreason"]]]],[11,"mul_smaller","","",124,[[["self"],["v"]],["result",["errorreason"]]]],[11,"get_real","","",127,N],[11,"get_imag","","",127,N],[11,"get_magnitude","","",127,N],[11,"get_magnitude_squared","","",127,N],[11,"get_phase","","",127,N],[11,"get_real_imag","","",127,N],[11,"get_mag_phase","","",127,N],[11,"get_real","","",125,N],[11,"get_imag","","",125,N],[11,"get_magnitude","","",125,N],[11,"get_magnitude_squared","","",125,N],[11,"get_phase","","",125,N],[11,"get_real_imag","","",125,N],[11,"get_mag_phase","","",125,N],[11,"get_real","","",126,N],[11,"get_imag","","",126,N],[11,"get_magnitude","","",126,N],[11,"get_magnitude_squared","","",126,N],[11,"get_phase","","",126,N],[11,"get_real_imag","","",126,N],[11,"get_mag_phase","","",126,N],[11,"get_real","","",124,N],[11,"get_imag","","",124,N],[11,"get_magnitude","","",124,N],[11,"get_magnitude_squared","","",124,N],[11,"get_phase","","",124,N],[11,"get_real_imag","","",124,N],[11,"get_mag_phase","","",124,N],[11,"sin","","",125,N],[11,"cos","","",125,N],[11,"tan","","",125,N],[11,"asin","","",125,N],[11,"acos","","",125,N],[11,"atan","","",125,N],[11,"sinh","","",125,N],[11,"cosh","","",125,N],[11,"tanh","","",125,N],[11,"asinh","","",125,N],[11,"acosh","","",125,N],[11,"atanh","","",125,N],[11,"sin","","",124,N],[11,"cos","","",124,N],[11,"tan","","",124,N],[11,"asin","","",124,N],[11,"acos","","",124,N],[11,"atan","","",124,N],[11,"sinh","","",124,N],[11,"cosh","","",124,N],[11,"tanh","","",124,N],[11,"asinh","","",124,N],[11,"acosh","","",124,N],[11,"atanh","","",124,N],[11,"sin","","",127,N],[11,"cos","","",127,N],[11,"tan","","",127,N],[11,"asin","","",127,N],[11,"acos","","",127,N],[11,"atan","","",127,N],[11,"sinh","","",127,N],[11,"cosh","","",127,N],[11,"tanh","","",127,N],[11,"asinh","","",127,N],[11,"acosh","","",127,N],[11,"atanh","","",127,N],[11,"sin","","",126,N],[11,"cos","","",126,N],[11,"tan","","",126,N],[11,"asin","","",126,N],[11,"acos","","",126,N],[11,"atan","","",126,N],[11,"sinh","","",126,N],[11,"cosh","","",126,N],[11,"tanh","","",126,N],[11,"asinh","","",126,N],[11,"acosh","","",126,N],[11,"atanh","","",126,N],[11,"abs","","",124,N],[11,"abs","","",126,N],[11,"abs","","",127,N],[11,"abs","","",125,N],[11,"plain_sfft","","",125,[[["self"],["b"]],["result"]]],[11,"sfft","","",125,[[["self"],["b"]],["result"]]],[11,"windowed_sfft","","",125,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"plain_sfft","","",126,[[["self"],["b"]],["result"]]],[11,"sfft","","",126,[[["self"],["b"]],["result"]]],[11,"windowed_sfft","","",126,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"plain_sfft","","",124,[[["self"],["b"]],["result"]]],[11,"sfft","","",124,[[["self"],["b"]],["result"]]],[11,"windowed_sfft","","",124,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"plain_sfft","","",127,[[["self"],["b"]],["result"]]],[11,"sfft","","",127,[[["self"],["b"]],["result"]]],[11,"windowed_sfft","","",127,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"interpolate_hermite","","",127,N],[11,"interpolate_lin","","",127,N],[11,"interpolate_hermite","","",125,N],[11,"interpolate_lin","","",125,N],[11,"interpolate_hermite","","",126,N],[11,"interpolate_lin","","",126,N],[11,"interpolate_hermite","","",124,N],[11,"interpolate_lin","","",124,N],[11,"mirror","","",126,N],[11,"fft_shift","","",126,N],[11,"ifft_shift","","",126,N],[11,"mirror","","",127,N],[11,"fft_shift","","",127,N],[11,"ifft_shift","","",127,N],[11,"mirror","","",124,N],[11,"fft_shift","","",124,N],[11,"ifft_shift","","",124,N],[11,"mirror","","",125,N],[11,"fft_shift","","",125,N],[11,"ifft_shift","","",125,N],[11,"to_complex","","",124,[[["self"]],["result"]]],[11,"to_complex","","",127,[[["self"]],["result"]]],[11,"to_complex","","",125,[[["self"]],["result"]]],[11,"to_complex","","",126,[[["self"]],["result"]]],[11,"diff","","",127,N],[11,"diff_with_start","","",127,N],[11,"cum_sum","","",127,N],[11,"diff","","",125,N],[11,"diff_with_start","","",125,N],[11,"cum_sum","","",125,N],[11,"diff","","",124,N],[11,"diff_with_start","","",124,N],[11,"cum_sum","","",124,N],[11,"diff","","",126,N],[11,"diff_with_start","","",126,N],[11,"cum_sum","","",126,N],[11,"interpolatef","","",127,N],[11,"interpolatei","","",127,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["result",["errorreason"]]]],[11,"interpolate","","",127,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["result",["errorreason"]]]],[11,"interpft","","",127,N],[11,"decimatei","","",127,N],[11,"interpolatef","","",126,N],[11,"interpolatei","","",126,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["result",["errorreason"]]]],[11,"interpolate","","",126,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["result",["errorreason"]]]],[11,"interpft","","",126,N],[11,"decimatei","","",126,N],[11,"interpolatef","","",124,N],[11,"interpolatei","","",124,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["result",["errorreason"]]]],[11,"interpolate","","",124,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["result",["errorreason"]]]],[11,"interpft","","",124,N],[11,"decimatei","","",124,N],[11,"interpolatef","","",125,N],[11,"interpolatei","","",125,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["result",["errorreason"]]]],[11,"interpolate","","",125,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["result",["errorreason"]]]],[11,"interpft","","",125,N],[11,"decimatei","","",125,N],[11,"dot_product_prec","","",126,[[["self"],["v"]],["result",["errorreason"]]]],[11,"dot_product_prec","","",127,[[["self"],["matrix4xn"]],["result",["vec","errorreason"]]]],[11,"dot_product_prec","","",124,[[["self"],["matrixmxn"]],["result",["vec","errorreason"]]]],[11,"dot_product_prec","","",125,[[["self"],["v"]],["result",["errorreason"]]]],[11,"dot_product_prec","","",127,[[["self"],["v"]],["result",["errorreason"]]]],[11,"dot_product_prec","","",124,[[["self"],["v"]],["result",["vec","errorreason"]]]],[11,"dot_product_prec","","",125,[[["self"],["matrix2xn"]],["result",["vec","errorreason"]]]],[11,"dot_product_prec","","",126,[[["self"],["matrix3xn"]],["result",["vec","errorreason"]]]],[11,"plain_sifft","","",127,[[["self"],["b"]],["result"]]],[11,"sifft","","",127,[[["self"],["b"]],["result"]]],[11,"windowed_sifft","","",127,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"plain_sifft","","",125,[[["self"],["b"]],["result"]]],[11,"sifft","","",125,[[["self"],["b"]],["result"]]],[11,"windowed_sifft","","",125,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"plain_sifft","","",126,[[["self"],["b"]],["result"]]],[11,"sifft","","",126,[[["self"],["b"]],["result"]]],[11,"windowed_sifft","","",126,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"plain_sifft","","",124,[[["self"],["b"]],["result"]]],[11,"sifft","","",124,[[["self"],["b"]],["result"]]],[11,"windowed_sifft","","",124,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"get_meta_data","","",125,[[["self"]],["typemetadata"]]],[11,"get_meta_data","","",126,[[["self"]],["typemetadata"]]],[11,"get_meta_data","","",127,[[["self"]],["typemetadata"]]],[11,"get_meta_data","","",124,[[["self"]],["typemetadata"]]],[11,"prepare_argument","","",124,N],[11,"prepare_argument_padded","","",124,N],[11,"prepare_argument","","",126,N],[11,"prepare_argument_padded","","",126,N],[11,"prepare_argument","","",125,N],[11,"prepare_argument_padded","","",125,N],[11,"prepare_argument","","",127,N],[11,"prepare_argument_padded","","",127,N],[11,"magnitude_b","","",124,N],[11,"magnitude_squared_b","","",124,N],[11,"to_real_b","","",124,N],[11,"to_imag_b","","",124,N],[11,"phase_b","","",124,N],[11,"magnitude_b","","",125,N],[11,"magnitude_squared_b","","",125,N],[11,"to_real_b","","",125,N],[11,"to_imag_b","","",125,N],[11,"phase_b","","",125,N],[11,"magnitude_b","","",126,N],[11,"magnitude_squared_b","","",126,N],[11,"to_real_b","","",126,N],[11,"to_imag_b","","",126,N],[11,"phase_b","","",126,N],[11,"magnitude_b","","",127,N],[11,"magnitude_squared_b","","",127,N],[11,"to_real_b","","",127,N],[11,"to_imag_b","","",127,N],[11,"phase_b","","",127,N],[11,"correlate","","",127,[[["self"],["b"],["o"]],["result",["errorreason"]]]],[11,"correlate","","",126,[[["self"],["b"],["o"]],["result",["errorreason"]]]],[11,"correlate","","",124,[[["self"],["b"],["o"]],["result",["errorreason"]]]],[11,"correlate","","",125,[[["self"],["b"],["o"]],["result",["errorreason"]]]],[11,"wrap","","",125,N],[11,"unwrap","","",125,N],[11,"wrap","","",124,N],[11,"unwrap","","",124,N],[11,"wrap","","",126,N],[11,"unwrap","","",126,N],[11,"wrap","","",127,N],[11,"unwrap","","",127,N],[11,"resize","","",127,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"resize","","",126,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"resize","","",125,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"resize","","",124,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"sum_prec","","",127,N],[11,"sum_sq_prec","","",127,N],[11,"sum_prec","","",124,[[["self"]],["vec"]]],[11,"sum_sq_prec","","",124,[[["self"]],["vec"]]],[11,"sum_prec","","",126,N],[11,"sum_sq_prec","","",126,N],[11,"sum_prec","","",125,N],[11,"sum_sq_prec","","",125,N],[11,"apply_window","","",125,N],[11,"unapply_window","","",125,N],[11,"apply_window","","",124,N],[11,"unapply_window","","",124,N],[11,"apply_window","","",126,N],[11,"unapply_window","","",126,N],[11,"apply_window","","",127,N],[11,"unapply_window","","",127,N],[11,"reverse","","",125,N],[11,"swap_halves","","",125,N],[11,"reverse","","",124,N],[11,"swap_halves","","",124,N],[11,"reverse","","",127,N],[11,"swap_halves","","",127,N],[11,"reverse","","",126,N],[11,"swap_halves","","",126,N],[11,"ln_approx","","",127,N],[11,"exp_approx","","",127,N],[11,"sin_approx","","",127,N],[11,"cos_approx","","",127,N],[11,"log_approx","","",127,N],[11,"expf_approx","","",127,N],[11,"powf_approx","","",127,N],[11,"ln_approx","","",125,N],[11,"exp_approx","","",125,N],[11,"sin_approx","","",125,N],[11,"cos_approx","","",125,N],[11,"log_approx","","",125,N],[11,"expf_approx","","",125,N],[11,"powf_approx","","",125,N],[11,"ln_approx","","",124,N],[11,"exp_approx","","",124,N],[11,"sin_approx","","",124,N],[11,"cos_approx","","",124,N],[11,"log_approx","","",124,N],[11,"expf_approx","","",124,N],[11,"powf_approx","","",124,N],[11,"ln_approx","","",126,N],[11,"exp_approx","","",126,N],[11,"sin_approx","","",126,N],[11,"cos_approx","","",126,N],[11,"log_approx","","",126,N],[11,"expf_approx","","",126,N],[11,"powf_approx","","",126,N],[11,"convolve","","",124,N],[11,"convolve","","",126,N],[11,"convolve","","",124,N],[11,"convolve","","",126,N],[11,"convolve","","",127,N],[11,"convolve","","",125,N],[11,"convolve","","",127,N],[11,"convolve","","",125,N],[11,"scale","","",125,N],[11,"scale","","",126,N],[11,"scale","","",124,N],[11,"scale","","",126,N],[11,"scale","","",127,N],[11,"scale","","",124,N],[11,"scale","","",125,N],[11,"scale","","",127,N],[11,"to_complex_b","","",127,N],[11,"to_complex_b","","",124,N],[11,"to_complex_b","","",125,N],[11,"to_complex_b","","",126,N],[11,"sqrt","","",125,N],[11,"square","","",125,N],[11,"root","","",125,N],[11,"powf","","",125,N],[11,"ln","","",125,N],[11,"exp","","",125,N],[11,"log","","",125,N],[11,"expf","","",125,N],[11,"sqrt","","",126,N],[11,"square","","",126,N],[11,"root","","",126,N],[11,"powf","","",126,N],[11,"ln","","",126,N],[11,"exp","","",126,N],[11,"log","","",126,N],[11,"expf","","",126,N],[11,"sqrt","","",124,N],[11,"square","","",124,N],[11,"root","","",124,N],[11,"powf","","",124,N],[11,"ln","","",124,N],[11,"exp","","",124,N],[11,"log","","",124,N],[11,"expf","","",124,N],[11,"sqrt","","",127,N],[11,"square","","",127,N],[11,"root","","",127,N],[11,"powf","","",127,N],[11,"ln","","",127,N],[11,"exp","","",127,N],[11,"log","","",127,N],[11,"expf","","",127,N],[11,"delta","","",124,[[["self"]],["t"]]],[11,"set_delta","","",124,N],[11,"row_len","","",124,[[["self"]],["usize"]]],[11,"row_points","","",124,[[["self"]],["usize"]]],[11,"col_len","","",124,[[["self"]],["usize"]]],[11,"rows","","",124,N],[11,"rows_mut","","",124,N],[11,"delta","","",127,[[["self"]],["t"]]],[11,"set_delta","","",127,N],[11,"row_len","","",127,[[["self"]],["usize"]]],[11,"row_points","","",127,[[["self"]],["usize"]]],[11,"col_len","","",127,[[["self"]],["usize"]]],[11,"rows","","",127,N],[11,"rows_mut","","",127,N],[11,"delta","","",126,[[["self"]],["t"]]],[11,"set_delta","","",126,N],[11,"row_len","","",126,[[["self"]],["usize"]]],[11,"row_points","","",126,[[["self"]],["usize"]]],[11,"col_len","","",126,[[["self"]],["usize"]]],[11,"rows","","",126,N],[11,"rows_mut","","",126,N],[11,"delta","","",125,[[["self"]],["t"]]],[11,"set_delta","","",125,N],[11,"row_len","","",125,[[["self"]],["usize"]]],[11,"row_points","","",125,[[["self"]],["usize"]]],[11,"col_len","","",125,[[["self"]],["usize"]]],[11,"rows","","",125,N],[11,"rows_mut","","",125,N],[11,"get","","",125,N],[11,"get","","",124,N],[11,"get","","",127,N],[11,"get","","",126,N],[11,"offset","","",126,N],[11,"offset","","",125,N],[11,"offset","","",127,N],[11,"offset","","",125,N],[11,"offset","","",126,N],[11,"offset","","",124,N],[11,"offset","","",124,N],[11,"offset","","",127,N],[11,"sum","basic_dsp","",32,[[["self"]],["complex"]]],[11,"sum_sq","","",32,[[["self"]],["complex"]]],[11,"sum","","",32,[[["self"]],["t"]]],[11,"sum_sq","","",32,[[["self"]],["t"]]],[11,"add_smaller","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"sub_smaller","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"mul_smaller","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"div_smaller","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"statistics_split","","",32,[[["self"],["usize"]],["result",["arrayvec","errorreason"]]]],[11,"statistics_split","","",32,[[["self"],["usize"]],["result",["arrayvec","errorreason"]]]],[11,"clone","basic_dsp::meta","",113,[[["self"]],["freq"]]],[11,"clone","basic_dsp","",83,[[["self"]],["paddingoption"]]],[11,"clone","basic_dsp::meta","",5,[[["self"]],["timeorfreq"]]],[11,"clone","basic_dsp","",22,[[["self"]],["datadomain"]]],[11,"clone","","",122,[[["self"]],["typemetadata"]]],[11,"clone","","",84,[[["self"]],["multicoresettings"]]],[11,"clone","basic_dsp::meta","",4,[[["self"]],["realorcomplex"]]],[11,"clone","basic_dsp","",56,[[["self"]],["errorreason"]]],[11,"clone","basic_dsp::meta","",110,[[["self"]],["real"]]],[11,"clone","basic_dsp","",80,[[["self"]],["statistics"]]],[11,"clone","basic_dsp::meta","",112,[[["self"]],["time"]]],[11,"clone","basic_dsp","",32,[[["self"]],["dspvec"]]],[11,"clone_from","","",32,N],[11,"clone","basic_dsp::meta","",111,[[["self"]],["complex"]]],[11,"statistics","basic_dsp","",32,[[["self"]],["statistics"]]],[11,"statistics","","",32,[[["self"]],["statistics",["complex"]]]],[11,"to_complex_b","","",32,N],[11,"scale","","",32,N],[11,"scale","","",32,N],[11,"split_into","","",32,N],[11,"sqrt","","",32,N],[11,"square","","",32,N],[11,"root","","",32,N],[11,"powf","","",32,N],[11,"ln","","",32,N],[11,"exp","","",32,N],[11,"log","","",32,N],[11,"expf","","",32,N],[11,"zero_pad_b","","",32,[[["self"],["b"],["usize"],["paddingoption"]],["result",["errorreason"]]]],[11,"zero_interleave_b","","",32,N],[11,"multiply_frequency_response","","",32,N],[11,"multiply_frequency_response","","",32,N],[11,"zero_pad","","",32,[[["self"],["usize"],["paddingoption"]],["result",["errorreason"]]]],[11,"zero_interleave","","",32,[[["self"],["u32"]],["result",["errorreason"]]]],[11,"reverse","","",32,N],[11,"swap_halves","","",32,N],[11,"resize","","",32,[[["self"],["usize"]],["result",["errorreason"]]]],[11,"plain_fft","","",32,N],[11,"fft","","",32,N],[11,"windowed_fft","","",32,N],[11,"domain","","",122,[[["self"]],["datadomain"]]],[11,"is_complex","","",122,[[["self"]],["bool"]]],[11,"domain","","",32,[[["self"]],["datadomain"]]],[11,"is_complex","","",32,[[["self"]],["bool"]]],[11,"multiply_complex_exponential","","",32,N],[11,"conj","","",32,N],[11,"deref","","",121,N],[11,"deref","","",120,N],[11,"deref","","",116,N],[11,"deref","","",117,N],[11,"interpolate_lin","","",32,N],[11,"interpolate_hermite","","",32,N],[11,"deref_mut","","",121,N],[11,"deref_mut","","",120,N],[11,"deref_mut","","",117,N],[11,"deref_mut","","",116,N],[11,"domain","basic_dsp::meta","",5,[[["self"]],["datadomain"]]],[11,"to_freq","","",5,N],[11,"to_time","","",5,N],[11,"domain","","",113,[[["self"]],["datadomain"]]],[11,"to_time","","",113,N],[11,"to_freq","","",113,N],[11,"domain","","",112,[[["self"]],["datadomain"]]],[11,"to_freq","","",112,N],[11,"to_time","","",112,N],[11,"zero","basic_dsp::numbers","",12,[[],["complex"]]],[11,"trade","basic_dsp","",116,N],[11,"trade","","",120,N],[11,"trade","","",117,N],[11,"trade","","",121,N],[11,"correlate","","",32,[[["self"],["b"],["o"]],["result",["errorreason"]]]],[11,"prepare_argument","","",32,N],[11,"prepare_argument_padded","","",32,N],[11,"add","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"sub","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"mul","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"div","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"get_meta_data","","",32,[[["self"]],["typemetadata"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","basic_dsp::meta","",110,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","basic_dsp","",83,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","basic_dsp::meta","",5,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",113,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","basic_dsp","",80,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","basic_dsp::meta","",4,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","basic_dsp","",32,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","basic_dsp::meta","",111,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","basic_dsp","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",84,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","basic_dsp::meta","",112,[[["self"],["formatter"]],["result",["error"]]]],[11,"to_complex","basic_dsp","",32,[[["self"]],["result"]]],[11,"interpolatef","","",32,N],[11,"interpolatei","","",32,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["result",["errorreason"]]]],[11,"interpft","","",32,N],[11,"interpolate","","",32,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["result",["errorreason"]]]],[11,"decimatei","","",32,N],[11,"dot_product_prec","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"dot_product_prec","","",32,[[["self"],["o"]],["result",["complex","errorreason"]]]],[11,"dot_product","","",32,[[["self"],["o"]],["result",["errorreason"]]]],[11,"dot_product","","",32,[[["self"],["o"]],["result",["complex","errorreason"]]]],[11,"delta","","",32,[[["self"]],["t"]]],[11,"set_delta","","",32,N],[11,"len","","",32,[[["self"]],["usize"]]],[11,"is_empty","","",32,[[["self"]],["bool"]]],[11,"points","","",32,[[["self"]],["usize"]]],[11,"get_multicore_settings","","",32,[[["self"]],["multicoresettings"]]],[11,"set_multicore_settings","","",32,N],[11,"alloc_len","","",32,[[["self"]],["usize"]]],[11,"convolve_signal","","",32,[[["self"],["b"],["dspvec"]],["result",["errorreason"]]]],[11,"set_real_imag","","",32,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"set_mag_phase","","",32,[[["self"],["o"],["o"]],["result",["errorreason"]]]],[11,"from","","",32,[[["s"]],["dspvec",["real","time"]]]],[11,"from","","",32,[[["s"]],["dspvec",["complex","time"]]]],[11,"from","","",32,[[["s"]],["dspvec",["real","freq"]]]],[11,"from","","",32,[[["s"]],["dspvec",["complex","freq"]]]],[11,"plain_sfft","","",32,[[["self"],["b"]],["result"]]],[11,"sfft","","",32,[[["self"],["b"]],["result"]]],[11,"windowed_sfft","","",32,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"rededicate","","",32,[[["self"]],["o"]]],[11,"complex_mut","","",32,N],[11,"complex_mut","","",32,[[["self"],["usize"]],["complex"]]],[11,"complex_mut","","",32,N],[11,"complex_mut","","",32,N],[11,"complex_mut","","",32,N],[11,"eq","","",22,[[["self"],["datadomain"]],["bool"]]],[11,"eq","","",83,[[["self"],["paddingoption"]],["bool"]]],[11,"eq","basic_dsp::meta","",110,[[["self"],["real"]],["bool"]]],[11,"eq","basic_dsp","",80,[[["self"],["statistics"]],["bool"]]],[11,"ne","","",80,[[["self"],["statistics"]],["bool"]]],[11,"eq","basic_dsp::meta","",111,[[["self"],["complex"]],["bool"]]],[11,"eq","","",113,[[["self"],["freq"]],["bool"]]],[11,"eq","","",112,[[["self"],["time"]],["bool"]]],[11,"eq","","",4,[[["self"],["realorcomplex"]],["bool"]]],[11,"ne","","",4,[[["self"],["realorcomplex"]],["bool"]]],[11,"eq","","",5,[[["self"],["timeorfreq"]],["bool"]]],[11,"ne","","",5,[[["self"],["timeorfreq"]],["bool"]]],[11,"eq","basic_dsp","",56,[[["self"],["errorreason"]],["bool"]]],[11,"complex","","",32,[[["self"],["usize"]],["complex"]]],[11,"complex","","",32,N],[11,"complex","","",32,N],[11,"complex","","",32,N],[11,"complex","","",32,N],[11,"rededicate_from_force","","",32,[[["dspvec"]],["dspvec",["real","time"]]]],[11,"rededicate_with_runtime_data","","",32,[[["dspvec"],["bool"],["datadomain"]],["dspvec",["real","time"]]]],[11,"rededicate_from_force","","",32,[[["dspvec"]],["dspvec",["complex","freq"]]]],[11,"rededicate_with_runtime_data","","",32,[[["dspvec"],["bool"],["datadomain"]],["dspvec",["complex","freq"]]]],[11,"rededicate_from_force","","",32,[[["dspvec"]],["dspvec",["complex","time"]]]],[11,"rededicate_with_runtime_data","","",32,[[["dspvec"],["bool"],["datadomain"]],["dspvec",["complex","time"]]]],[11,"rededicate_from_force","","",32,[[["dspvec"]],["dspvec",["real","freq"]]]],[11,"rededicate_with_runtime_data","","",32,[[["dspvec"],["bool"],["datadomain"]],["dspvec",["real","freq"]]]],[11,"rededicate_from_force","","",32,[[["dspvec"]],["dspvec",["realorcomplex","timeorfreq"]]]],[11,"rededicate_with_runtime_data","","",32,[[["dspvec"],["bool"],["datadomain"]],["dspvec",["realorcomplex","timeorfreq"]]]],[11,"map_aggregate","","",32,[[["self"],["a"],["fmap"],["faggr"]],["result",["errorreason"]]]],[11,"map_aggregate","","",32,[[["self"],["a"],["fmap"],["faggr"]],["result",["errorreason"]]]],[11,"is_symmetric","basic_dsp::conv_types","",107,[[["self"]],["bool"]]],[11,"calc","","",107,[[["self"],["f32"]],["complex",["f32"]]]],[11,"is_symmetric","","",107,[[["self"]],["bool"]]],[11,"calc","","",107,[[["self"],["f64"]],["complex",["f64"]]]],[11,"is_symmetric","","",106,[[["self"]],["bool"]]],[11,"calc","","",106,[[["self"],["f64"]],["complex",["f64"]]]],[11,"is_symmetric","","",106,[[["self"]],["bool"]]],[11,"calc","","",106,[[["self"],["f32"]],["complex",["f32"]]]],[11,"default","basic_dsp","",119,[[],["singlebuffer"]]],[11,"default","basic_dsp::conv_types","",109,[[],["sincfunction"]]],[11,"plain_ifft","basic_dsp","",32,N],[11,"ifft","","",32,N],[11,"windowed_ifft","","",32,N],[11,"is_symmetric","basic_dsp::conv_types","",105,[[["self"]],["bool"]]],[11,"calc","","",105,[[["self"],["f32"]],["f32"]]],[11,"is_symmetric","","",105,[[["self"]],["bool"]]],[11,"calc","","",105,[[["self"],["f64"]],["f64"]]],[11,"is_symmetric","","",108,[[["self"]],["bool"]]],[11,"calc","","",108,[[["self"],["t"]],["t"]]],[11,"is_symmetric","","",109,[[["self"]],["bool"]]],[11,"calc","","",109,[[["self"],["t"]],["t"]]],[11,"ln_approx","basic_dsp","",32,N],[11,"exp_approx","","",32,N],[11,"sin_approx","","",32,N],[11,"cos_approx","","",32,N],[11,"log_approx","","",32,N],[11,"expf_approx","","",32,N],[11,"powf_approx","","",32,N],[11,"is_symmetric","basic_dsp::conv_types","",104,[[["self"]],["bool"]]],[11,"calc","","",104,[[["self"],["f32"]],["f32"]]],[11,"is_symmetric","","",109,[[["self"]],["bool"]]],[11,"calc","","",109,[[["self"],["t"]],["t"]]],[11,"is_symmetric","","",108,[[["self"]],["bool"]]],[11,"calc","","",108,[[["self"],["t"]],["t"]]],[11,"is_symmetric","","",104,[[["self"]],["bool"]]],[11,"calc","","",104,[[["self"],["f64"]],["f64"]]],[11,"add_prec","basic_dsp","",80,N],[11,"add_prec","","",80,N],[11,"wrap","","",32,N],[11,"unwrap","","",32,N],[11,"apply_window","","",32,N],[11,"unapply_window","","",32,N],[11,"sum_prec","","",32,[[["self"]],["complex",["f64"]]]],[11,"sum_sq_prec","","",32,[[["self"]],["complex",["f64"]]]],[11,"sum_prec","","",32,[[["self"]],["f64"]]],[11,"sum_sq_prec","","",32,[[["self"]],["f64"]]],[11,"sum_prec","","",32,[[["self"]],["complex",["f64"]]]],[11,"sum_sq_prec","","",32,[[["self"]],["complex",["f64"]]]],[11,"sum_prec","","",32,[[["self"]],["f64"]]],[11,"sum_sq_prec","","",32,[[["self"]],["f64"]]],[11,"index","","",32,[[["self"],["usize"]],["t"]]],[11,"index","","",32,N],[11,"index","","",32,N],[11,"index","","",32,N],[11,"index","","",32,N],[11,"statistics_split_prec","","",32,[[["self"],["usize"]],["result",["arrayvec","errorreason"]]]],[11,"statistics_split_prec","","",32,[[["self"],["usize"]],["result",["arrayvec","errorreason"]]]],[11,"statistics_split_prec","","",32,[[["self"],["usize"]],["result",["arrayvec","errorreason"]]]],[11,"statistics_split_prec","","",32,[[["self"],["usize"]],["result",["arrayvec","errorreason"]]]],[11,"statistics_prec","","",32,[[["self"]],["statistics",["f64"]]]],[11,"statistics_prec","","",32,[[["self"]],["statistics",["complex"]]]],[11,"statistics_prec","","",32,[[["self"]],["statistics",["complex"]]]],[11,"statistics_prec","","",32,[[["self"]],["statistics",["f64"]]]],[11,"is_symmetric","basic_dsp::window_functions","",115,[[["self"]],["bool"]]],[11,"window","","",115,[[["self"],["usize"],["usize"]],["t"]]],[11,"is_symmetric","","",114,[[["self"]],["bool"]]],[11,"window","","",114,[[["self"],["usize"],["usize"]],["t"]]],[11,"merge","basic_dsp","",32,N],[11,"offset","","",32,N],[11,"offset","","",32,N],[11,"mirror","","",32,N],[11,"fft_shift","","",32,N],[11,"ifft_shift","","",32,N],[11,"resize_b","","",32,[[["self"],["b"],["usize"]],["result",["errorreason"]]]],[11,"convolve","","",32,N],[11,"convolve","","",32,N],[11,"sin","","",32,N],[11,"cos","","",32,N],[11,"tan","","",32,N],[11,"asin","","",32,N],[11,"acos","","",32,N],[11,"atan","","",32,N],[11,"sinh","","",32,N],[11,"cosh","","",32,N],[11,"tanh","","",32,N],[11,"asinh","","",32,N],[11,"acosh","","",32,N],[11,"atanh","","",32,N],[11,"get_real","","",32,N],[11,"get_imag","","",32,N],[11,"get_magnitude","","",32,N],[11,"get_magnitude_squared","","",32,N],[11,"get_phase","","",32,N],[11,"get_real_imag","","",32,N],[11,"get_mag_phase","","",32,N],[11,"magnitude_b","","",32,N],[11,"magnitude_squared_b","","",32,N],[11,"to_real_b","","",32,N],[11,"to_imag_b","","",32,N],[11,"phase_b","","",32,N],[11,"rededicate_from","","",32,[[["o"]],["dspvec"]]],[11,"magnitude","","",32,N],[11,"magnitude_squared","","",32,N],[11,"to_real","","",32,N],[11,"to_imag","","",32,N],[11,"phase","","",32,N],[11,"map_inplace","","",32,N],[11,"map_inplace","","",32,N],[11,"diff","","",32,N],[11,"diff_with_start","","",32,N],[11,"cum_sum","","",32,N],[11,"plain_sifft","","",32,[[["self"],["b"]],["result"]]],[11,"sifft","","",32,[[["self"],["b"]],["result"]]],[11,"windowed_sifft","","",32,[[["self"],["b"],["windowfunction"]],["result"]]],[11,"index_mut","","",32,N],[11,"index_mut","","",32,N],[11,"index_mut","","",32,N],[11,"index_mut","","",32,N],[11,"index_mut","","",32,[[["self"],["usize"]],["t"]]],[11,"get","","",32,N],[11,"to_slice","","",32,N],[11,"is_complex","basic_dsp::meta","",111,[[["self"]],["bool"]]],[11,"to_complex","","",111,N],[11,"to_real","","",111,N],[11,"is_complex","","",4,[[["self"]],["bool"]]],[11,"to_complex","","",4,N],[11,"to_real","","",4,N],[11,"is_complex","","",110,[[["self"]],["bool"]]],[11,"to_complex","","",110,N],[11,"to_real","","",110,N],[11,"abs","basic_dsp","",32,N],[11,"empty","","",80,[[],["statistics",["complex"]]]],[11,"invalid","","",80,[[],["statistics",["complex"]]]],[11,"merge","","",80,N],[11,"merge_cols","","",80,N],[11,"empty_vec","","",80,[[["usize"]],["arrayvec"]]],[11,"add","","",80,N],[11,"empty","","",80,[[],["statistics"]]],[11,"invalid","","",80,[[],["statistics"]]],[11,"merge","","",80,N],[11,"merge_cols","","",80,N],[11,"empty_vec","","",80,[[["usize"]],["arrayvec"]]],[11,"add","","",80,N],[11,"borrow","","",123,N],[11,"alloc_len","","",123,[[["self"]],["usize"]]],[11,"borrow","","",118,N],[11,"alloc_len","","",118,[[["self"]],["usize"]]],[11,"borrow","","",119,N],[11,"alloc_len","","",119,[[["self"]],["usize"]]],[11,"one","basic_dsp::numbers","",12,[[],["complex"]]],[11,"is_one","","",12,[[["self"]],["bool"]]],[11,"sum","","",12,[[["i"]],["complex"]]],[11,"sum","","",12,[[["i"]],["complex"]]],[11,"from","","",12,[[["u"]],["option",["complex"]]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",12,[[["str"]],["result",["complex"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",12,[[],["complex"]]],[11,"add","","",12,[[["self"],["t"]],["complex"]]],[11,"add","","",12,[[["self"],["complex"]],["complex"]]],[11,"add","","",12,[[["self"],["complex"]],["complex"]]],[11,"add","","",12,[[["self"],["t"]],["complex"]]],[11,"mul_assign","","",12,N],[11,"mul_assign","","",12,N],[11,"mul_assign","","",12,N],[11,"mul_assign","","",12,N],[11,"add_assign","","",12,N],[11,"add_assign","","",12,N],[11,"add_assign","","",12,N],[11,"add_assign","","",12,N],[11,"clone","","",12,[[["self"]],["complex"]]],[11,"eq","","",12,[[["self"],["complex"]],["bool"]]],[11,"ne","","",12,[[["self"],["complex"]],["bool"]]],[11,"rem","","",12,[[["self"],["t"]],["complex"]]],[11,"rem","","",12,[[["self"],["complex"]],["complex"]]],[11,"rem","","",12,[[["self"],["complex"]],["complex"]]],[11,"rem","","",12,[[["self"],["t"]],["complex"]]],[11,"as_","","",12,[[["self"]],["u"]]],[11,"mul","","",12,[[["self"],["t"]],["complex"]]],[11,"mul","","",12,[[["self"],["complex"]],["complex"]]],[11,"mul","","",12,[[["self"],["complex"]],["complex"]]],[11,"mul","","",12,[[["self"],["t"]],["complex"]]],[11,"rem_assign","","",12,N],[11,"rem_assign","","",12,N],[11,"rem_assign","","",12,N],[11,"rem_assign","","",12,N],[11,"inv","","",12,[[["self"]],["complex"]]],[11,"from","","",12,[[["t"]],["complex"]]],[11,"from","","",12,[[["t"]],["complex"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",12,[[["str"],["u32"]],["result",["complex"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub","","",12,[[["self"],["complex"]],["complex"]]],[11,"sub","","",12,[[["self"],["t"]],["complex"]]],[11,"sub","","",12,[[["self"],["complex"]],["complex"]]],[11,"sub","","",12,[[["self"],["t"]],["complex"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"product","","",12,[[["i"]],["complex"]]],[11,"product","","",12,[[["i"]],["complex"]]],[11,"neg","","",12,[[["self"]],["complex"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"div_assign","","",12,N],[11,"div_assign","","",12,N],[11,"div_assign","","",12,N],[11,"div_assign","","",12,N],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"div","","",12,[[["self"],["complex"]],["complex"]]],[11,"div","","",12,[[["self"],["t"]],["complex"]]],[11,"div","","",12,[[["self"],["complex"]],["complex"]]],[11,"div","","",12,[[["self"],["t"]],["complex"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub_assign","","",12,N],[11,"sub_assign","","",12,N],[11,"sub_assign","","",12,N],[11,"sub_assign","","",12,N],[11,"from_usize","","",12,[[["usize"]],["option",["complex"]]]],[11,"from_isize","","",12,[[["isize"]],["option",["complex"]]]],[11,"from_u8","","",12,[[["u8"]],["option",["complex"]]]],[11,"from_u16","","",12,[[["u16"]],["option",["complex"]]]],[11,"from_u32","","",12,[[["u32"]],["option",["complex"]]]],[11,"from_u64","","",12,[[["u64"]],["option",["complex"]]]],[11,"from_i8","","",12,[[["i8"]],["option",["complex"]]]],[11,"from_i16","","",12,[[["i16"]],["option",["complex"]]]],[11,"from_i32","","",12,[[["i32"]],["option",["complex"]]]],[11,"from_i64","","",12,[[["i64"]],["option",["complex"]]]],[11,"from_u128","","",12,[[["u128"]],["option",["complex"]]]],[11,"from_i128","","",12,[[["i128"]],["option",["complex"]]]],[11,"from_f32","","",12,[[["f32"]],["option",["complex"]]]],[11,"from_f64","","",12,[[["f64"]],["option",["complex"]]]],[11,"hash","","",12,N],[11,"to_usize","","",12,[[["self"]],["option",["usize"]]]],[11,"to_isize","","",12,[[["self"]],["option",["isize"]]]],[11,"to_u8","","",12,[[["self"]],["option",["u8"]]]],[11,"to_u16","","",12,[[["self"]],["option",["u16"]]]],[11,"to_u32","","",12,[[["self"]],["option",["u32"]]]],[11,"to_u64","","",12,[[["self"]],["option",["u64"]]]],[11,"to_i8","","",12,[[["self"]],["option",["i8"]]]],[11,"to_i16","","",12,[[["self"]],["option",["i16"]]]],[11,"to_i32","","",12,[[["self"]],["option",["i32"]]]],[11,"to_i64","","",12,[[["self"]],["option",["i64"]]]],[11,"to_u128","","",12,[[["self"]],["option",["u128"]]]],[11,"to_i128","","",12,[[["self"]],["option",["i128"]]]],[11,"to_f32","","",12,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",12,[[["self"]],["option",["f64"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result",["error"]]]],[11,"zero","","",12,[[],["complex"]]],[11,"is_zero","","",12,[[["self"]],["bool"]]],[11,"table","basic_dsp::conv_types","Allows to inspect the generated lookup table",104,N],[11,"delta","","Gets the delta value which determines the resolution",104,[[["self"]],["t"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",104,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",104,[[["realimpulseresponse"],["f32"],["usize"]],["realtimelineartablelookup",["f32"]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",104,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",104,[[["realimpulseresponse"],["f64"],["usize"]],["realtimelineartablelookup",["f64"]]]],[11,"to_complex","","Convert the lookup table into complex number space",104,[[["self"]],["complextimelineartablelookup",["f32"]]]],[11,"to_complex","","Convert the lookup table into complex number space",104,[[["self"]],["complextimelineartablelookup",["f64"]]]],[11,"fft","","Convert the lookup table into a magnitude spectrum",104,[[["self"]],["realfrequencylineartablelookup",["f32"]]]],[11,"fft","","Convert the lookup table into a magnitude spectrum",104,[[["self"]],["realfrequencylineartablelookup",["f64"]]]],[11,"table","","Allows to inspect the generated lookup table",105,N],[11,"delta","","Gets the delta value which determines the resolution",105,[[["self"]],["t"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",105,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",105,[[["realfrequencyresponse"],["f32"],["usize"]],["realfrequencylineartablelookup",["f32"]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",105,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",105,[[["realfrequencyresponse"],["f64"],["usize"]],["realfrequencylineartablelookup",["f64"]]]],[11,"to_complex","","Convert the lookup table into complex number space",105,[[["self"]],["complexfrequencylineartablelookup",["f32"]]]],[11,"to_complex","","Convert the lookup table into complex number space",105,[[["self"]],["complexfrequencylineartablelookup",["f64"]]]],[11,"table","","Allows to inspect the generated lookup table",106,N],[11,"delta","","Gets the delta value which determines the resolution",106,[[["self"]],["t"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",106,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",106,[[["compleximpulseresponse"],["f32"],["usize"]],["complextimelineartablelookup",["f32"]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",106,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",106,[[["compleximpulseresponse"],["f64"],["usize"]],["complextimelineartablelookup",["f64"]]]],[11,"to_real","","Convert the lookup table into real number space",106,[[["self"]],["realtimelineartablelookup",["f32"]]]],[11,"to_real","","Convert the lookup table into real number space",106,[[["self"]],["realtimelineartablelookup",["f64"]]]],[11,"fft","","Convert the lookup table into frequency domain",106,[[["self"]],["complexfrequencylineartablelookup",["f32"]]]],[11,"fft","","Convert the lookup table into frequency domain",106,[[["self"]],["complexfrequencylineartablelookup",["f64"]]]],[11,"table","","Allows to inspect the generated lookup table",107,N],[11,"delta","","Gets the delta value which determines the resolution",107,[[["self"]],["t"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",107,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",107,[[["complexfrequencyresponse"],["f32"],["usize"]],["complexfrequencylineartablelookup",["f32"]]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",107,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",107,[[["complexfrequencyresponse"],["f64"],["usize"]],["complexfrequencylineartablelookup",["f64"]]]],[11,"to_real","","Convert the lookup table into real number space",107,[[["self"]],["realfrequencylineartablelookup",["f32"]]]],[11,"to_real","","Convert the lookup table into real number space",107,[[["self"]],["realfrequencylineartablelookup",["f64"]]]],[11,"ifft","","Convert the lookup table into time domain",107,[[["self"]],["complextimelineartablelookup",["f32"]]]],[11,"ifft","","Convert the lookup table into time domain",107,[[["self"]],["complextimelineartablelookup",["f64"]]]],[11,"new","","Creates a raised cosine function.",108,[[["t"]],["raisedcosinefunction"]]],[11,"new","","Creates a sinc function.",109,[[],["sincfunction"]]],[11,"new","basic_dsp::window_functions","Creates a new Hamming window",115,[[["t"]],["hammingwindow"]]],[11,"default","","Creates the default Hamming window as defined in GNU Octave.",115,[[],["hammingwindow"]]],[11,"new","basic_dsp::numbers","Create a new Complex",12,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",12,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",12,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",12,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",12,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",12,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",12,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",12,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",12,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",12,N],[11,"from_polar","","Convert a polar representation into a complex number.",12,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",12,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",12,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",12,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",12,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",12,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",12,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",12,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",12,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",12,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",12,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",12,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",12,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",12,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",12,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",12,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",12,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",12,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",12,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",12,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",12,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",12,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",12,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",12,[[["self"]],["bool"]]],[11,"new","basic_dsp","Creates a new buffer which is ready to be passed around.",119,[[],["singlebuffer"]]],[11,"with_capacity","","Creates a new buffer which is ready to be passed around.",119,[[["usize"]],["singlebuffer"]]],[11,"convolve_mat","","Convolves a vector of vectors (in this lib also considered a matrix) with a vector of impulse responses and stores the result in `target`.",32,N],[11,"is_erroneous","","Indicates whether or not the operations on this vector have been successful. Consider using the statically typed vector versions so that this check doesn't need to be performed.",32,[[["self"]],["bool"]]],[11,"default","","Creates multi core settings with default values",84,[[],["multicoresettings"]]],[11,"single_threaded","","Creates multi core settings so that no thread will be spawned.",84,[[],["multicoresettings"]]],[11,"parallel","","Creates multi core so that threads will be spawned if this appears to be beneficial.",84,[[],["multicoresettings"]]],[11,"new","","Creates multi core settings with the given values.",84,[[["usize"]],["multicoresettings"]]],[11,"with_thresholds","","Creates multi core settings with explicit thresholds.",84,[[["usize"],["usize"],["usize"],["usize"],["usize"]],["multicoresettings"]]],[11,"new","","Creates a new buffer from a storage type. The buffer will internally hold its storage for it's complete life time.",123,[[["s"]],["fixedlenbuffer"]]]],"paths":[[8,"RealImpulseResponse"],[8,"RealFrequencyResponse"],[8,"ComplexImpulseResponse"],[8,"ComplexFrequencyResponse"],[3,"RealOrComplex"],[3,"TimeOrFreq"],[8,"WindowFunction"],[8,"ToSimd"],[8,"Zero"],[8,"Num"],[8,"One"],[8,"Float"],[3,"Complex"],[8,"ResizeBufferedOps"],[8,"RededicateToOps"],[8,"ToSlice"],[8,"RededicateForceOps"],[8,"FrequencyMultiplication"],[8,"StatisticsOps"],[8,"ComplexIndexMut"],[8,"MetaData"],[8,"FromVector"],[4,"DataDomain"],[8,"ToDspVector"],[8,"Convolution"],[8,"ToTimeResult"],[8,"FrequencyDomainOperations"],[8,"PreciseSumOps"],[8,"ReorganizeDataOps"],[8,"SplitOps"],[8,"Resize"],[8,"RealInterpolationOps"],[3,"DspVec"],[8,"PreciseStatisticsOps"],[8,"CrossCorrelationArgumentOps"],[8,"ComplexToRealGetterOps"],[8,"MapInplaceOps"],[8,"Stats"],[8,"Vector"],[8,"Domain"],[8,"ComplexToRealTransformsOpsBuffered"],[8,"RealToComplexTransformsOpsBuffered"],[8,"Buffer"],[8,"SymmetricTimeToFrequencyDomainOperations"],[8,"ComplexIndex"],[8,"ComplexOps"],[8,"RealOps"],[8,"PreciseStats"],[8,"FrequencyToTimeDomainOperations"],[8,"PreciseStatisticsSplitOps"],[8,"InterpolationOps"],[8,"InsertZerosOps"],[8,"ElementaryOps"],[8,"StatisticsSplitOps"],[8,"SymmetricFrequencyToTimeDomainOperations"],[8,"SumOps"],[4,"ErrorReason"],[8,"DotProductOps"],[8,"TrigOps"],[8,"ApproximatedOps"],[8,"ToRealTimeResult"],[8,"ToComplexVector"],[8,"ComplexToRealSetterOps"],[8,"GetMetaData"],[8,"OffsetOps"],[8,"ToDspVectorPar"],[8,"CrossCorrelationOps"],[8,"ModuloOps"],[8,"ToFreqResult"],[8,"ScaleOps"],[8,"ComplexToRealTransformsOps"],[8,"MapAggregateOps"],[8,"ConvolutionOps"],[8,"PreciseDotProductOps"],[8,"ToSliceMut"],[8,"ToComplexResult"],[8,"ToRealVector"],[8,"RededicateOps"],[8,"PowerOps"],[8,"ToRealVectorPar"],[3,"Statistics"],[8,"TimeToFrequencyDomainOperations"],[8,"InsertZerosOpsBuffered"],[4,"PaddingOption"],[3,"MultiCoreSettings"],[8,"TimeDomainOperations"],[8,"MergeOps"],[8,"ElementaryWrapAroundOps"],[8,"BufferBorrow"],[8,"RealToComplexTransformsOps"],[8,"ToComplexVectorPar"],[8,"DiffSumOps"],[8,"InterleaveToVector"],[8,"ToRealResult"],[8,"ResizeOps"],[8,"NumberSpace"],[8,"ToComplexTimeMatrix"],[8,"Matrix"],[8,"FromMatrix"],[8,"ToDspMatrix"],[8,"ToComplexFreqMatrix"],[8,"ToRealTimeMatrix"],[8,"ToRealFreqMatrix"],[8,"ToMatrix"],[3,"RealTimeLinearTableLookup"],[3,"RealFrequencyLinearTableLookup"],[3,"ComplexTimeLinearTableLookup"],[3,"ComplexFrequencyLinearTableLookup"],[3,"RaisedCosineFunction"],[3,"SincFunction"],[3,"Real"],[3,"Complex"],[3,"Time"],[3,"Freq"],[3,"TriangularWindow"],[3,"HammingWindow"],[3,"NoTradeBufferBurrow"],[3,"SingleBufferBurrow"],[3,"NoBuffer"],[3,"SingleBuffer"],[3,"NoBufferBurrow"],[3,"FixedLenBufferBurrow"],[3,"TypeMetaData"],[3,"FixedLenBuffer"],[3,"MatrixMxN"],[3,"Matrix2xN"],[3,"Matrix3xN"],[3,"Matrix4xN"]]};
searchIndex["basic_dsp_matrix"]={"doc":"In this lib a matrix is simply a collection of vectors. The idea is that the matrix types can be used to reduce the size of a large matrix and that the return types are basic enough so that other specialized matrix libs can do the rest of the work, e.g. inverting the resulting matrix.","items":[[3,"MatrixMxN","basic_dsp_matrix","A matrix which can hold 1 to N vectors.",N,N],[3,"Matrix2xN","","A matrix which can hold exactly 2 vectors.",N,N],[3,"Matrix3xN","","A matrix which can hold exactly 3 vectors.",N,N],[3,"Matrix4xN","","A matrix which can hold exactly 4 vectors.",N,N],[6,"Matrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in any number space or domain.",N,N],[6,"Matrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in any number space or domain.",N,N],[6,"RealTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in real number space and time domain.",N,N],[6,"RealTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in real number space and time domain.",N,N],[6,"ComplexTimeMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in complex number space and time domain.",N,N],[6,"ComplexTimeMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in complex number space and time domain.",N,N],[6,"RealFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in real number space and frequency domain.",N,N],[6,"RealFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in real number space and frequency domain.",N,N],[6,"ComplexFreqMatrix32xN","","A matrix which can hold 1 to N vectors of 32 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"ComplexFreqMatrix64xN","","A matrix which can hold 1 to N vectors of 64 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"Matrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in any number space or domain.",N,N],[6,"Matrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in any number space or domain.",N,N],[6,"RealTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in real number space and time domain.",N,N],[6,"RealTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in real number space and time domain.",N,N],[6,"ComplexTimeMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in complex number space and time domain.",N,N],[6,"ComplexTimeMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in complex number space and time domain.",N,N],[6,"RealFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in real number space and frequency domain.",N,N],[6,"RealFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in real number space and frequency domain.",N,N],[6,"ComplexFreqMatrix32x2","","A matrix which can hold exactly 2 vectors of 32 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"ComplexFreqMatrix64x2","","A matrix which can hold exactly 2 vectors of 64 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"Matrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in any number space or domain.",N,N],[6,"Matrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit floating point numbers in any number space or domain.",N,N],[6,"RealTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in real number space and time domain.",N,N],[6,"RealTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit floating point numbers in real number space and time domain.",N,N],[6,"ComplexTimeMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in complex number space and time domain.",N,N],[6,"ComplexTimeMatrix64x3","","A matrix which can hold exactly 3 vectors of 64 bit floating point numbers in complex number space and time domain.",N,N],[6,"RealFreqMatrix32x3","","A matrix which can hold exactly 3 vectors of 32 bit floating point numbers in real number space and frequency domain.",N,N],[6,"RealFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in real number space and frequency domain.",N,N],[6,"ComplexFreqMatrix32x3","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"ComplexFreqMatrix64x3","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"Matrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in any number space or domain.",N,N],[6,"Matrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in any number space or domain.",N,N],[6,"RealTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in real number space and time domain.",N,N],[6,"RealTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in real number space and time domain.",N,N],[6,"ComplexTimeMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in complex number space and time domain.",N,N],[6,"ComplexTimeMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in complex number space and time domain.",N,N],[6,"RealFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in real number space and frequency domain.",N,N],[6,"RealFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in real number space and frequency domain.",N,N],[6,"ComplexFreqMatrix32x4","","A matrix which can hold exactly 4 vectors of 32 bit floating point numbers in complex number space and frequency domain.",N,N],[6,"ComplexFreqMatrix64x4","","A matrix which can hold exactly 4 vectors of 64 bit floating point numbers in complex number space and frequency domain.",N,N],[8,"Matrix","","A trait for matrix types. In this lib a matrix is simply a collection of vectors. The idea is that the matrix types can be used to reduce the size of a large matrix and that the return types are basic enough so that other specialized matrix libs can do the rest of the work, e.g. inverting the resulting matrix.",N,N],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",0,[[["self"]],["t"]]],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",0,[[["self"],["t"]]]],[10,"row_len","","The number of valid elements in each row of the matrix. This can be changed with the `Resize` trait.",0,[[["self"]],["usize"]]],[10,"row_points","","The number of valid points in a row. If the matrix is complex then every valid point consists of two floating point numbers, while for real vectors every point only consists of one floating point number.",0,[[["self"]],["usize"]]],[10,"col_len","","The number of columns in the matrix.",0,[[["self"]],["usize"]]],[10,"rows","","Gets the rows as vectors.",0,N],[10,"rows_mut","","Gets the rows as mutable vectors.",0,N],[8,"ToMatrix","","Conversion from a collection of vectors to a matrix.",N,N],[16,"Output","","",1,N],[10,"to_mat","","Create a new matrix from a collection of vectors.",1,N],[8,"ToDspMatrix","","Conversion from a generic data type into a dsp matrix which tracks its meta information (domain and number space) only at runtime. See `ToRealMatrix` and `ToComplexMatrix` for alternatives which track most of the meta data with the type system and therefore avoid runtime errors.",N,N],[16,"Output","","",2,N],[10,"to_gen_dsp_mat","","Create a new generic matrix. `delta` can be changed after construction with a call of `set_delta`.",2,N],[8,"ToRealTimeMatrix","","Conversion from a generic data type into a dsp matrix with real data.",N,N],[16,"Output","","",3,N],[10,"to_real_time_mat","","Create a new matrix in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",3,N],[8,"ToRealFreqMatrix","","Conversion from a generic data type into a dsp matrix with real data.",N,N],[16,"Output","","",4,N],[10,"to_real_freq_mat","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",4,N],[8,"ToComplexTimeMatrix","","Conversion from a generic data type into a dsp vector with complex data.",N,N],[16,"Output","","",5,N],[10,"to_complex_time_mat","","Create a new matrix in complex number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",5,N],[8,"ToComplexFreqMatrix","","Conversion from a generic data type into a dsp vector with complex data.",N,N],[16,"Output","","",6,N],[10,"to_complex_freq_mat","","Create a new matrix in complex number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",6,N],[8,"FromMatrix","","Retrieves the underlying storage from a matrix.",N,N],[16,"Output","","Type of the underlying storage of a matrix.",7,N],[10,"get","","Gets the underlying matrix and the number of elements which contain valid.",7,N],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"delta","","",8,[[["self"]],["t"]]],[11,"set_delta","","",8,[[["self"],["t"]]]],[11,"row_len","","",8,[[["self"]],["usize"]]],[11,"row_points","","",8,[[["self"]],["usize"]]],[11,"col_len","","",8,[[["self"]],["usize"]]],[11,"rows","","",8,N],[11,"rows_mut","","",8,N],[11,"delta","","",9,[[["self"]],["t"]]],[11,"set_delta","","",9,[[["self"],["t"]]]],[11,"row_len","","",9,[[["self"]],["usize"]]],[11,"row_points","","",9,[[["self"]],["usize"]]],[11,"col_len","","",9,[[["self"]],["usize"]]],[11,"rows","","",9,N],[11,"rows_mut","","",9,N],[11,"delta","","",10,[[["self"]],["t"]]],[11,"set_delta","","",10,[[["self"],["t"]]]],[11,"row_len","","",10,[[["self"]],["usize"]]],[11,"row_points","","",10,[[["self"]],["usize"]]],[11,"col_len","","",10,[[["self"]],["usize"]]],[11,"rows","","",10,N],[11,"rows_mut","","",10,N],[11,"delta","","",11,[[["self"]],["t"]]],[11,"set_delta","","",11,[[["self"],["t"]]]],[11,"row_len","","",11,[[["self"]],["usize"]]],[11,"row_points","","",11,[[["self"]],["usize"]]],[11,"col_len","","",11,[[["self"]],["usize"]]],[11,"rows","","",11,N],[11,"rows_mut","","",11,N],[11,"get","","",8,N],[11,"get","","",9,N],[11,"get","","",10,N],[11,"get","","",11,N],[11,"rededicate_from_force","","",8,[[["matrixmxn"]],["self"]]],[11,"rededicate_with_runtime_data","","",8,[[["matrixmxn"],["bool"],["datadomain"]],["self"]]],[11,"rededicate_from_force","","",9,[[["matrix2xn"]],["self"]]],[11,"rededicate_with_runtime_data","","",9,[[["matrix2xn"],["bool"],["datadomain"]],["self"]]],[11,"rededicate_from_force","","",10,[[["matrix3xn"]],["self"]]],[11,"rededicate_with_runtime_data","","",10,[[["matrix3xn"],["bool"],["datadomain"]],["self"]]],[11,"rededicate_from_force","","",11,[[["matrix4xn"]],["self"]]],[11,"rededicate_with_runtime_data","","",11,[[["matrix4xn"],["bool"],["datadomain"]],["self"]]],[11,"multiply_frequency_response","","",8,[[["self"],["realfrequencyresponse"],["t"]]]],[11,"multiply_frequency_response","","",8,[[["self"],["complexfrequencyresponse"],["t"]]]],[11,"multiply_frequency_response","","",9,[[["self"],["realfrequencyresponse"],["t"]]]],[11,"multiply_frequency_response","","",9,[[["self"],["complexfrequencyresponse"],["t"]]]],[11,"multiply_frequency_response","","",10,[[["self"],["realfrequencyresponse"],["t"]]]],[11,"multiply_frequency_response","","",10,[[["self"],["complexfrequencyresponse"],["t"]]]],[11,"multiply_frequency_response","","",11,[[["self"],["realfrequencyresponse"],["t"]]]],[11,"multiply_frequency_response","","",11,[[["self"],["complexfrequencyresponse"],["t"]]]],[11,"statistics","","",8,[[["self"]],["vec",["statistics"]]]],[11,"statistics","","",9,N],[11,"statistics","","",10,N],[11,"statistics","","",11,N],[11,"domain","","",8,[[["self"]],["datadomain"]]],[11,"is_complex","","",8,[[["self"]],["bool"]]],[11,"domain","","",9,[[["self"]],["datadomain"]]],[11,"is_complex","","",9,[[["self"]],["bool"]]],[11,"domain","","",10,[[["self"]],["datadomain"]]],[11,"is_complex","","",10,[[["self"]],["bool"]]],[11,"domain","","",11,[[["self"]],["datadomain"]]],[11,"is_complex","","",11,[[["self"]],["bool"]]],[11,"convolve","","",8,[[["self"],["b"],["realimpulseresponse"],["t"],["usize"]]]],[11,"convolve","","",8,[[["self"],["b"],["compleximpulseresponse"],["t"],["usize"]]]],[11,"convolve","","",9,[[["self"],["b"],["realimpulseresponse"],["t"],["usize"]]]],[11,"convolve","","",9,[[["self"],["b"],["compleximpulseresponse"],["t"],["usize"]]]],[11,"convolve","","",10,[[["self"],["b"],["realimpulseresponse"],["t"],["usize"]]]],[11,"convolve","","",10,[[["self"],["b"],["compleximpulseresponse"],["t"],["usize"]]]],[11,"convolve","","",11,[[["self"],["b"],["realimpulseresponse"],["t"],["usize"]]]],[11,"convolve","","",11,[[["self"],["b"],["compleximpulseresponse"],["t"],["usize"]]]],[11,"sum_prec","","",8,[[["self"]],["vec"]]],[11,"sum_sq_prec","","",8,[[["self"]],["vec"]]],[11,"sum_prec","","",9,N],[11,"sum_sq_prec","","",9,N],[11,"sum_prec","","",10,N],[11,"sum_sq_prec","","",10,N],[11,"sum_prec","","",11,N],[11,"sum_sq_prec","","",11,N],[11,"reverse","","",8,[[["self"]]]],[11,"swap_halves","","",8,[[["self"]]]],[11,"reverse","","",9,[[["self"]]]],[11,"swap_halves","","",9,[[["self"]]]],[11,"reverse","","",10,[[["self"]]]],[11,"swap_halves","","",10,[[["self"]]]],[11,"reverse","","",11,[[["self"]]]],[11,"swap_halves","","",11,[[["self"]]]],[11,"interpolate_hermite","","",8,[[["self"],["b"],["t"],["t"]]]],[11,"interpolate_lin","","",8,[[["self"],["b"],["t"],["t"]]]],[11,"interpolate_hermite","","",9,[[["self"],["b"],["t"],["t"]]]],[11,"interpolate_lin","","",9,[[["self"],["b"],["t"],["t"]]]],[11,"interpolate_hermite","","",10,[[["self"],["b"],["t"],["t"]]]],[11,"interpolate_lin","","",10,[[["self"],["b"],["t"],["t"]]]],[11,"interpolate_hermite","","",11,[[["self"],["b"],["t"],["t"]]]],[11,"interpolate_lin","","",11,[[["self"],["b"],["t"],["t"]]]],[11,"statistics_prec","","",8,[[["self"]],["vec",["statistics"]]]],[11,"statistics_prec","","",9,N],[11,"statistics_prec","","",10,N],[11,"statistics_prec","","",11,N],[11,"magnitude_b","","",8,N],[11,"magnitude_squared_b","","",8,N],[11,"to_real_b","","",8,N],[11,"to_imag_b","","",8,N],[11,"phase_b","","",8,N],[11,"magnitude_b","","",9,N],[11,"magnitude_squared_b","","",9,N],[11,"to_real_b","","",9,N],[11,"to_imag_b","","",9,N],[11,"phase_b","","",9,N],[11,"magnitude_b","","",10,N],[11,"magnitude_squared_b","","",10,N],[11,"to_real_b","","",10,N],[11,"to_imag_b","","",10,N],[11,"phase_b","","",10,N],[11,"magnitude_b","","",11,N],[11,"magnitude_squared_b","","",11,N],[11,"to_real_b","","",11,N],[11,"to_imag_b","","",11,N],[11,"phase_b","","",11,N],[11,"abs","","",8,[[["self"]]]],[11,"abs","","",9,[[["self"]]]],[11,"abs","","",10,[[["self"]]]],[11,"abs","","",11,[[["self"]]]],[11,"interpolatef","","",8,[[["self"],["b"],["realimpulseresponse"],["t"],["t"],["usize"]]]],[11,"interpolatei","","",8,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["voidresult"]]],[11,"interpolate","","",8,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["voidresult"]]],[11,"interpft","","",8,[[["self"],["b"],["usize"]]]],[11,"decimatei","","",8,[[["self"],["u32"],["u32"]]]],[11,"interpolatef","","",9,[[["self"],["b"],["realimpulseresponse"],["t"],["t"],["usize"]]]],[11,"interpolatei","","",9,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["voidresult"]]],[11,"interpolate","","",9,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["voidresult"]]],[11,"interpft","","",9,[[["self"],["b"],["usize"]]]],[11,"decimatei","","",9,[[["self"],["u32"],["u32"]]]],[11,"interpolatef","","",10,[[["self"],["b"],["realimpulseresponse"],["t"],["t"],["usize"]]]],[11,"interpolatei","","",10,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["voidresult"]]],[11,"interpolate","","",10,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["voidresult"]]],[11,"interpft","","",10,[[["self"],["b"],["usize"]]]],[11,"decimatei","","",10,[[["self"],["u32"],["u32"]]]],[11,"interpolatef","","",11,[[["self"],["b"],["realimpulseresponse"],["t"],["t"],["usize"]]]],[11,"interpolatei","","",11,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["voidresult"]]],[11,"interpolate","","",11,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["voidresult"]]],[11,"interpft","","",11,[[["self"],["b"],["usize"]]]],[11,"decimatei","","",11,[[["self"],["u32"],["u32"]]]],[11,"plain_sifft","","",8,[[["self"],["b"]],["transres"]]],[11,"sifft","","",8,[[["self"],["b"]],["transres"]]],[11,"windowed_sifft","","",8,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"plain_sifft","","",9,[[["self"],["b"]],["transres"]]],[11,"sifft","","",9,[[["self"],["b"]],["transres"]]],[11,"windowed_sifft","","",9,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"plain_sifft","","",10,[[["self"],["b"]],["transres"]]],[11,"sifft","","",10,[[["self"],["b"]],["transres"]]],[11,"windowed_sifft","","",10,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"plain_sifft","","",11,[[["self"],["b"]],["transres"]]],[11,"sifft","","",11,[[["self"],["b"]],["transres"]]],[11,"windowed_sifft","","",11,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"statistics_split","","",8,[[["self"],["usize"]],["scalarresult",["vec"]]]],[11,"statistics_split","","",9,[[["self"],["usize"]],["scalarresult"]]],[11,"statistics_split","","",10,[[["self"],["usize"]],["scalarresult"]]],[11,"statistics_split","","",11,[[["self"],["usize"]],["scalarresult"]]],[11,"dot_product","","",8,[[["self"],["matrixmxn"]],["scalarresult",["vec"]]]],[11,"dot_product","","",9,[[["self"],["matrix2xn"]],["scalarresult",["vec"]]]],[11,"dot_product","","",10,[[["self"],["matrix3xn"]],["scalarresult",["vec"]]]],[11,"dot_product","","",11,[[["self"],["matrix4xn"]],["scalarresult",["vec"]]]],[11,"dot_product","","",8,[[["self"],["v"]],["scalarresult",["vec"]]]],[11,"dot_product","","",9,[[["self"],["v"]],["scalarresult"]]],[11,"dot_product","","",10,[[["self"],["v"]],["scalarresult"]]],[11,"dot_product","","",11,[[["self"],["v"]],["scalarresult"]]],[11,"ln_approx","","",8,[[["self"]]]],[11,"exp_approx","","",8,[[["self"]]]],[11,"sin_approx","","",8,[[["self"]]]],[11,"cos_approx","","",8,[[["self"]]]],[11,"log_approx","","",8,[[["self"],["t"]]]],[11,"expf_approx","","",8,[[["self"],["t"]]]],[11,"powf_approx","","",8,[[["self"],["t"]]]],[11,"ln_approx","","",9,[[["self"]]]],[11,"exp_approx","","",9,[[["self"]]]],[11,"sin_approx","","",9,[[["self"]]]],[11,"cos_approx","","",9,[[["self"]]]],[11,"log_approx","","",9,[[["self"],["t"]]]],[11,"expf_approx","","",9,[[["self"],["t"]]]],[11,"powf_approx","","",9,[[["self"],["t"]]]],[11,"ln_approx","","",10,[[["self"]]]],[11,"exp_approx","","",10,[[["self"]]]],[11,"sin_approx","","",10,[[["self"]]]],[11,"cos_approx","","",10,[[["self"]]]],[11,"log_approx","","",10,[[["self"],["t"]]]],[11,"expf_approx","","",10,[[["self"],["t"]]]],[11,"powf_approx","","",10,[[["self"],["t"]]]],[11,"ln_approx","","",11,[[["self"]]]],[11,"exp_approx","","",11,[[["self"]]]],[11,"sin_approx","","",11,[[["self"]]]],[11,"cos_approx","","",11,[[["self"]]]],[11,"log_approx","","",11,[[["self"],["t"]]]],[11,"expf_approx","","",11,[[["self"],["t"]]]],[11,"powf_approx","","",11,[[["self"],["t"]]]],[11,"set_real_imag","","",8,[[["self"],["o"],["o"]],["voidresult"]]],[11,"set_mag_phase","","",8,[[["self"],["o"],["o"]],["voidresult"]]],[11,"set_real_imag","","",9,[[["self"],["o"],["o"]],["voidresult"]]],[11,"set_mag_phase","","",9,[[["self"],["o"],["o"]],["voidresult"]]],[11,"set_real_imag","","",10,[[["self"],["o"],["o"]],["voidresult"]]],[11,"set_mag_phase","","",10,[[["self"],["o"],["o"]],["voidresult"]]],[11,"set_real_imag","","",11,[[["self"],["o"],["o"]],["voidresult"]]],[11,"set_mag_phase","","",11,[[["self"],["o"],["o"]],["voidresult"]]],[11,"correlate","","",8,[[["self"],["b"],["o"]],["voidresult"]]],[11,"correlate","","",9,[[["self"],["b"],["o"]],["voidresult"]]],[11,"correlate","","",10,[[["self"],["b"],["o"]],["voidresult"]]],[11,"correlate","","",11,[[["self"],["b"],["o"]],["voidresult"]]],[11,"wrap","","",8,[[["self"],["t"]]]],[11,"unwrap","","",8,[[["self"],["t"]]]],[11,"wrap","","",9,[[["self"],["t"]]]],[11,"unwrap","","",9,[[["self"],["t"]]]],[11,"wrap","","",10,[[["self"],["t"]]]],[11,"unwrap","","",10,[[["self"],["t"]]]],[11,"wrap","","",11,[[["self"],["t"]]]],[11,"unwrap","","",11,[[["self"],["t"]]]],[11,"scale","","",8,[[["self"],["t"]]]],[11,"scale","","",8,[[["self"],["complex"]]]],[11,"scale","","",9,[[["self"],["t"]]]],[11,"scale","","",9,[[["self"],["complex"]]]],[11,"scale","","",10,[[["self"],["t"]]]],[11,"scale","","",10,[[["self"],["complex"]]]],[11,"scale","","",11,[[["self"],["t"]]]],[11,"scale","","",11,[[["self"],["complex"]]]],[11,"magnitude","","",8,N],[11,"magnitude_squared","","",8,N],[11,"to_real","","",8,N],[11,"to_imag","","",8,N],[11,"phase","","",8,N],[11,"magnitude","","",9,N],[11,"magnitude_squared","","",9,N],[11,"to_real","","",9,N],[11,"to_imag","","",9,N],[11,"phase","","",9,N],[11,"magnitude","","",10,N],[11,"magnitude_squared","","",10,N],[11,"to_real","","",10,N],[11,"to_imag","","",10,N],[11,"phase","","",10,N],[11,"magnitude","","",11,N],[11,"magnitude_squared","","",11,N],[11,"to_real","","",11,N],[11,"to_imag","","",11,N],[11,"phase","","",11,N],[11,"convolve_signal","","",8,[[["self"],["b"],["dspvec"]],["voidresult"]]],[11,"convolve_signal","","",9,[[["self"],["b"],["dspvec"]],["voidresult"]]],[11,"convolve_signal","","",10,[[["self"],["b"],["dspvec"]],["voidresult"]]],[11,"convolve_signal","","",11,[[["self"],["b"],["dspvec"]],["voidresult"]]],[11,"convolve_signal","","",8,[[["self"],["b"],["vec"]],["voidresult"]]],[11,"convolve_signal","","",9,N],[11,"convolve_signal","","",10,N],[11,"convolve_signal","","",11,N],[11,"dot_product_prec","","",8,[[["self"],["matrixmxn"]],["scalarresult",["vec"]]]],[11,"dot_product_prec","","",9,[[["self"],["matrix2xn"]],["scalarresult",["vec"]]]],[11,"dot_product_prec","","",10,[[["self"],["matrix3xn"]],["scalarresult",["vec"]]]],[11,"dot_product_prec","","",11,[[["self"],["matrix4xn"]],["scalarresult",["vec"]]]],[11,"dot_product_prec","","",8,[[["self"],["v"]],["scalarresult",["vec"]]]],[11,"dot_product_prec","","",9,[[["self"],["v"]],["scalarresult"]]],[11,"dot_product_prec","","",10,[[["self"],["v"]],["scalarresult"]]],[11,"dot_product_prec","","",11,[[["self"],["v"]],["scalarresult"]]],[11,"sqrt","","",8,[[["self"]]]],[11,"square","","",8,[[["self"]]]],[11,"root","","",8,[[["self"],["t"]]]],[11,"powf","","",8,[[["self"],["t"]]]],[11,"ln","","",8,[[["self"]]]],[11,"exp","","",8,[[["self"]]]],[11,"log","","",8,[[["self"],["t"]]]],[11,"expf","","",8,[[["self"],["t"]]]],[11,"sqrt","","",9,[[["self"]]]],[11,"square","","",9,[[["self"]]]],[11,"root","","",9,[[["self"],["t"]]]],[11,"powf","","",9,[[["self"],["t"]]]],[11,"ln","","",9,[[["self"]]]],[11,"exp","","",9,[[["self"]]]],[11,"log","","",9,[[["self"],["t"]]]],[11,"expf","","",9,[[["self"],["t"]]]],[11,"sqrt","","",10,[[["self"]]]],[11,"square","","",10,[[["self"]]]],[11,"root","","",10,[[["self"],["t"]]]],[11,"powf","","",10,[[["self"],["t"]]]],[11,"ln","","",10,[[["self"]]]],[11,"exp","","",10,[[["self"]]]],[11,"log","","",10,[[["self"],["t"]]]],[11,"expf","","",10,[[["self"],["t"]]]],[11,"sqrt","","",11,[[["self"]]]],[11,"square","","",11,[[["self"]]]],[11,"root","","",11,[[["self"],["t"]]]],[11,"powf","","",11,[[["self"],["t"]]]],[11,"ln","","",11,[[["self"]]]],[11,"exp","","",11,[[["self"]]]],[11,"log","","",11,[[["self"],["t"]]]],[11,"expf","","",11,[[["self"],["t"]]]],[11,"plain_fft","","",8,N],[11,"fft","","",8,N],[11,"windowed_fft","","",8,N],[11,"plain_fft","","",9,N],[11,"fft","","",9,N],[11,"windowed_fft","","",9,N],[11,"plain_fft","","",10,N],[11,"fft","","",10,N],[11,"windowed_fft","","",10,N],[11,"plain_fft","","",11,N],[11,"fft","","",11,N],[11,"windowed_fft","","",11,N],[11,"apply_window","","",8,[[["self"],["windowfunction"]]]],[11,"unapply_window","","",8,[[["self"],["windowfunction"]]]],[11,"apply_window","","",9,[[["self"],["windowfunction"]]]],[11,"unapply_window","","",9,[[["self"],["windowfunction"]]]],[11,"apply_window","","",10,[[["self"],["windowfunction"]]]],[11,"unapply_window","","",10,[[["self"],["windowfunction"]]]],[11,"apply_window","","",11,[[["self"],["windowfunction"]]]],[11,"unapply_window","","",11,[[["self"],["windowfunction"]]]],[11,"to_complex","","",8,[[["self"]],["transres"]]],[11,"to_complex","","",9,[[["self"]],["transres"]]],[11,"to_complex","","",10,[[["self"]],["transres"]]],[11,"to_complex","","",11,[[["self"]],["transres"]]],[11,"mirror","","",8,[[["self"],["b"]]]],[11,"fft_shift","","",8,[[["self"]]]],[11,"ifft_shift","","",8,[[["self"]]]],[11,"mirror","","",9,[[["self"],["b"]]]],[11,"fft_shift","","",9,[[["self"]]]],[11,"ifft_shift","","",9,[[["self"]]]],[11,"mirror","","",10,[[["self"],["b"]]]],[11,"fft_shift","","",10,[[["self"]]]],[11,"ifft_shift","","",10,[[["self"]]]],[11,"mirror","","",11,[[["self"],["b"]]]],[11,"fft_shift","","",11,[[["self"]]]],[11,"ifft_shift","","",11,[[["self"]]]],[11,"prepare_argument","","",8,N],[11,"prepare_argument_padded","","",8,N],[11,"prepare_argument","","",9,N],[11,"prepare_argument_padded","","",9,N],[11,"prepare_argument","","",10,N],[11,"prepare_argument_padded","","",10,N],[11,"prepare_argument","","",11,N],[11,"prepare_argument_padded","","",11,N],[11,"get_real","","",8,[[["self"],["o"]]]],[11,"get_imag","","",8,[[["self"],["o"]]]],[11,"get_magnitude","","",8,[[["self"],["o"]]]],[11,"get_magnitude_squared","","",8,[[["self"],["o"]]]],[11,"get_phase","","",8,[[["self"],["o"]]]],[11,"get_real_imag","","",8,[[["self"],["o"],["o"]]]],[11,"get_mag_phase","","",8,[[["self"],["o"],["o"]]]],[11,"get_real","","",9,[[["self"],["o"]]]],[11,"get_imag","","",9,[[["self"],["o"]]]],[11,"get_magnitude","","",9,[[["self"],["o"]]]],[11,"get_magnitude_squared","","",9,[[["self"],["o"]]]],[11,"get_phase","","",9,[[["self"],["o"]]]],[11,"get_real_imag","","",9,[[["self"],["o"],["o"]]]],[11,"get_mag_phase","","",9,[[["self"],["o"],["o"]]]],[11,"get_real","","",10,[[["self"],["o"]]]],[11,"get_imag","","",10,[[["self"],["o"]]]],[11,"get_magnitude","","",10,[[["self"],["o"]]]],[11,"get_magnitude_squared","","",10,[[["self"],["o"]]]],[11,"get_phase","","",10,[[["self"],["o"]]]],[11,"get_real_imag","","",10,[[["self"],["o"],["o"]]]],[11,"get_mag_phase","","",10,[[["self"],["o"],["o"]]]],[11,"get_real","","",11,[[["self"],["o"]]]],[11,"get_imag","","",11,[[["self"],["o"]]]],[11,"get_magnitude","","",11,[[["self"],["o"]]]],[11,"get_magnitude_squared","","",11,[[["self"],["o"]]]],[11,"get_phase","","",11,[[["self"],["o"]]]],[11,"get_real_imag","","",11,[[["self"],["o"],["o"]]]],[11,"get_mag_phase","","",11,[[["self"],["o"],["o"]]]],[11,"map_inplace","","",8,[[["self"],["a"],["f"]]]],[11,"map_inplace","","",8,[[["self"],["a"],["f"]]]],[11,"map_inplace","","",9,[[["self"],["a"],["f"]]]],[11,"map_inplace","","",9,[[["self"],["a"],["f"]]]],[11,"map_inplace","","",10,[[["self"],["a"],["f"]]]],[11,"map_inplace","","",10,[[["self"],["a"],["f"]]]],[11,"map_inplace","","",11,[[["self"],["a"],["f"]]]],[11,"map_inplace","","",11,[[["self"],["a"],["f"]]]],[11,"to_complex_b","","",8,N],[11,"to_complex_b","","",9,N],[11,"to_complex_b","","",10,N],[11,"to_complex_b","","",11,N],[11,"plain_sfft","","",8,[[["self"],["b"]],["transres"]]],[11,"sfft","","",8,[[["self"],["b"]],["transres"]]],[11,"windowed_sfft","","",8,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"plain_sfft","","",9,[[["self"],["b"]],["transres"]]],[11,"sfft","","",9,[[["self"],["b"]],["transres"]]],[11,"windowed_sfft","","",9,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"plain_sfft","","",10,[[["self"],["b"]],["transres"]]],[11,"sfft","","",10,[[["self"],["b"]],["transres"]]],[11,"windowed_sfft","","",10,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"plain_sfft","","",11,[[["self"],["b"]],["transres"]]],[11,"sfft","","",11,[[["self"],["b"]],["transres"]]],[11,"windowed_sfft","","",11,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"multiply_complex_exponential","","",8,[[["self"],["t"],["t"]]]],[11,"conj","","",8,[[["self"]]]],[11,"multiply_complex_exponential","","",9,[[["self"],["t"],["t"]]]],[11,"conj","","",9,[[["self"]]]],[11,"multiply_complex_exponential","","",10,[[["self"],["t"],["t"]]]],[11,"conj","","",10,[[["self"]]]],[11,"multiply_complex_exponential","","",11,[[["self"],["t"],["t"]]]],[11,"conj","","",11,[[["self"]]]],[11,"statistics_split_prec","","",8,[[["self"],["usize"]],["scalarresult",["vec"]]]],[11,"statistics_split_prec","","",9,[[["self"],["usize"]],["scalarresult"]]],[11,"statistics_split_prec","","",10,[[["self"],["usize"]],["scalarresult"]]],[11,"statistics_split_prec","","",11,[[["self"],["usize"]],["scalarresult"]]],[11,"plain_ifft","","",8,N],[11,"ifft","","",8,N],[11,"windowed_ifft","","",8,N],[11,"plain_ifft","","",9,N],[11,"ifft","","",9,N],[11,"windowed_ifft","","",9,N],[11,"plain_ifft","","",10,N],[11,"ifft","","",10,N],[11,"windowed_ifft","","",10,N],[11,"plain_ifft","","",11,N],[11,"ifft","","",11,N],[11,"windowed_ifft","","",11,N],[11,"add","","",8,[[["self"],["self"]],["voidresult"]]],[11,"sub","","",8,[[["self"],["self"]],["voidresult"]]],[11,"div","","",8,[[["self"],["self"]],["voidresult"]]],[11,"mul","","",8,[[["self"],["self"]],["voidresult"]]],[11,"add","","",8,[[["self"],["v"]],["voidresult"]]],[11,"sub","","",8,[[["self"],["v"]],["voidresult"]]],[11,"div","","",8,[[["self"],["v"]],["voidresult"]]],[11,"mul","","",8,[[["self"],["v"]],["voidresult"]]],[11,"add","","",9,[[["self"],["self"]],["voidresult"]]],[11,"sub","","",9,[[["self"],["self"]],["voidresult"]]],[11,"div","","",9,[[["self"],["self"]],["voidresult"]]],[11,"mul","","",9,[[["self"],["self"]],["voidresult"]]],[11,"add","","",9,[[["self"],["v"]],["voidresult"]]],[11,"sub","","",9,[[["self"],["v"]],["voidresult"]]],[11,"div","","",9,[[["self"],["v"]],["voidresult"]]],[11,"mul","","",9,[[["self"],["v"]],["voidresult"]]],[11,"add","","",10,[[["self"],["self"]],["voidresult"]]],[11,"sub","","",10,[[["self"],["self"]],["voidresult"]]],[11,"div","","",10,[[["self"],["self"]],["voidresult"]]],[11,"mul","","",10,[[["self"],["self"]],["voidresult"]]],[11,"add","","",10,[[["self"],["v"]],["voidresult"]]],[11,"sub","","",10,[[["self"],["v"]],["voidresult"]]],[11,"div","","",10,[[["self"],["v"]],["voidresult"]]],[11,"mul","","",10,[[["self"],["v"]],["voidresult"]]],[11,"add","","",11,[[["self"],["self"]],["voidresult"]]],[11,"sub","","",11,[[["self"],["self"]],["voidresult"]]],[11,"div","","",11,[[["self"],["self"]],["voidresult"]]],[11,"mul","","",11,[[["self"],["self"]],["voidresult"]]],[11,"add","","",11,[[["self"],["v"]],["voidresult"]]],[11,"sub","","",11,[[["self"],["v"]],["voidresult"]]],[11,"div","","",11,[[["self"],["v"]],["voidresult"]]],[11,"mul","","",11,[[["self"],["v"]],["voidresult"]]],[11,"sum","","",8,[[["self"]],["vec"]]],[11,"sum_sq","","",8,[[["self"]],["vec"]]],[11,"sum","","",9,N],[11,"sum_sq","","",9,N],[11,"sum","","",9,N],[11,"sum_sq","","",9,N],[11,"sum","","",9,N],[11,"sum_sq","","",9,N],[11,"sin","","",8,[[["self"]]]],[11,"cos","","",8,[[["self"]]]],[11,"tan","","",8,[[["self"]]]],[11,"asin","","",8,[[["self"]]]],[11,"acos","","",8,[[["self"]]]],[11,"atan","","",8,[[["self"]]]],[11,"sinh","","",8,[[["self"]]]],[11,"cosh","","",8,[[["self"]]]],[11,"tanh","","",8,[[["self"]]]],[11,"asinh","","",8,[[["self"]]]],[11,"acosh","","",8,[[["self"]]]],[11,"atanh","","",8,[[["self"]]]],[11,"sin","","",9,[[["self"]]]],[11,"cos","","",9,[[["self"]]]],[11,"tan","","",9,[[["self"]]]],[11,"asin","","",9,[[["self"]]]],[11,"acos","","",9,[[["self"]]]],[11,"atan","","",9,[[["self"]]]],[11,"sinh","","",9,[[["self"]]]],[11,"cosh","","",9,[[["self"]]]],[11,"tanh","","",9,[[["self"]]]],[11,"asinh","","",9,[[["self"]]]],[11,"acosh","","",9,[[["self"]]]],[11,"atanh","","",9,[[["self"]]]],[11,"sin","","",10,[[["self"]]]],[11,"cos","","",10,[[["self"]]]],[11,"tan","","",10,[[["self"]]]],[11,"asin","","",10,[[["self"]]]],[11,"acos","","",10,[[["self"]]]],[11,"atan","","",10,[[["self"]]]],[11,"sinh","","",10,[[["self"]]]],[11,"cosh","","",10,[[["self"]]]],[11,"tanh","","",10,[[["self"]]]],[11,"asinh","","",10,[[["self"]]]],[11,"acosh","","",10,[[["self"]]]],[11,"atanh","","",10,[[["self"]]]],[11,"sin","","",11,[[["self"]]]],[11,"cos","","",11,[[["self"]]]],[11,"tan","","",11,[[["self"]]]],[11,"asin","","",11,[[["self"]]]],[11,"acos","","",11,[[["self"]]]],[11,"atan","","",11,[[["self"]]]],[11,"sinh","","",11,[[["self"]]]],[11,"cosh","","",11,[[["self"]]]],[11,"tanh","","",11,[[["self"]]]],[11,"asinh","","",11,[[["self"]]]],[11,"acosh","","",11,[[["self"]]]],[11,"atanh","","",11,[[["self"]]]],[11,"get_meta_data","","",8,[[["self"]],["typemetadata"]]],[11,"get_meta_data","","",9,[[["self"]],["typemetadata"]]],[11,"get_meta_data","","",10,[[["self"]],["typemetadata"]]],[11,"get_meta_data","","",11,[[["self"]],["typemetadata"]]],[11,"offset","","",8,[[["self"],["t"]]]],[11,"offset","","",8,[[["self"],["complex"]]]],[11,"offset","","",9,[[["self"],["t"]]]],[11,"offset","","",9,[[["self"],["complex"]]]],[11,"offset","","",10,[[["self"],["t"]]]],[11,"offset","","",10,[[["self"],["complex"]]]],[11,"offset","","",11,[[["self"],["t"]]]],[11,"offset","","",11,[[["self"],["complex"]]]],[11,"map_aggregate","","",8,[[["self"],["a"],["fmap"],["faggr"]],["scalarresult",["vec"]]]],[11,"map_aggregate","","",9,[[["self"],["a"],["fmap"],["faggr"]],["scalarresult"]]],[11,"map_aggregate","","",10,[[["self"],["a"],["fmap"],["faggr"]],["scalarresult"]]],[11,"map_aggregate","","",11,[[["self"],["a"],["fmap"],["faggr"]],["scalarresult"]]],[11,"add_smaller","","",8,[[["self"],["self"]],["voidresult"]]],[11,"sub_smaller","","",8,[[["self"],["self"]],["voidresult"]]],[11,"div_smaller","","",8,[[["self"],["self"]],["voidresult"]]],[11,"mul_smaller","","",8,[[["self"],["self"]],["voidresult"]]],[11,"add_smaller","","",8,[[["self"],["v"]],["voidresult"]]],[11,"sub_smaller","","",8,[[["self"],["v"]],["voidresult"]]],[11,"div_smaller","","",8,[[["self"],["v"]],["voidresult"]]],[11,"mul_smaller","","",8,[[["self"],["v"]],["voidresult"]]],[11,"add_smaller","","",9,[[["self"],["self"]],["voidresult"]]],[11,"sub_smaller","","",9,[[["self"],["self"]],["voidresult"]]],[11,"div_smaller","","",9,[[["self"],["self"]],["voidresult"]]],[11,"mul_smaller","","",9,[[["self"],["self"]],["voidresult"]]],[11,"add_smaller","","",9,[[["self"],["v"]],["voidresult"]]],[11,"sub_smaller","","",9,[[["self"],["v"]],["voidresult"]]],[11,"div_smaller","","",9,[[["self"],["v"]],["voidresult"]]],[11,"mul_smaller","","",9,[[["self"],["v"]],["voidresult"]]],[11,"add_smaller","","",10,[[["self"],["self"]],["voidresult"]]],[11,"sub_smaller","","",10,[[["self"],["self"]],["voidresult"]]],[11,"div_smaller","","",10,[[["self"],["self"]],["voidresult"]]],[11,"mul_smaller","","",10,[[["self"],["self"]],["voidresult"]]],[11,"add_smaller","","",10,[[["self"],["v"]],["voidresult"]]],[11,"sub_smaller","","",10,[[["self"],["v"]],["voidresult"]]],[11,"div_smaller","","",10,[[["self"],["v"]],["voidresult"]]],[11,"mul_smaller","","",10,[[["self"],["v"]],["voidresult"]]],[11,"add_smaller","","",11,[[["self"],["self"]],["voidresult"]]],[11,"sub_smaller","","",11,[[["self"],["self"]],["voidresult"]]],[11,"div_smaller","","",11,[[["self"],["self"]],["voidresult"]]],[11,"mul_smaller","","",11,[[["self"],["self"]],["voidresult"]]],[11,"add_smaller","","",11,[[["self"],["v"]],["voidresult"]]],[11,"sub_smaller","","",11,[[["self"],["v"]],["voidresult"]]],[11,"div_smaller","","",11,[[["self"],["v"]],["voidresult"]]],[11,"mul_smaller","","",11,[[["self"],["v"]],["voidresult"]]],[11,"diff","","",8,[[["self"]]]],[11,"diff_with_start","","",8,[[["self"]]]],[11,"cum_sum","","",8,[[["self"]]]],[11,"diff","","",9,[[["self"]]]],[11,"diff_with_start","","",9,[[["self"]]]],[11,"cum_sum","","",9,[[["self"]]]],[11,"diff","","",10,[[["self"]]]],[11,"diff_with_start","","",10,[[["self"]]]],[11,"cum_sum","","",10,[[["self"]]]],[11,"diff","","",11,[[["self"]]]],[11,"diff_with_start","","",11,[[["self"]]]],[11,"cum_sum","","",11,[[["self"]]]],[11,"resize","","",8,[[["self"],["usize"]],["voidresult"]]],[11,"resize","","",9,[[["self"],["usize"]],["voidresult"]]],[11,"resize","","",10,[[["self"],["usize"]],["voidresult"]]],[11,"resize","","",11,[[["self"],["usize"]],["voidresult"]]]],"paths":[[8,"Matrix"],[8,"ToMatrix"],[8,"ToDspMatrix"],[8,"ToRealTimeMatrix"],[8,"ToRealFreqMatrix"],[8,"ToComplexTimeMatrix"],[8,"ToComplexFreqMatrix"],[8,"FromMatrix"],[3,"MatrixMxN"],[3,"Matrix2xN"],[3,"Matrix3xN"],[3,"Matrix4xN"]]};
searchIndex["basic_dsp_vector"]={"doc":"Basic digital signal processing (DSP) operations","items":[[3,"MultiCoreSettings","basic_dsp_vector","Holds parameters which specify how multiple cores are used to execute an operation.",N,N],[12,"core_limit","","All operations will be limited to not create more threads than specified here",0,N],[12,"med_dual_core_threshold","","",0,N],[12,"med_multi_core_threshold","","",0,N],[12,"large_dual_core_threshold","","",0,N],[12,"large_multi_core_threshold","","",0,N],[3,"FixedLenBufferBurrow","","Buffer borrow type for `SingleBuffer`.",N,N],[3,"FixedLenBuffer","","A buffer which gets initalized with a data storage type and then always keeps that.",N,N],[3,"SingleBufferBurrow","","Buffer borrow type for `SingleBuffer`.",N,N],[3,"SingleBuffer","","A buffer which stores a single vector and never shrinks.",N,N],[3,"NoBuffer","","This type can be used everytime the API asks for a buffer to disable any buffering.",N,N],[3,"NoBufferBurrow","","Buffer borrow type for `NoBuffer`.",N,N],[3,"Statistics","","Statistics about numeric data",N,N],[12,"sum","","Sum of all values",1,N],[12,"count","","How many numbers have been considered for the stats",1,N],[12,"average","","Average value",1,N],[12,"rms","","Root-mean-square or rms over all values.",1,N],[12,"min","","The smallest value.",1,N],[12,"min_index","","The index of the smallest value.",1,N],[12,"max","","The largest value.",1,N],[12,"max_index","","The index of the largest value.",1,N],[3,"DspVec","","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations.",N,N],[12,"data","","The underlying storage. `self.len()` should be called to find out how many elements in `data` contain valid data.",2,N],[3,"TypeMetaData","","Holds meta data about a type.",N,N],[3,"NoTradeBufferBurrow","","Buffer borrow type for `NoTradeBufferBurrow`.",N,N],[4,"ErrorReason","","Enumeration of all error reasons",N,N],[13,"InputMustHaveTheSameSize","","The operations requires all inputs to have the same size, in most cases this means that the following must be true: `self.len()` == `argument.len()`",3,N],[13,"InputMetaDataMustAgree","","The operations requires all inputs to have the same meta data. For a vector this means that the following must be true: `self.is_complex()` == `argument.is_complex()` && `self.domain()` == `argument.domain()` && `self.delta()`== `argument.domain()`; Consider to convert one of the inputs so that this condition is true. The necessary operations may include FFT/IFFT, complex/real conversion and resampling.",3,N],[13,"InputMustBeComplex","","The operation requires the input to be complex.",3,N],[13,"InputMustBeReal","","The operation requires the input to be real.",3,N],[13,"InputMustBeInTimeDomain","","The operation requires the input to be in time domain.",3,N],[13,"InputMustBeInFrequencyDomain","","The operation requires the input to be in frequency domain.",3,N],[13,"InvalidArgumentLength","","The arguments have an invalid length to perform the operation. The operations documentation should have more information about the requirements. Please open a defect if this isn't the case.",3,N],[13,"InputMustBeConjSymmetric","","The operations is only valid if the data input contains half of a symmetric spectrum. The symmetry definition follows soon however more important is that the element at 0 Hz which happens to be the first vector element must be real. The error message is raised if this is violated, the rest of the definition is only listed here for completeness snce it can't be checked. The required symmetry for a vector is that for every point `vector[x].conj() == vector[-x]`(pseudocode) where `x` is the x-axis position relative to 0 Hz and `conj` is the complex conjugate.",3,N],[13,"InputMustHaveAnOddLength","","`self.points()` must be an odd number.",3,N],[13,"ArgumentFunctionMustBeSymmetric","","The function passed as argument must be symmetric",3,N],[13,"InvalidNumberOfArgumentsForCombinedOp","","The number of arguments passed into a combined operation methods doesn't match with the number of arguments specified previously via the `add_op` methods.",3,N],[13,"InputMustNotBeEmpty","","The operation isn't specified for an empty vector.",3,N],[13,"InputMustHaveAnEvenLength","","Given input must have an even length.",3,N],[13,"TypeCanNotResize","","The arguments would require that the type allocates larger memory. But the type can't do that.",3,N],[4,"PaddingOption","","An option which defines how a vector should be padded",N,N],[13,"End","","Appends zeros to the end of the vector.",4,N],[13,"Surround","","Surrounds the vector with zeros at the beginning and at the end.",4,N],[13,"Center","","Inserts zeros in the center of the vector",4,N],[4,"DataDomain","","The domain of a data vector",N,N],[13,"Time","","Time domain, the x-axis is in [s].",5,N],[13,"Frequency","","Frequency domain, the x-axis is in [Hz].",5,N],[5,"print_calibration","","Prints debug information about the calibration. The calibration determines when the library will start to spawn threads. If a calibration hasn't been performed yet than calling this function will trigger the calibration.",N,[[],["string"]]],[0,"conv_types","","Types around a convolution, see also https://en.wikipedia.org/wiki/Convolution.",N,N],[3,"RealTimeLinearTableLookup","basic_dsp_vector::conv_types","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",N,N],[3,"RealFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",N,N],[3,"ComplexTimeLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",N,N],[3,"ComplexFrequencyLinearTableLookup","","Allows to create a lookup table with linear interpolation between table points. This usually speeds up a convolution and sacrifices accuracy.",N,N],[3,"RaisedCosineFunction","","Raised cosine function according to `https://en.wikipedia.org/wiki/Raised-cosine_filter`",N,N],[3,"SincFunction","","Sinc function according to `https://en.wikipedia.org/wiki/Sinc_function`",N,N],[8,"RealImpulseResponse","","A convolution function in time domain and real number space",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",6,[[["self"]],["bool"]]],[10,"calc","","Calculates the convolution for a data point",6,[[["self"],["t"]],["t"]]],[8,"RealFrequencyResponse","","A convolution function in frequency domain and real number space",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",7,[[["self"]],["bool"]]],[10,"calc","","Calculates the convolution for a data point",7,[[["self"],["t"]],["t"]]],[8,"ComplexImpulseResponse","","A convolution function in time domain and complex number space",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",8,[[["self"]],["bool"]]],[10,"calc","","Calculates the convolution for a data point",8,[[["self"],["t"]],["complex"]]],[8,"ComplexFrequencyResponse","","A convolution function in frequency domain and complex number space",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around 0 or not. Symmetry is defined as `self.calc(x) == self.calc(-x)`.",9,[[["self"]],["bool"]]],[10,"calc","","Calculates the convolution for a data point",9,[[["self"],["t"]],["complex"]]],[11,"table","","Allows to inspect the generated lookup table",10,N],[11,"delta","","Gets the delta value which determines the resolution",10,[[["self"]],["t"]]],[11,"table","","Allows to inspect the generated lookup table",11,N],[11,"delta","","Gets the delta value which determines the resolution",11,[[["self"]],["t"]]],[11,"table","","Allows to inspect the generated lookup table",12,N],[11,"delta","","Gets the delta value which determines the resolution",12,[[["self"]],["t"]]],[11,"table","","Allows to inspect the generated lookup table",13,N],[11,"delta","","Gets the delta value which determines the resolution",13,[[["self"]],["t"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",10,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",10,[[["realimpulseresponse"],["f32"],["usize"]],["self"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",10,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",10,[[["realimpulseresponse"],["f64"],["usize"]],["self"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",11,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",11,[[["realfrequencyresponse"],["f32"],["usize"]],["self"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",11,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",11,[[["realfrequencyresponse"],["f64"],["usize"]],["self"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",12,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",12,[[["compleximpulseresponse"],["f32"],["usize"]],["self"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",12,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",12,[[["compleximpulseresponse"],["f64"],["usize"]],["self"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",13,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",13,[[["complexfrequencyresponse"],["f32"],["usize"]],["self"]]],[11,"from_raw_parts","","Creates a lookup table by putting the pieces together.",13,N],[11,"from_conv_function","","Creates a lookup table from another convolution function. The `delta` argument can be used to balance performance vs. accuracy.",13,[[["complexfrequencyresponse"],["f64"],["usize"]],["self"]]],[11,"to_complex","","Convert the lookup table into complex number space",10,[[["self"]],["complextimelineartablelookup",["f32"]]]],[11,"to_complex","","Convert the lookup table into complex number space",10,[[["self"]],["complextimelineartablelookup",["f64"]]]],[11,"to_complex","","Convert the lookup table into complex number space",11,[[["self"]],["complexfrequencylineartablelookup",["f32"]]]],[11,"to_complex","","Convert the lookup table into complex number space",11,[[["self"]],["complexfrequencylineartablelookup",["f64"]]]],[11,"to_real","","Convert the lookup table into real number space",12,[[["self"]],["realtimelineartablelookup",["f32"]]]],[11,"to_real","","Convert the lookup table into real number space",12,[[["self"]],["realtimelineartablelookup",["f64"]]]],[11,"to_real","","Convert the lookup table into real number space",13,[[["self"]],["realfrequencylineartablelookup",["f32"]]]],[11,"to_real","","Convert the lookup table into real number space",13,[[["self"]],["realfrequencylineartablelookup",["f64"]]]],[11,"fft","","Convert the lookup table into frequency domain",12,[[["self"]],["complexfrequencylineartablelookup",["f32"]]]],[11,"fft","","Convert the lookup table into frequency domain",12,[[["self"]],["complexfrequencylineartablelookup",["f64"]]]],[11,"fft","","Convert the lookup table into a magnitude spectrum",10,[[["self"]],["realfrequencylineartablelookup",["f32"]]]],[11,"fft","","Convert the lookup table into a magnitude spectrum",10,[[["self"]],["realfrequencylineartablelookup",["f64"]]]],[11,"ifft","","Convert the lookup table into time domain",13,[[["self"]],["complextimelineartablelookup",["f32"]]]],[11,"ifft","","Convert the lookup table into time domain",13,[[["self"]],["complextimelineartablelookup",["f64"]]]],[11,"new","","Creates a raised cosine function.",14,[[["t"]],["self"]]],[11,"new","","Creates a sinc function.",15,[[],["self"]]],[0,"meta","basic_dsp_vector","",N,N],[3,"Real","basic_dsp_vector::meta","Marker for types containing real data.",N,N],[3,"Complex","","Marker for types containing complex data.",N,N],[3,"RealOrComplex","","Marker for types containing real or complex data.",N,N],[12,"is_complex_current","","",16,N],[3,"Time","","Marker for types containing time data.",N,N],[3,"Freq","","Marker for types containing frequency data.",N,N],[3,"TimeOrFreq","","Marker for types containing time or frequency data.",N,N],[12,"domain_current","","",17,N],[11,"default","basic_dsp_vector","Creates multi core settings with default values",0,[[],["multicoresettings"]]],[11,"single_threaded","","Creates multi core settings so that no thread will be spawned.",0,[[],["multicoresettings"]]],[11,"parallel","","Creates multi core so that threads will be spawned if this appears to be beneficial.",0,[[],["multicoresettings"]]],[11,"new","","Creates multi core settings with the given values.",0,[[["usize"]],["multicoresettings"]]],[11,"with_thresholds","","Creates multi core settings with explicit thresholds.",0,[[["usize"],["usize"],["usize"],["usize"],["usize"]],["multicoresettings"]]],[11,"new","","Creates a new buffer from a storage type. The buffer will internally hold its storage for it's complete life time.",18,[[["s"]],["fixedlenbuffer"]]],[11,"new","","Creates a new buffer which is ready to be passed around.",19,[[],["singlebuffer"]]],[11,"with_capacity","","Creates a new buffer which is ready to be passed around.",19,[[["usize"]],["singlebuffer"]]],[11,"convolve_mat","","Convolves a vector of vectors (in this lib also considered a matrix) with a vector of impulse responses and stores the result in `target`.",2,N],[11,"is_erroneous","","Indicates whether or not the operations on this vector have been successful. Consider using the statically typed vector versions so that this check doesn't need to be performed.",2,[[["self"]],["bool"]]],[0,"window_functions","","This mod contains a definition for window functions and provides implementations for a few standard windows. See the `WindowFunction` type for more information.",N,N],[3,"TriangularWindow","basic_dsp_vector::window_functions","A triangular window: `https://en.wikipedia.org/wiki/Window_function#Triangular_window`",N,N],[3,"HammingWindow","","A generalized Hamming window: `https://en.wikipedia.org/wiki/Window_function#Hamming_window`",N,N],[8,"WindowFunction","","A window function for FFT windows. See `https://en.wikipedia.org/wiki/Window_function` for details. Window functions should document if they aren't applicable for Inverse Fourier Transformations.",N,N],[10,"is_symmetric","","Indicates whether this function is symmetric around the y axis or not. Symmetry is defined as `self.window(x) == self.window(-x)`.",20,[[["self"]],["bool"]]],[10,"window","","Calculates a point of the window function. Callers will ensure that `n <= length`.",20,[[["self"],["usize"],["usize"]],["t"]]],[11,"new","","Creates a new Hamming window",21,[[["t"]],["self"]]],[11,"default","","Creates the default Hamming window as defined in GNU Octave.",21,[[],["self"]]],[0,"numbers","basic_dsp_vector","Traits from the `num` crate which are used inside `basic_dsp` and extensions to those traits.",N,N],[3,"Complex","basic_dsp_vector::numbers","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",22,N],[12,"im","","Imaginary portion of the complex number",22,N],[0,"bounds","basic_dsp_vector::numbers::Float","",N,N],[8,"Bounded","basic_dsp_vector::numbers::Float::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",23,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",23,[[],["self"]]],[0,"cast","basic_dsp_vector::numbers::Float","",N,N],[8,"ToPrimitive","basic_dsp_vector::numbers::Float::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",24,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",24,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",24,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",24,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",24,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",24,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",24,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",24,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",24,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",24,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",24,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",24,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",24,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",24,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",25,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",26,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",27,[[["self"]],["t"]]],[0,"float","basic_dsp_vector::numbers::Float","",N,N],[8,"FloatCore","basic_dsp_vector::numbers::Float::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",28,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",28,[[],["self"]]],[10,"nan","","Returns NaN.",28,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",28,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",28,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",28,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",28,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",28,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",28,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",28,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",28,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",28,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",28,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",28,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",28,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",28,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",28,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",28,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",28,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",28,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",28,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",28,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",28,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",28,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",28,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",28,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",28,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",28,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",28,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",29,[[],["self"]]],[10,"infinity","","Returns the infinite value.",29,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",29,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",29,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",29,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",29,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",29,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",29,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",29,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",29,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",29,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",29,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",29,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",29,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",29,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",29,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",29,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",29,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",29,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",29,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",29,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",29,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",29,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",29,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",29,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",29,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",29,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",29,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",29,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",29,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",29,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",29,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",29,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",29,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",29,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",29,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",29,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",29,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",29,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",29,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",29,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",29,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",29,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",29,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",29,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",29,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",29,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",29,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",30,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",30,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",30,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",30,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",30,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",30,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",30,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",30,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",30,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",30,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",30,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",30,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",30,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",30,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",30,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",30,[[],["self"]]],[0,"identities","basic_dsp_vector::numbers::Float","",N,N],[8,"Zero","basic_dsp_vector::numbers::Float::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",31,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",31,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",32,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",32,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"int","basic_dsp_vector::numbers::Float","",N,N],[8,"PrimInt","basic_dsp_vector::numbers::Float::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",33,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",33,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",33,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",33,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",33,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",33,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",33,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",33,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",33,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",33,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",33,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",33,[[["self"],["u32"]],["self"]]],[0,"ops","basic_dsp_vector::numbers::Float","",N,N],[0,"checked","basic_dsp_vector::numbers::Float::ops","",N,N],[8,"CheckedAdd","basic_dsp_vector::numbers::Float::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",34,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",35,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",36,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",37,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",38,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",39,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",40,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",41,[[["self"],["u32"]],["option"]]],[0,"inv","basic_dsp_vector::numbers::Float::ops","",N,N],[8,"Inv","basic_dsp_vector::numbers::Float::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",42,N],[10,"inv","","Returns the multiplicative inverse of `self`.",42,N],[0,"mul_add","basic_dsp_vector::numbers::Float::ops","",N,N],[8,"MulAdd","basic_dsp_vector::numbers::Float::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",43,N],[10,"mul_add","","Performs the fused multiply-add operation.",43,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",44,N],[0,"saturating","basic_dsp_vector::numbers::Float::ops","",N,N],[8,"Saturating","basic_dsp_vector::numbers::Float::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",45,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",45,[[["self"],["self"]],["self"]]],[0,"wrapping","basic_dsp_vector::numbers::Float::ops","",N,N],[8,"WrappingAdd","basic_dsp_vector::numbers::Float::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",46,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",47,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",48,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",49,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",50,[[["self"],["u32"]],["self"]]],[0,"pow","basic_dsp_vector::numbers::Float","",N,N],[8,"Pow","basic_dsp_vector::numbers::Float::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",51,N],[10,"pow","","Returns `self` to the power `rhs`.",51,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[0,"real","basic_dsp_vector::numbers::Float","",N,N],[8,"Real","basic_dsp_vector::numbers::Float::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",52,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",52,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",52,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",52,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",52,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",52,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",52,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",52,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",52,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",52,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",52,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",52,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",52,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",52,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",52,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",52,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",52,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",52,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",52,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",52,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",52,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",52,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",52,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",52,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",52,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",52,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",52,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",52,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",52,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",52,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",52,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",52,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",52,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",52,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",52,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",52,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",52,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",52,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",52,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",52,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",52,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",52,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",52,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",52,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",52,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",52,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",52,[[["self"]],["self"]]],[0,"sign","basic_dsp_vector::numbers::Float","",N,N],[8,"Signed","basic_dsp_vector::numbers::Float::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",53,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",53,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",53,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",53,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",53,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","basic_dsp_vector::numbers::Float","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",54,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",54,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",55,N],[13,"Invalid","","",55,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",56,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"bounds","basic_dsp_vector::numbers::Num","",N,N],[8,"Bounded","basic_dsp_vector::numbers::Num::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",23,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",23,[[],["self"]]],[0,"cast","basic_dsp_vector::numbers::Num","",N,N],[8,"ToPrimitive","basic_dsp_vector::numbers::Num::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",24,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",24,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",24,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",24,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",24,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",24,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",24,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",24,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",24,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",24,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",24,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",24,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",24,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",24,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",25,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",26,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",27,[[["self"]],["t"]]],[0,"float","basic_dsp_vector::numbers::Num","",N,N],[8,"FloatCore","basic_dsp_vector::numbers::Num::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",28,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",28,[[],["self"]]],[10,"nan","","Returns NaN.",28,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",28,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",28,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",28,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",28,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",28,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",28,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",28,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",28,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",28,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",28,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",28,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",28,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",28,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",28,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",28,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",28,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",28,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",28,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",28,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",28,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",28,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",28,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",28,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",28,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",28,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",28,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",29,[[],["self"]]],[10,"infinity","","Returns the infinite value.",29,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",29,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",29,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",29,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",29,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",29,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",29,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",29,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",29,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",29,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",29,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",29,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",29,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",29,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",29,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",29,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",29,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",29,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",29,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",29,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",29,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",29,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",29,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",29,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",29,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",29,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",29,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",29,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",29,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",29,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",29,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",29,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",29,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",29,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",29,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",29,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",29,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",29,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",29,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",29,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",29,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",29,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",29,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",29,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",29,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",29,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",29,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",30,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",30,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",30,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",30,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",30,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",30,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",30,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",30,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",30,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",30,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",30,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",30,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",30,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",30,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",30,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",30,[[],["self"]]],[0,"identities","basic_dsp_vector::numbers::Num","",N,N],[8,"Zero","basic_dsp_vector::numbers::Num::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",31,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",31,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",32,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",32,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"int","basic_dsp_vector::numbers::Num","",N,N],[8,"PrimInt","basic_dsp_vector::numbers::Num::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",33,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",33,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",33,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",33,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",33,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",33,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",33,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",33,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",33,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",33,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",33,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",33,[[["self"],["u32"]],["self"]]],[0,"ops","basic_dsp_vector::numbers::Num","",N,N],[0,"checked","basic_dsp_vector::numbers::Num::ops","",N,N],[8,"CheckedAdd","basic_dsp_vector::numbers::Num::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",34,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",35,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",36,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",37,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",38,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",39,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",40,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",41,[[["self"],["u32"]],["option"]]],[0,"inv","basic_dsp_vector::numbers::Num::ops","",N,N],[8,"Inv","basic_dsp_vector::numbers::Num::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",42,N],[10,"inv","","Returns the multiplicative inverse of `self`.",42,N],[0,"mul_add","basic_dsp_vector::numbers::Num::ops","",N,N],[8,"MulAdd","basic_dsp_vector::numbers::Num::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",43,N],[10,"mul_add","","Performs the fused multiply-add operation.",43,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",44,N],[0,"saturating","basic_dsp_vector::numbers::Num::ops","",N,N],[8,"Saturating","basic_dsp_vector::numbers::Num::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",45,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",45,[[["self"],["self"]],["self"]]],[0,"wrapping","basic_dsp_vector::numbers::Num::ops","",N,N],[8,"WrappingAdd","basic_dsp_vector::numbers::Num::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",46,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",47,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",48,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",49,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",50,[[["self"],["u32"]],["self"]]],[0,"pow","basic_dsp_vector::numbers::Num","",N,N],[8,"Pow","basic_dsp_vector::numbers::Num::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",51,N],[10,"pow","","Returns `self` to the power `rhs`.",51,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[0,"real","basic_dsp_vector::numbers::Num","",N,N],[8,"Real","basic_dsp_vector::numbers::Num::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",52,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",52,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",52,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",52,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",52,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",52,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",52,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",52,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",52,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",52,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",52,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",52,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",52,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",52,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",52,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",52,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",52,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",52,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",52,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",52,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",52,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",52,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",52,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",52,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",52,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",52,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",52,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",52,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",52,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",52,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",52,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",52,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",52,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",52,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",52,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",52,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",52,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",52,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",52,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",52,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",52,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",52,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",52,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",52,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",52,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",52,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",52,[[["self"]],["self"]]],[0,"sign","basic_dsp_vector::numbers::Num","",N,N],[8,"Signed","basic_dsp_vector::numbers::Num::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",53,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",53,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",53,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",53,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",53,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","basic_dsp_vector::numbers::Num","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",54,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",54,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",55,N],[13,"Invalid","","",55,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",56,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"bounds","basic_dsp_vector::numbers::One","",N,N],[8,"Bounded","basic_dsp_vector::numbers::One::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",23,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",23,[[],["self"]]],[0,"cast","basic_dsp_vector::numbers::One","",N,N],[8,"ToPrimitive","basic_dsp_vector::numbers::One::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",24,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",24,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",24,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",24,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",24,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",24,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",24,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",24,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",24,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",24,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",24,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",24,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",24,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",24,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the value cannot be represented by this value, then `None` is returned.",25,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the type cannot be represented by this value, then `None` is returned.",25,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted into a primitive via the `ToPrimitive` trait.",26,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars with the `as` operator, which admits narrowing and precision loss. Implementers of this trait AsPrimitive should behave like a primitive numeric type (e.g. a newtype around another primitive), and the intended conversion must never fail.",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",27,[[["self"]],["t"]]],[0,"float","basic_dsp_vector::numbers::One","",N,N],[8,"FloatCore","basic_dsp_vector::numbers::One::float","Generic trait for floating point numbers that works with `no_std`.",N,N],[10,"infinity","","Returns positive infinity.",28,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",28,[[],["self"]]],[10,"nan","","Returns NaN.",28,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",28,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",28,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",28,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",28,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",28,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",28,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",28,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",28,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite, subnormal or NaN.",28,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",28,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",28,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a number.",28,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",28,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",28,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",28,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns `FloatCore::nan()` if the number is `FloatCore::nan()`.",28,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",28,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and `FloatCore::infinity()`, and since Rust 1.20 also `FloatCore::nan()`.",28,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and `FloatCore::neg_infinity()`, and since Rust 1.20 also `-FloatCore::nan()`.",28,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",28,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",28,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the number.",28,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",28,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",28,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",28,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",28,N],[8,"Float","","Generic trait for floating point numbers",N,N],[10,"nan","","Returns the `NaN` value.",29,[[],["self"]]],[10,"infinity","","Returns the infinite value.",29,[[],["self"]]],[10,"neg_infinity","","Returns the negative infinite value.",29,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",29,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can represent.",29,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",29,[[],["self"]]],[11,"epsilon","","Returns epsilon, a small positive value.",29,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",29,[[],["self"]]],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",29,[[["self"]],["bool"]]],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and false otherwise.",29,[[["self"]],["bool"]]],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",29,[[["self"]],["bool"]]],[10,"is_normal","","Returns `true` if the number is neither zero, infinite, [subnormal][subnormal], or `NaN`.",29,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only one property is going to be tested, it is generally faster to use the specific predicate instead.",29,[[["self"]],["fpcategory"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",29,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",29,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",29,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",29,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",29,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",29,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",29,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.",29,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.",29,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",29,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",29,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",29,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a floating point power.",29,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",29,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",29,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",29,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",29,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",29,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",29,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",29,[[["self"]],["self"]]],[11,"to_degrees","","Converts radians to degrees.",29,[[["self"]],["self"]]],[11,"to_radians","","Converts degrees to radians.",29,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",29,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",29,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",29,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",29,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",29,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",29,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",29,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",29,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",29,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",29,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",29,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",29,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",29,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",29,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",29,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",29,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",29,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",29,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",29,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",29,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",29,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively. The original number can be recovered by `sign * mantissa * 2 ^ exponent`.",29,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",30,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",30,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",30,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",30,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",30,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",30,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",30,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",30,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",30,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",30,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",30,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",30,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",30,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",30,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",30,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",30,[[],["self"]]],[0,"identities","basic_dsp_vector::numbers::One","",N,N],[8,"Zero","basic_dsp_vector::numbers::One::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",31,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",31,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",32,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative identity.",32,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"int","basic_dsp_vector::numbers::One","",N,N],[8,"PrimInt","basic_dsp_vector::numbers::One::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation of `self`.",33,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping the truncated bits to the end of the resulting integer.",33,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping the truncated bits to the beginning of the resulting integer.",33,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",33,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying the \"sign bit\" in the most significant bits even for unsigned types.",33,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling zeros in the least significant bits.",33,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling zeros in the most significant bits.",33,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",33,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's endianness.",33,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's endianness.",33,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",33,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's endianness.",33,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",33,[[["self"],["u32"]],["self"]]],[0,"ops","basic_dsp_vector::numbers::One","",N,N],[0,"checked","basic_dsp_vector::numbers::One::ops","",N,N],[8,"CheckedAdd","basic_dsp_vector::numbers::One::ops::checked","Performs addition that returns `None` instead of wrapping around on overflow.",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",34,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",35,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or overflow.",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow happens, `None` is returned.",36,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",37,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead of panicking on division by zero and instead of wrapping around on underflow and overflow.",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for underflow, overflow and division by zero. If any of that happens, `None` is returned.",38,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't be represented.",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't be represented, like signed `MIN` values that can't be positive, or non-zero unsigned values that can't be negative.",39,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",40,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If overflow happens, `None` is returned.",41,[[["self"],["u32"]],["option"]]],[0,"inv","basic_dsp_vector::numbers::One::ops","",N,N],[8,"Inv","basic_dsp_vector::numbers::One::ops::inv","Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.",N,N],[16,"Output","","The result after applying the operator.",42,N],[10,"inv","","Returns the multiplicative inverse of `self`.",42,N],[0,"mul_add","basic_dsp_vector::numbers::One::ops","",N,N],[8,"MulAdd","basic_dsp_vector::numbers::One::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",43,N],[10,"mul_add","","Performs the fused multiply-add operation.",43,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",44,N],[0,"saturating","basic_dsp_vector::numbers::One::ops","",N,N],[8,"Saturating","basic_dsp_vector::numbers::One::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at the numeric bounds instead of overflowing.",45,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating at the numeric bounds instead of overflowing.",45,[[["self"],["self"]],["self"]]],[0,"wrapping","basic_dsp_vector::numbers::One::ops","",N,N],[8,"WrappingAdd","basic_dsp_vector::numbers::One::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of the type.",46,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary of the type.",47,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary of the type.",48,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",49,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >> mask(rhs)`, where `mask` removes any high order bits of `rhs` that would cause the shift to exceed the bitwidth of the type.",50,[[["self"],["u32"]],["self"]]],[0,"pow","basic_dsp_vector::numbers::One","",N,N],[8,"Pow","basic_dsp_vector::numbers::One::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",51,N],[10,"pow","","Returns `self` to the power `rhs`.",51,N],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",N,[[["t"],["usize"]],["option"]]],[0,"real","basic_dsp_vector::numbers::One","",N,N],[8,"Real","basic_dsp_vector::numbers::One::real","A trait for real number types that do not necessarily have floating-point-specific characteristics such as NaN and infinity.",N,N],[10,"min_value","","Returns the smallest finite value that this type can represent.",52,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",52,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",52,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can represent.",52,[[],["self"]]],[10,"floor","","Returns the largest integer less than or equal to a number.",52,[[["self"]],["self"]]],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",52,[[["self"]],["self"]]],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from `0.0`.",52,[[["self"]],["self"]]],[10,"trunc","","Return the integer part of a number.",52,[[["self"]],["self"]]],[10,"fract","","Returns the fractional part of a number.",52,[[["self"]],["self"]]],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the number is `Float::nan()`.",52,[[["self"]],["self"]]],[10,"signum","","Returns a number that represents the sign of `self`.",52,[[["self"]],["self"]]],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0`, `Float::infinity()`, and with newer versions of Rust `f64::NAN`.",52,[[["self"]],["bool"]]],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0`, `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.",52,[[["self"]],["bool"]]],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding error, yielding a more accurate result than an unfused multiply-add.",52,[[["self"],["self"],["self"]],["self"]]],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",52,[[["self"]],["self"]]],[10,"powi","","Raise a number to an integer power.",52,[[["self"],["i32"]],["self"]]],[10,"powf","","Raise a number to a real number power.",52,[[["self"],["self"]],["self"]]],[10,"sqrt","","Take the square root of a number.",52,[[["self"]],["self"]]],[10,"exp","","Returns `e^(self)`, (the exponential function).",52,[[["self"]],["self"]]],[10,"exp2","","Returns `2^(self)`.",52,[[["self"]],["self"]]],[10,"ln","","Returns the natural logarithm of the number.",52,[[["self"]],["self"]]],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",52,[[["self"],["self"]],["self"]]],[10,"log2","","Returns the base 2 logarithm of the number.",52,[[["self"]],["self"]]],[10,"log10","","Returns the base 10 logarithm of the number.",52,[[["self"]],["self"]]],[10,"to_degrees","","Converts radians to degrees.",52,[[["self"]],["self"]]],[10,"to_radians","","Converts degrees to radians.",52,[[["self"]],["self"]]],[10,"max","","Returns the maximum of the two numbers.",52,[[["self"],["self"]],["self"]]],[10,"min","","Returns the minimum of the two numbers.",52,[[["self"],["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",52,[[["self"],["self"]],["self"]]],[10,"cbrt","","Take the cubic root of a number.",52,[[["self"]],["self"]]],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given legs of length `x` and `y`.",52,[[["self"],["self"]],["self"]]],[10,"sin","","Computes the sine of a number (in radians).",52,[[["self"]],["self"]]],[10,"cos","","Computes the cosine of a number (in radians).",52,[[["self"]],["self"]]],[10,"tan","","Computes the tangent of a number (in radians).",52,[[["self"]],["self"]]],[10,"asin","","Computes the arcsine of a number. Return value is in radians in the range [-pi/2, pi/2] or NaN if the number is outside the range [-1, 1].",52,[[["self"]],["self"]]],[10,"acos","","Computes the arccosine of a number. Return value is in radians in the range [0, pi] or NaN if the number is outside the range [-1, 1].",52,[[["self"]],["self"]]],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the range [-pi/2, pi/2];",52,[[["self"]],["self"]]],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",52,[[["self"],["self"]],["self"]]],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns `(sin(x), cos(x))`.",52,N],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the number is close to zero.",52,[[["self"]],["self"]]],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if the operations were performed separately.",52,[[["self"]],["self"]]],[10,"sinh","","Hyperbolic sine function.",52,[[["self"]],["self"]]],[10,"cosh","","Hyperbolic cosine function.",52,[[["self"]],["self"]]],[10,"tanh","","Hyperbolic tangent function.",52,[[["self"]],["self"]]],[10,"asinh","","Inverse hyperbolic sine function.",52,[[["self"]],["self"]]],[10,"acosh","","Inverse hyperbolic cosine function.",52,[[["self"]],["self"]]],[10,"atanh","","Inverse hyperbolic tangent function.",52,[[["self"]],["self"]]],[0,"sign","basic_dsp_vector::numbers::One","",N,N],[8,"Signed","basic_dsp_vector::numbers::One::sign","Useful functions for signed numbers (i.e. numbers that can be negative).",N,N],[10,"abs","","Computes the absolute value.",53,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",53,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",53,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",53,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",53,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","basic_dsp_vector::numbers::One","The base trait for numeric types, covering `0` and `1` values, comparisons, basic numeric operations, and string conversion.",N,N],[16,"FromStrRadixErr","","",54,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",54,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric operations taking the second operand by reference.",N,N],[8,"RefNum","","The trait for references which implement numeric operations, taking the second operand either by value or by reference.",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment operators (like `+=`).",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment operators.",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement assignment operations taking the second operand by reference.",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",55,N],[13,"Invalid","","",55,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",56,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[8,"DspNumber","basic_dsp_vector::numbers","A trait for a numeric value which at least supports a subset of the operations defined in this crate. Can be an integer or a floating point number. In order to have support for all operations in this crate a must implement the `RealNumber`.",N,N],[8,"ToSimd","","Associates a number type with a SIMD register type.",N,N],[16,"RegFallback","","Type for the SIMD register on the CPU.",57,N],[16,"RegSse","","",57,N],[16,"RegAvx","","",57,N],[16,"RegAvx512","","",57,N],[16,"GpuReg","","Type for the SIMD register on the GPU. Defaults to an arbitrary type if GPU support is not compiled in.",57,N],[8,"RealNumber","","A real floating pointer number intended to abstract over `f32` and `f64`.",N,N],[8,"Zero","","This trait is necessary so that we can define zero for types outside this crate. It calls the `num_traits::Zero` trait where possible.",N,N],[10,"zero","","",58,[[],["self"]]],[6,"RealTimeVec","basic_dsp_vector","A vector with real numbers in time domain.",N,N],[6,"RealFreqVec","","A vector with real numbers in frequency domain.",N,N],[6,"ComplexTimeVec","","A vector with complex numbers in time domain.",N,N],[6,"ComplexFreqVec","","A vector with complex numbers in frequency domain.",N,N],[6,"GenDspVec","","A vector with no information about number space or domain at compile time.",N,N],[6,"RealTimeVecSlice32","","A vector with real numbers in time domain.",N,N],[6,"RealFreqVecSlice32","","A vector with real numbers in frequency domain.",N,N],[6,"ComplexTimeVecSlice32","","A vector with complex numbers in time domain.",N,N],[6,"ComplexFreqVecSlice32","","A vector with complex numbers in frequency domain.",N,N],[6,"GenDspVecSlice32","","A vector with no information about number space or domain at compile time.",N,N],[6,"RealTimeVecSlice64","","A vector with real numbers in time domain.",N,N],[6,"RealFreqVecSlice64","","A vector with real numbers in frequency domain.",N,N],[6,"ComplexTimeVecSlice64","","A vector with complex numbers in time domain.",N,N],[6,"ComplexFreqVecSlice64","","A vector with complex numbers in frequency domain.",N,N],[6,"GenDspVecSlice64","","A vector with no information about number space or domain at compile time.",N,N],[6,"RealTimeVec32","","A vector with real numbers in time domain.",N,N],[6,"RealFreqVec32","","A vector with real numbers in frequency domain.",N,N],[6,"ComplexTimeVec32","","A vector with complex numbers in time domain.",N,N],[6,"ComplexFreqVec32","","A vector with complex numbers in frequency domain.",N,N],[6,"GenDspVec32","","A vector with no information about number space or domain at compile time.",N,N],[6,"RealTimeVec64","","A vector with real numbers in time domain.",N,N],[6,"RealFreqVec64","","A vector with real numbers in frequency domain.",N,N],[6,"ComplexTimeVec64","","A vector with complex numbers in time domain.",N,N],[6,"ComplexFreqVec64","","A vector with complex numbers in frequency domain.",N,N],[6,"GenDspVec64","","A vector with no information about number space or domain at compile time.",N,N],[6,"StatsVec","","Alias for a vector of any statistical information.",N,N],[6,"TransRes","","Result for operations which transform a type (most commonly the type is a vector). On success the transformed type is returned. On failure it contains an error reason and the original type with with invalid data which still can be used in order to avoid memory allocation.",N,N],[6,"VoidResult","","Void/nothing in case of success or a reason in case of an error.",N,N],[6,"ScalarResult","","Scalar result or a reason in case of an error.",N,N],[17,"STATS_VEC_CAPACTIY","","The maximum `len` for any of the `*split` methods.",N,N],[8,"ToSlice","","A trait to convert a type into a slice.",N,N],[10,"to_slice","","Convert to a slice.",59,N],[10,"len","","Length of a slice.",59,[[["self"]],["usize"]]],[10,"is_empty","","Indicates whether or not this storage type is empty.",59,[[["self"]],["bool"]]],[10,"alloc_len","","Gets the allocated length of a storage. It's expected that `self.alloc_len() >= self.len()` in all cases.",59,[[["self"]],["usize"]]],[10,"try_resize","","Resizes the storage to support at least `len` elements or returns an error if resizing isn't supported.",59,[[["self"],["usize"]],["voidresult"]]],[8,"ToSliceMut","","A trait to convert a type into a mutable slice.",N,N],[10,"to_slice_mut","","Convert to a mutable slice.",60,N],[8,"Resize","","A trait for storage types which are known to have the capability to increase their capacity.",N,N],[10,"resize","","Resize a storage type. Must work for any value of `len`, however it's okay if after this method `self.alloc_len() > len` or in words: It's okay if the method allocates more memory than specified in the parameter.",61,[[["self"],["usize"]]]],[8,"ToDspVector","","Conversion from a generic data type into a dsp vector which tracks its meta information (domain and number space) only at runtime. See `ToRealVector` and `ToComplexVector` for alternatives which track most of the meta data with the type system and therefore avoid runtime errors.",N,N],[10,"to_gen_dsp_vec","","Create a new generic vector. `delta` can be changed after construction with a call of `set_delta`.",62,[[["self"],["bool"],["datadomain"]],["gendspvec"]]],[10,"to_dsp_vec","","Create a new vector from the given meta data. The meta data can be retrieved from an existing vector. If no existing vector is available then one of the other constructor methods should be used.",62,[[["self"],["typemetadata"]],["dspvec"]]],[8,"ToRealVector","","Conversion from a generic data type into a dsp vector with real data.",N,N],[10,"to_real_time_vec","","Create a new vector in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",63,[[["self"]],["realtimevec"]]],[10,"to_real_freq_vec","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",63,[[["self"]],["realfreqvec"]]],[8,"ToComplexVector","","Conversion from a generic data type into a dsp vector with complex data.",N,N],[10,"to_complex_time_vec","","Create a new vector in complex number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",64,[[["self"]],["complextimevec"]]],[10,"to_complex_freq_vec","","Create a new vector in complex number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",64,[[["self"]],["complexfreqvec"]]],[8,"FromVector","","Retrieves the underlying storage from a vector.",N,N],[16,"Output","","Type of the underlying storage of a vector.",65,N],[10,"get","","Gets the underlying storage and the number of elements which contain valid.",65,N],[10,"to_slice","","Gets the underlying slice of a vector.",65,N],[8,"InterleaveToVector","","Conversion from two instances of a generic data type into a dsp vector with complex data.",N,N],[10,"interleave_to_complex_time_vec","","Create a new vector in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",66,[[["self"],["self"]],["result",["complextimevec","errorreason"]]]],[10,"interleave_to_complex_freq_vec","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",66,[[["self"],["self"]],["result",["complexfreqvec","errorreason"]]]],[8,"ToDspVectorPar","","Conversion from a generic data type into a dsp vector which tracks its meta information (domain and number space) only at runtime. See `ToRealVector` and `ToComplexVector` for alternatives which track most of the meta data with the type system and therefore avoid runtime errors.",N,N],[10,"to_gen_dsp_vec_par","","Create a new generic vector. `delta` can be changed after construction with a call of `set_delta`.",67,[[["self"],["bool"],["datadomain"]],["gendspvec"]]],[10,"to_dsp_vec_par","","Create a new vector from the given meta data. The meta data can be retrieved from an existing vector. If no existing vector is available then one of the other constructor methods should be used.",67,[[["self"],["typemetadata"]],["dspvec"]]],[8,"ToRealVectorPar","","Conversion from a generic data type into a dsp vector with real data.",N,N],[10,"to_real_time_vec_par","","Create a new vector in real number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",68,[[["self"]],["realtimevec"]]],[10,"to_real_freq_vec_par","","Create a new vector in real number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",68,[[["self"]],["realfreqvec"]]],[8,"ToComplexVectorPar","","Conversion from a generic data type into a dsp vector with complex data.",N,N],[10,"to_complex_time_vec_par","","Create a new vector in complex number space and time domain. `delta` can be changed after construction with a call of `set_delta`.",69,[[["self"]],["complextimevec"]]],[10,"to_complex_freq_vec_par","","Create a new vector in complex number space and frequency domain. `delta` can be changed after construction with a call of `set_delta`.",69,[[["self"]],["complexfreqvec"]]],[8,"ComplexIndex","","Like `std::ops::Index` but with a different method name so that it can be used to implement an additional range accessor for complex data.",N,N],[16,"Output","","",70,N],[10,"complex","","The method for complex indexing",70,N],[8,"ComplexIndexMut","","Like `std::ops::IndexMut` but with a different method name so that it can be used to implement a additional range accessor for complex data.",N,N],[10,"complex_mut","","The method for complex indexing",71,N],[8,"MetaData","","A trait which provides information about number space and domain.",N,N],[10,"domain","","The domain in which the data vector resides. Basically specifies the x-axis and the type of operations which are valid on this vector.",72,[[["self"]],["datadomain"]]],[10,"is_complex","","Indicates whether the vector contains complex data. This also specifies the type of operations which are valid on this vector.",72,[[["self"]],["bool"]]],[8,"ResizeOps","","Operations to resize a data type.",N,N],[10,"resize","","Changes `self.len()`. If `self.is_complex()` is true then `len` must be an even number. `len > self.alloc_len()` is only possible if the underlying storage supports resizing.",73,[[["self"],["usize"]],["voidresult"]]],[8,"ResizeBufferedOps","","Operations to resize a data type.",N,N],[10,"resize_b","","Changes `self.len()`. If `self.is_complex()` is true then `len` must be an even number. `len > self.alloc_len()` is only possible if the underlying storage or the buffer supports resizing.",74,[[["self"],["b"],["usize"]],["voidresult"]]],[8,"Vector","","A trait for vector types.",N,N],[10,"delta","","The x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",75,[[["self"]],["t"]]],[10,"set_delta","","Sets the x-axis delta. If `domain` is time domain then `delta` is in `[s]`, in frequency domain `delta` is in `[Hz]`.",75,[[["self"],["t"]]]],[10,"len","","The number of valid elements in the vector. This can be changed with the `Resize` trait.",75,[[["self"]],["usize"]]],[10,"is_empty","","Indicates whether or not the vector is empty.",75,[[["self"]],["bool"]]],[10,"points","","The number of valid points. If the vector is complex then every valid point consists of two floating point numbers, while for real vectors every point only consists of one floating point number.",75,[[["self"]],["usize"]]],[10,"get_multicore_settings","","Gets the multi core settings which determine how the work is split between several cores if the amount of data gets larger.",75,[[["self"]],["multicoresettings"]]],[10,"set_multicore_settings","","Sets the multi core settings which determine how the work is split between several cores if the amount of data gets larger.",75,[[["self"],["multicoresettings"]]]],[10,"alloc_len","","Gets the number of allocated elements in the underlying vector. The allocated length may be larger than the length of valid points. In most cases you likely want to have `len`or `points` instead.",75,[[["self"]],["usize"]]],[8,"GetMetaData","","Gets the meta data of a type. This can be used to create a new type with the same meta data. # Example",N,N],[10,"get_meta_data","","Gets a copy of the vector meta data. This can be used to create new types with the same meta data.",76,[[["self"]],["typemetadata"]]],[8,"ComplexToRealTransformsOps","","Defines transformations from complex to real number space.",N,N],[10,"magnitude","","Gets the absolute value, magnitude or norm of all vector elements. # Example",77,N],[10,"magnitude_squared","","Gets the square root of the absolute value of all vector elements. # Example",77,N],[10,"to_real","","Gets all real elements. # Example",77,N],[10,"to_imag","","Gets all imag elements. # Example",77,N],[10,"phase","","Gets the phase of all elements in [rad]. # Example",77,N],[8,"ComplexToRealTransformsOpsBuffered","","Defines transformations from complex to real number space.",N,N],[10,"magnitude_b","","Gets the absolute value, magnitude or norm of all vector elements. # Example",78,N],[10,"magnitude_squared_b","","Gets the square root of the absolute value of all vector elements. # Example",78,N],[10,"to_real_b","","Gets all real elements. # Example",78,N],[10,"to_imag_b","","Gets all imag elements. # Example",78,N],[10,"phase_b","","Gets the phase of all elements in [rad]. # Example",78,N],[8,"ComplexToRealGetterOps","","Defines getters to get real data from complex types.",N,N],[10,"get_real","","Copies all real elements into the given vector. # Example",79,[[["self"],["a"]]]],[10,"get_imag","","Copies all imag elements into the given vector. # Example",79,[[["self"],["a"]]]],[10,"get_magnitude","","Copies the absolute value or magnitude of all vector elements into the given target vector. # Example",79,[[["self"],["a"]]]],[10,"get_magnitude_squared","","Copies the absolute value squared or magnitude squared of all vector elements into the given target vector. # Example",79,[[["self"],["a"]]]],[10,"get_phase","","Copies the phase of all elements in [rad] into the given vector. # Example",79,[[["self"],["a"]]]],[10,"get_real_imag","","Gets the real and imaginary parts and stores them in the given vectors. See also  `get_phase` and `get_complex_abs` for further information.",79,[[["self"],["a"],["a"]]]],[10,"get_mag_phase","","Gets the magnitude and phase and stores them in the given vectors. See also `get_real` and `get_imag` for further information.",79,[[["self"],["a"],["a"]]]],[8,"ComplexToRealSetterOps","","Defines setters to create complex data from real data.",N,N],[10,"set_real_imag","","Overrides the `self` vectors data with the real and imaginary data in the given vectors. `real` and `imag` must have the same size.",80,[[["self"],["a"],["a"]],["voidresult"]]],[10,"set_mag_phase","","Overrides the `self` vectors data with the magnitude and phase data in the given vectors. Note that `self` vector will immediately convert the data into a real and imaginary representation of the complex numbers which is its default format. `mag` and `phase` must have the same size.",80,[[["self"],["a"],["a"]],["voidresult"]]],[8,"ComplexOps","","Operations on complex types.",N,N],[10,"multiply_complex_exponential","","Multiplies each vector element with `exp(j*(a*idx*self.delta() + b))` where `a` and `b` are arguments and `idx` is the index of the data points in the vector ranging from `0 to self.points() - 1`. `j` is the imaginary number and `exp` the exponential function.",81,[[["self"],["t"],["t"]]]],[10,"conj","","Calculates the complex conjugate of the vector. # Example",81,[[["self"]]]],[8,"RealToComplexTransformsOps","","Defines transformations from real to complex number space.",N,N],[10,"to_complex","","Converts the real vector into a complex vector.",82,[[["self"]],["transres"]]],[8,"RealToComplexTransformsOpsBuffered","","Defines transformations from real to complex number space.",N,N],[10,"to_complex_b","","Converts the real vector into a complex vector. The buffer allows this operation to succeed even if the storage type doesn't allow resizing.",83,N],[8,"RealOps","","Operations on real types.",N,N],[10,"abs","","Gets the absolute value of all vector elements. # Example",84,[[["self"]]]],[8,"ModuloOps","","Operations on real types.",N,N],[10,"wrap","","Each value in the vector is dividable by the divisor and the remainder is stored in the resulting vector. This the same a modulo operation or to phase wrapping.",85,[[["self"],["t"]]]],[10,"unwrap","","This function corrects the jumps in the given vector which occur due to wrap or modulo operations. This will undo a wrap operation only if the deltas are smaller than half the divisor.",85,[[["self"],["t"]]]],[8,"ApproximatedOps","","Recommended to be only used with the CPU feature flags `sse` or `avx`.",N,N],[10,"ln_approx","","Computes the principal value approximation of natural logarithm of every element in the vector.",86,[[["self"]]]],[10,"exp_approx","","Calculates the natural exponential approximation for every vector element.",86,[[["self"]]]],[10,"sin_approx","","Calculates the sine approximation of each element in radians.",86,[[["self"]]]],[10,"cos_approx","","Calculates the cosine approximation of each element in radians",86,[[["self"]]]],[10,"log_approx","","Calculates the approximated logarithm to the given base for every vector element.",86,[[["self"],["t"]]]],[10,"expf_approx","","Calculates the approximated exponential to the given base for every vector element.",86,[[["self"],["t"]]]],[10,"powf_approx","","Raises every vector element to approximately a floating point power.",86,[[["self"],["t"]]]],[8,"FrequencyDomainOperations","","Defines all operations which are valid on `DataVecs` containing frequency domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in frequency domain and complex number space.",N,N],[10,"mirror","","This function mirrors the spectrum vector to transform a symmetric spectrum into a full spectrum with the DC element at index 0 (no FFT shift/swap halves).",87,[[["self"],["b"]]]],[10,"fft_shift","","Swaps vector halves after a Fourier Transformation.",87,[[["self"]]]],[10,"ifft_shift","","Swaps vector halves before an Inverse Fourier Transformation.",87,[[["self"]]]],[8,"TimeDomainOperations","","Defines all operations which are valid on `DataVecs` containing time domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in time domain.",N,N],[10,"apply_window","","Applies a window to the data vector.",88,[[["self"],["windowfunction"]]]],[10,"unapply_window","","Removes a window from the data vector.",88,[[["self"],["windowfunction"]]]],[8,"TimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs` containing time domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in time domain.",N,N],[10,"plain_fft","","Performs a Fast Fourier Transformation transforming a time domain vector into a frequency domain vector.",89,N],[10,"fft","","Performs a Fast Fourier Transformation transforming a time domain vector into a frequency domain vector. # Example",89,N],[10,"windowed_fft","","Applies a FFT window and performs a Fast Fourier Transformation transforming a time domain vector into a frequency domain vector.",89,N],[8,"SymmetricTimeToFrequencyDomainOperations","","Defines all operations which are valid on `DataVecs` containing real time domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in time domain or with `VectorMustHaveAnOddLength` if `self.points()` isn't and odd number.",N,N],[10,"plain_sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self` is symmetric around the center. This assumption isn't verified and no error is raised if the vector isn't symmetric.",90,[[["self"],["b"]],["transres"]]],[10,"sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self` is symmetric around the center. This assumption isn't verified and no error is raised if the vector isn't symmetric. # Failures TransRes may report the following `ErrorReason` members:",90,[[["self"],["b"]],["transres"]]],[10,"windowed_sfft","","Performs a Symmetric Fast Fourier Transformation under the assumption that `self` is symmetric around the center. This assumption isn't verified and no error is raised if the vector isn't symmetric. # Failures TransRes may report the following `ErrorReason` members:",90,[[["self"],["b"],["windowfunction"]],["transres"]]],[8,"FrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs` containing frequency domain data. # Failures All operations in this trait set `self.len()` to `0` if the vector isn't in frequency domain and complex number space.",N,N],[10,"plain_ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector into a time domain vector.",91,N],[10,"ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector into a time domain vector. # Example",91,N],[10,"windowed_ifft","","Performs an Inverse Fast Fourier Transformation transforming a frequency domain vector into a time domain vector and removes the FFT window.",91,N],[8,"SymmetricFrequencyToTimeDomainOperations","","Defines all operations which are valid on `DataVecs` containing frequency domain data and the data is assumed to half of complex conjugate symmetric spectrum round 0 Hz where the 0 Hz element itself is real. # Failures All operations in this trait set `self.len()` to `0` if the first element (0Hz) isn't real.",N,N],[10,"plain_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation under the assumption that `self` contains half of a symmetric spectrum starting from 0 Hz. This assumption isn't verified and no error is raised if the spectrum isn't symmetric. The reason for this is that there is no robust verification possible.",92,[[["self"],["b"]],["transres"]]],[10,"sifft","","Performs a Symmetric Inverse Fast Fourier Transformation under the assumption that `self` contains half of a symmetric spectrum starting from 0 Hz. This assumption isn't verified and no error is raised if the spectrum isn't symmetric. The reason for this is that there is no robust verification possible.",92,[[["self"],["b"]],["transres"]]],[10,"windowed_sifft","","Performs a Symmetric Inverse Fast Fourier Transformation (SIFFT) and removes the FFT window. The SIFFT is performed under the assumption that `self` contains half of a symmetric spectrum starting from 0 Hz. This assumption isn't verified and no error is raised if the spectrum isn't symmetric. The reason for this is that there is no robust verification possible.",92,[[["self"],["b"],["windowfunction"]],["transres"]]],[8,"CrossCorrelationArgumentOps","","Cross-correlation of data vectors. See also https://en.wikipedia.org/wiki/Cross-correlation",N,N],[10,"prepare_argument","","Prepares an argument to be used for convolution. Preparing an argument includes two steps:",93,N],[10,"prepare_argument_padded","","Prepares an argument to be used for convolution. The argument is zero padded to length of `2 * self.points() - 1` and then the same operations are performed as described for `prepare_argument`.",93,N],[8,"CrossCorrelationOps","","A trait to calculate the cross correlation.",N,N],[10,"correlate","","Calculates the correlation between `self` and `other`. `other` needs to be a time vector which went through one of the prepare functions `prepare_argument` or `prepare_argument_padded`. See also the trait description for more details.",94,[[["self"],["b"],["a"]],["voidresult"]]],[8,"Convolution","","Provides a convolution operations.",N,N],[10,"convolve","","Convolves `self` with the convolution function `impulse_response`. For performance consider to to use `FrequencyMultiplication` instead of this operation depending on `len`.",95,[[["self"],["b"],["c"],["t"],["usize"]]]],[8,"ConvolutionOps","","Provides a convolution operation for types which at some point are slice based.",N,N],[10,"convolve_signal","","Convolves `self` with the convolution function `impulse_response`. For performance it's recommended to use multiply both vectors in frequency domain instead of this operation.",96,[[["self"],["b"],["a"]],["voidresult"]]],[8,"FrequencyMultiplication","","Provides a frequency response multiplication operations.",N,N],[10,"multiply_frequency_response","","Multiplies `self` with the frequency response function `frequency_response`.",97,[[["self"],["c"],["t"]]]],[8,"InterpolationOps","","Provides interpolation operations for real and complex data vectors.",N,N],[10,"interpolatef","","Interpolates `self` with the convolution function `function` by the real value `interpolation_factor`. InterpolationOps is done in time domain and the argument `conv_len` can be used to balance accuracy and computational performance. A `delay` can be used to delay or phase shift the vector. The `delay` considers `self.delta()`.",98,[[["self"],["b"],["realimpulseresponse"],["t"],["t"],["usize"]]]],[10,"interpolatei","","Interpolates `self` with the convolution function `function` by the integer value `interpolation_factor`. InterpolationOps is done in in frequency domain.",98,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["voidresult"]]],[10,"interpolate","","Interpolates the signal in frequency domain by padding it with zeros.",98,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["voidresult"]]],[10,"interpft","","Interpolates the signal in frequency domain by padding it with zeros. This function preserves the shape of the signal in frequency domain.",98,[[["self"],["b"],["usize"]]]],[10,"decimatei","","Decimates or downsamples `self`. `decimatei` is the inverse function to `interpolatei`.",98,[[["self"],["u32"],["u32"]]]],[8,"RealInterpolationOps","","Provides interpolation operations which are only applicable for real data vectors. # Failures All operations in this trait fail with `VectorMustBeReal` if the vector isn't in the real number space.",N,N],[10,"interpolate_hermite","","Piecewise cubic hermite interpolation between samples.",99,[[["self"],["b"],["t"],["t"]]]],[10,"interpolate_lin","","Linear interpolation between samples.",99,[[["self"],["b"],["t"],["t"]]]],[8,"RededicateOps","","This trait allows to change a data type. The operations will convert a type to a different one and set `self.len()` to zero. However `self.allocated_len()` will remain unchanged. The use case for this is to allow to reuse the memory of a vector for different operations.",N,N],[10,"rededicate_from","","Make `Other` a `Self`. # Example",100,[[["other"]],["self"]]],[8,"RededicateForceOps","","This trait allows to change a data type and performs the Conversion without any checks. `RededicateOps` provides the same functionality but performs runtime checks to avoid that data is interpreted the wrong way.",N,N],[10,"rededicate_from_force","","Make `Other` a `Self` without performing any checks.",101,[[["other"]],["self"]]],[10,"rededicate_with_runtime_data","","Make `Other` a `Self` without performing any checks.",101,[[["other"],["bool"],["datadomain"]],["self"]]],[8,"RededicateToOps","","This trait allows to change a data type. The operations will convert a type to a different one and set `self.len()` to zero. However `self.allocated_len()` will remain unchanged. The use case for this is to allow to reuse the memory of a vector for different operations.",N,N],[10,"rededicate","","Converts `Self` inot `Other`.",102,[[["self"]],["other"]]],[8,"ToRealResult","","Specifies what the the result is if a type is transformed to real numbers.",N,N],[16,"RealResult","","",103,N],[8,"ToComplexResult","","Specifies what the the result is if a type is transformed to complex numbers.",N,N],[16,"ComplexResult","","",104,N],[8,"ToTimeResult","","Specifies what the the result is if a type is transformed to time domain.",N,N],[16,"TimeResult","","Specifies what the the result is if a type is transformed to time domain.",105,N],[8,"ToFreqResult","","Specifies what the the result is if a type is transformed to frequency domain.",N,N],[16,"FreqResult","","",106,N],[8,"ToRealTimeResult","","Specifies what the the result is if a type is transformed to real numbers in time domain.",N,N],[16,"RealTimeResult","","",107,N],[8,"ScaleOps","","An operation which multiplies each vector element with a constant",N,N],[10,"scale","","Multiplies the vector element with a scalar.",108,[[["self"],["t"]]]],[8,"OffsetOps","","An operation which adds a constant to each vector element",N,N],[10,"offset","","Adds a scalar to each vector element.",109,[[["self"],["t"]]]],[8,"ElementaryOps","","Elementary algebra on types: addition, subtraction, multiplication and division",N,N],[10,"add","","Calculates the sum of `self + summand`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",110,[[["self"],["a"]],["voidresult"]]],[10,"sub","","Calculates the difference of `self - subtrahend`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",110,[[["self"],["a"]],["voidresult"]]],[10,"mul","","Calculates the product of `self * factor`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",110,[[["self"],["a"]],["voidresult"]]],[10,"div","","Calculates the quotient of `self / summand`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",110,[[["self"],["a"]],["voidresult"]]],[8,"ElementaryWrapAroundOps","","Elementary algebra on types where the argument might contain less data points than `self`.",N,N],[10,"add_smaller","","Calculates the sum of `self + summand`. `summand` may be smaller than `self` as long as `self.len() % summand.len() == 0`. THe result is the same as it would be if you would repeat `summand` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",111,[[["self"],["a"]],["voidresult"]]],[10,"sub_smaller","","Calculates the sum of `self - subtrahend`. `subtrahend` may be smaller than `self` as long as `self.len() % subtrahend.len() == 0`. THe result is the same as it would be if you would repeat `subtrahend` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",111,[[["self"],["a"]],["voidresult"]]],[10,"mul_smaller","","Calculates the sum of `self - factor`. `factor` may be smaller than `self` as long as `self.len() % factor.len() == 0`. THe result is the same as it would be if you would repeat `factor` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",111,[[["self"],["a"]],["voidresult"]]],[10,"div_smaller","","Calculates the sum of `self - divisor`. `divisor` may be smaller than `self` as long as `self.len() % divisor.len() == 0`. THe result is the same as it would be if you would repeat `divisor` until it has the same length as `self`. It consumes self and returns the result. # Failures TransRes may report the following `ErrorReason` members:",111,[[["self"],["a"]],["voidresult"]]],[8,"TrigOps","","Trigonometry methods.",N,N],[10,"sin","","Calculates the sine of each element in radians.",112,[[["self"]]]],[10,"cos","","Calculates the cosine of each element in radians.",112,[[["self"]]]],[10,"tan","","Calculates the tangent of each element in radians.",112,[[["self"]]]],[10,"asin","","Calculates the principal value of the inverse sine of each element in radians.",112,[[["self"]]]],[10,"acos","","Calculates the principal value of the inverse cosine of each element in radians.",112,[[["self"]]]],[10,"atan","","Calculates the principal value of the inverse tangent of each element in radians.",112,[[["self"]]]],[10,"sinh","","Calculates the hyperbolic sine each element in radians.",112,[[["self"]]]],[10,"cosh","","Calculates the hyperbolic cosine each element in radians.",112,[[["self"]]]],[10,"tanh","","Calculates the hyperbolic tangent each element in radians.",112,[[["self"]]]],[10,"asinh","","Calculates the principal value of the inverse hyperbolic sine of each element in radians.",112,[[["self"]]]],[10,"acosh","","Calculates the principal value of the inverse hyperbolic cosine of each element in radians.",112,[[["self"]]]],[10,"atanh","","Calculates the principal value of the inverse hyperbolic tangent of each element in radians.",112,[[["self"]]]],[8,"PowerOps","","Roots, powers, exponentials and logarithms.",N,N],[10,"sqrt","","Gets the square root of all vector elements.",113,[[["self"]]]],[10,"square","","Squares all vector elements.",113,[[["self"]]]],[10,"root","","Calculates the n-th root of every vector element.",113,[[["self"],["t"]]]],[10,"powf","","Raises every vector element to a floating point power.",113,[[["self"],["t"]]]],[10,"ln","","Computes the principal value of natural logarithm of every element in the vector.",113,[[["self"]]]],[10,"exp","","Calculates the natural exponential for every vector element.",113,[[["self"]]]],[10,"log","","Calculates the logarithm to the given base for every vector element.",113,[[["self"],["t"]]]],[10,"expf","","Calculates the exponential to the given base for every vector element.",113,[[["self"],["t"]]]],[8,"ReorganizeDataOps","","This trait allows to reorganize the data by changing positions of the individual elements.",N,N],[10,"reverse","","Reverses the data inside the vector.",114,[[["self"]]]],[10,"swap_halves","","This function swaps both halves of the vector. This operation is also called FFT shift Use it after a `plain_fft` to get a spectrum which is centered at `0 Hz`.",114,[[["self"]]]],[8,"InsertZerosOps","","A trait to insert zeros into the data at some specified positions.",N,N],[10,"zero_pad","","Appends zeros add the end of the vector until the vector has the size given in the points argument. If `points` smaller than the `self.len()` then this operation won't do anything, however in future it will raise an error.",115,[[["self"],["usize"],["paddingoption"]],["voidresult"]]],[10,"zero_interleave","","Interleaves zeros `factor - 1`times after every vector element, so that the resulting vector will have a length of `self.len() * factor`.",115,[[["self"],["u32"]],["voidresult"]]],[8,"InsertZerosOpsBuffered","","A trait to insert zeros into the data at some specified positions. A buffer is used for types which can't be resized and/or to speed up the calculation.",N,N],[10,"zero_pad_b","","Appends zeros add the end of the vector until the vector has the size given in the points argument. If `points` smaller than the `self.len()` then this operation will return an error.",116,[[["self"],["b"],["usize"],["paddingoption"]],["voidresult"]]],[10,"zero_interleave_b","","Interleaves zeros `factor - 1`times after every vector element, so that the resulting vector will have a length of `self.len() * factor`.",116,[[["self"],["b"],["u32"]]]],[8,"SplitOps","","Splits the data into several smaller pieces of equal size.",N,N],[10,"split_into","","Splits the vector into several smaller vectors. `self.len()` must be dividable by `targets.len()` without a remainder and this condition must be true too `targets.len() > 0`. # Failures TransRes may report the following `ErrorReason` members:",117,N],[8,"MergeOps","","Merges several pieces of equal size into one data chunk.",N,N],[10,"merge","","Merges several vectors into `self`. All vectors must have the same size and at least one vector must be provided. # Failures TransRes may report the following `ErrorReason` members:",118,N],[8,"DiffSumOps","","A trait to calculate the diff (1st derivative in a discrete number space) or cumulative sum (integral  in a discrete number space).",N,N],[10,"diff","","Calculates the delta of each elements to its previous element. This will decrease the vector length by one point.",119,[[["self"]]]],[10,"diff_with_start","","Calculates the delta of each elements to its previous element. The first element will remain unchanged.",119,[[["self"]]]],[10,"cum_sum","","Calculates the cumulative sum of all elements. This operation undoes the `diff_with_start`operation.",119,[[["self"]]]],[8,"DotProductOps","","An operation which multiplies each vector element with a constant",N,N],[16,"Output","","",120,N],[10,"dot_product","","Calculates the dot product of self and factor. Self and factor remain unchanged.",120,N],[8,"PreciseDotProductOps","","An operation which multiplies each vector element with a constant",N,N],[16,"Output","","",121,N],[10,"dot_product_prec","","Calculates the dot product of self and factor using a more precise but slower algorithm. Self and factor remain unchanged.",121,N],[8,"MapInplaceOps","","Operations which allow to iterate over the vector and to derive results or to change the vector.",N,N],[10,"map_inplace","","Transforms all vector elements using the function `map`.",122,[[["self"],["a"],["f"]]]],[8,"MapAggregateOps","","Operations which allow to iterate over the vector and to derive results.",N,N],[16,"Output","","",123,N],[10,"map_aggregate","","Transforms all vector elements using the function `map` and then aggregates all the results with `aggregate`. `aggregate` must be a commutativity and associativity; that's because there is no guarantee that the numbers will be aggregated in any deterministic order.",123,N],[8,"StatisticsOps","","This trait offers operations to calculate statistics about the data in a type.",N,N],[16,"Result","","",124,N],[10,"statistics","","Calculates the statistics of the data.",124,N],[8,"StatisticsSplitOps","","This trait offers operations to calculate statistics about the data in a type.",N,N],[16,"Result","","",125,N],[10,"statistics_split","","Calculates the statistics of the data contained in the vector as if the vector would have been split into `len` pieces. `self.len` should be dividable by `len` without a remainder, but this isn't enforced by the implementation. For implementation reasons `len <= 16` must be true.",125,[[["self"],["usize"]],["scalarresult"]]],[8,"SumOps","","Offers operations to calculate the sum or the sum of squares.",N,N],[10,"sum","","Calculates the sum of the data contained in the vector. # Example",126,[[["self"]],["t"]]],[10,"sum_sq","","Calculates the sum of the squared data contained in the vector. # Example",126,[[["self"]],["t"]]],[8,"Stats","","Operations on statistics.",N,N],[10,"empty","","Creates an empty statistics struct.",127,[[],["self"]]],[10,"empty_vec","","Creates a vector of empty statistics structs.",127,[[["usize"]],["statsvec"]]],[10,"invalid","","Creates a statistics struct which resembles an invalid result.",127,[[],["self"]]],[10,"merge","","Merges several statistics into one.",127,N],[10,"merge_cols","","Merges several vectors of statistics into one vector.",127,N],[10,"add","","Adds a new value to the statistics, all statistic fields get updated.",127,[[["self"],["t"],["usize"]]]],[8,"PreciseStatisticsOps","","Offers the same functionality as the `StatisticsOps` trait but the statistics are calculated in a more precise (and slower) way.",N,N],[16,"Result","","",128,N],[10,"statistics_prec","","Calculates the statistics of the data contained in the vector using a more precise but slower algorithm.",128,N],[8,"PreciseStatisticsSplitOps","","Offers the same functionality as the `StatisticsOps` trait but the statistics are calculated in a more precise (and slower) way.",N,N],[16,"Result","","",129,N],[10,"statistics_split_prec","","Calculates the statistics of the data contained in the vector as if the vector would have been split into `len` pieces using a more precise but slower algorithm. `self.len` should be dividable by `len` without a remainder, but this isn't enforced by the implementation. For implementation reasons `len <= 16` must be true.",129,[[["self"],["usize"]],["scalarresult"]]],[8,"PreciseSumOps","","Offers the same functionality as the `SumOps` trait but the sums are calculated in a more precise (and slower) way.",N,N],[10,"sum_prec","","Calculates the sum of the data contained in the vector using a more precise but slower algorithm. # Example",130,[[["self"]],["t"]]],[10,"sum_sq_prec","","Calculates the sum of the squared data contained in the vector using a more precise but slower algorithm. # Example",130,[[["self"]],["t"]]],[8,"PreciseStats","","A trait for statistics which allows to add new values in a way so that the numerical uncertainty has less impact on the final results.",N,N],[10,"add_prec","","Adds a new values to the statistics using the Kahan summation algorithm described here: https://en.wikipedia.org/wiki/Kahan_summation_algorithm",131,[[["self"],["t"],["usize"],["t"],["t"]]]],[8,"BufferBorrow","","A \"slice-like\" type which also allows to",N,N],[10,"trade","","Moves the content of this slice into `storage`. This operation might just copy all contents into `storage` or",132,[[["self"],["s"]]]],[8,"Buffer","","A buffer which can be used by other types. Types will call buffers to create new arrays. A buffer may can implement any buffering strategy.",N,N],[16,"Borrow","","The type of the burrow which is returned.",133,N],[10,"borrow","","Asks the buffer for new storage of exactly size `len`. The returned array doesn't need to have be initialized with any default value.",133,N],[10,"alloc_len","","Returns the allocated length of all storage within this buffer.",133,[[["self"]],["usize"]]],[8,"NumberSpace","","Number space (real or complex) information.",N,N],[10,"is_complex","","",134,[[["self"]],["bool"]]],[10,"to_complex","","For implementations which track meta data at runtime this method may be implemented to transition between different states. For all other implementations they may leave this empty.",134,[[["self"]]]],[10,"to_real","","See `to_complex` for more details.",134,[[["self"]]]],[8,"Domain","","Domain (time or frequency) information.",N,N],[10,"domain","","",135,[[["self"]],["datadomain"]]],[10,"to_freq","","See `to_complex` for some details.",135,[[["self"]]]],[10,"to_time","","See `to_complex` for some details.",135,[[["self"]]]],[8,"RealNumberSpace","","Trait for types containing real data.",N,N],[8,"ComplexNumberSpace","","Trait for types containing complex data.",N,N],[8,"TimeDomain","","Trait for types containing time domain data.",N,N],[8,"FrequencyDomain","","Trait for types containing frequency domain data.",N,N],[8,"PosEq","","Expresses at compile time that two classes could potentially represent the same number space or domain.",N,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"from","","",136,[[["t"]],["t"]]],[11,"into","","",136,[[["self"]],["u"]]],[11,"try_from","","",136,[[["u"]],["result"]]],[11,"borrow","","",136,[[["self"]],["t"]]],[11,"get_type_id","","",136,[[["self"]],["typeid"]]],[11,"borrow_mut","","",136,[[["self"]],["t"]]],[11,"try_into","","",136,[[["self"]],["result"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"from","","",137,[[["t"]],["t"]]],[11,"into","","",137,[[["self"]],["u"]]],[11,"try_from","","",137,[[["u"]],["result"]]],[11,"borrow","","",137,[[["self"]],["t"]]],[11,"get_type_id","","",137,[[["self"]],["typeid"]]],[11,"borrow_mut","","",137,[[["self"]],["t"]]],[11,"try_into","","",137,[[["self"]],["result"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"from","","",138,[[["t"]],["t"]]],[11,"into","","",138,[[["self"]],["u"]]],[11,"try_from","","",138,[[["u"]],["result"]]],[11,"borrow","","",138,[[["self"]],["t"]]],[11,"get_type_id","","",138,[[["self"]],["typeid"]]],[11,"borrow_mut","","",138,[[["self"]],["t"]]],[11,"try_into","","",138,[[["self"]],["result"]]],[11,"from","","",139,[[["t"]],["t"]]],[11,"into","","",139,[[["self"]],["u"]]],[11,"try_from","","",139,[[["u"]],["result"]]],[11,"borrow","","",139,[[["self"]],["t"]]],[11,"get_type_id","","",139,[[["self"]],["typeid"]]],[11,"borrow_mut","","",139,[[["self"]],["t"]]],[11,"try_into","","",139,[[["self"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"from","","",140,[[["t"]],["t"]]],[11,"into","","",140,[[["self"]],["u"]]],[11,"to_owned","","",140,[[["self"]],["t"]]],[11,"clone_into","","",140,N],[11,"try_from","","",140,[[["u"]],["result"]]],[11,"borrow","","",140,[[["self"]],["t"]]],[11,"get_type_id","","",140,[[["self"]],["typeid"]]],[11,"borrow_mut","","",140,[[["self"]],["t"]]],[11,"try_into","","",140,[[["self"]],["result"]]],[11,"from","","",141,[[["t"]],["t"]]],[11,"into","","",141,[[["self"]],["u"]]],[11,"try_from","","",141,[[["u"]],["result"]]],[11,"borrow","","",141,[[["self"]],["t"]]],[11,"get_type_id","","",141,[[["self"]],["typeid"]]],[11,"borrow_mut","","",141,[[["self"]],["t"]]],[11,"try_into","","",141,[[["self"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"from","basic_dsp_vector::conv_types","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"from","basic_dsp_vector::meta","",142,[[["t"]],["t"]]],[11,"into","","",142,[[["self"]],["u"]]],[11,"to_owned","","",142,[[["self"]],["t"]]],[11,"clone_into","","",142,N],[11,"try_from","","",142,[[["u"]],["result"]]],[11,"borrow","","",142,[[["self"]],["t"]]],[11,"get_type_id","","",142,[[["self"]],["typeid"]]],[11,"borrow_mut","","",142,[[["self"]],["t"]]],[11,"try_into","","",142,[[["self"]],["result"]]],[11,"from","","",143,[[["t"]],["t"]]],[11,"into","","",143,[[["self"]],["u"]]],[11,"to_owned","","",143,[[["self"]],["t"]]],[11,"clone_into","","",143,N],[11,"try_from","","",143,[[["u"]],["result"]]],[11,"borrow","","",143,[[["self"]],["t"]]],[11,"get_type_id","","",143,[[["self"]],["typeid"]]],[11,"borrow_mut","","",143,[[["self"]],["t"]]],[11,"try_into","","",143,[[["self"]],["result"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,N],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"from","","",144,[[["t"]],["t"]]],[11,"into","","",144,[[["self"]],["u"]]],[11,"to_owned","","",144,[[["self"]],["t"]]],[11,"clone_into","","",144,N],[11,"try_from","","",144,[[["u"]],["result"]]],[11,"borrow","","",144,[[["self"]],["t"]]],[11,"get_type_id","","",144,[[["self"]],["typeid"]]],[11,"borrow_mut","","",144,[[["self"]],["t"]]],[11,"try_into","","",144,[[["self"]],["result"]]],[11,"from","","",145,[[["t"]],["t"]]],[11,"into","","",145,[[["self"]],["u"]]],[11,"to_owned","","",145,[[["self"]],["t"]]],[11,"clone_into","","",145,N],[11,"try_from","","",145,[[["u"]],["result"]]],[11,"borrow","","",145,[[["self"]],["t"]]],[11,"get_type_id","","",145,[[["self"]],["typeid"]]],[11,"borrow_mut","","",145,[[["self"]],["t"]]],[11,"try_into","","",145,[[["self"]],["result"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,N],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"from","basic_dsp_vector::window_functions","",146,[[["t"]],["t"]]],[11,"into","","",146,[[["self"]],["u"]]],[11,"try_from","","",146,[[["u"]],["result"]]],[11,"borrow","","",146,[[["self"]],["t"]]],[11,"get_type_id","","",146,[[["self"]],["typeid"]]],[11,"borrow_mut","","",146,[[["self"]],["t"]]],[11,"try_into","","",146,[[["self"]],["result"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"zero","basic_dsp_vector::numbers","",22,[[],["t"]]],[11,"to_string","","",22,[[["self"]],["string"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"from","basic_dsp_vector::numbers::One","",55,[[["t"]],["t"]]],[11,"into","","",55,[[["self"]],["u"]]],[11,"try_from","","",55,[[["u"]],["result"]]],[11,"borrow","","",55,[[["self"]],["t"]]],[11,"get_type_id","","",55,[[["self"]],["typeid"]]],[11,"borrow_mut","","",55,[[["self"]],["t"]]],[11,"try_into","","",55,[[["self"]],["result"]]],[11,"to_string","","",56,[[["self"]],["string"]]],[11,"from","","",56,[[["t"]],["t"]]],[11,"into","","",56,[[["self"]],["u"]]],[11,"try_from","","",56,[[["u"]],["result"]]],[11,"borrow","","",56,[[["self"]],["t"]]],[11,"get_type_id","","",56,[[["self"]],["typeid"]]],[11,"borrow_mut","","",56,[[["self"]],["t"]]],[11,"try_into","","",56,[[["self"]],["result"]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",55,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",56,[[["self"],["formatter"]],["result",["error"]]]],[11,"one","basic_dsp_vector::numbers","",22,[[],["complex"]]],[11,"is_one","","",22,[[["self"]],["bool"]]],[11,"sum","","",22,[[["i"]],["complex"]]],[11,"sum","","",22,[[["i"]],["complex"]]],[11,"from","","",22,[[["u"]],["option",["complex"]]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",22,[[["str"]],["result",["complex"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"default","","",22,[[],["complex"]]],[11,"add","","",22,[[["self"],["t"]],["complex"]]],[11,"add","","",22,[[["self"],["complex"]],["complex"]]],[11,"add","","",22,[[["self"],["complex"]],["complex"]]],[11,"add","","",22,[[["self"],["t"]],["complex"]]],[11,"mul_assign","","",22,N],[11,"mul_assign","","",22,N],[11,"mul_assign","","",22,N],[11,"mul_assign","","",22,N],[11,"add_assign","","",22,N],[11,"add_assign","","",22,N],[11,"add_assign","","",22,N],[11,"add_assign","","",22,N],[11,"clone","","",22,[[["self"]],["complex"]]],[11,"eq","","",22,[[["self"],["complex"]],["bool"]]],[11,"ne","","",22,[[["self"],["complex"]],["bool"]]],[11,"rem","","",22,[[["self"],["t"]],["complex"]]],[11,"rem","","",22,[[["self"],["complex"]],["complex"]]],[11,"rem","","",22,[[["self"],["complex"]],["complex"]]],[11,"rem","","",22,[[["self"],["t"]],["complex"]]],[11,"as_","","",22,[[["self"]],["u"]]],[11,"mul","","",22,[[["self"],["t"]],["complex"]]],[11,"mul","","",22,[[["self"],["complex"]],["complex"]]],[11,"mul","","",22,[[["self"],["complex"]],["complex"]]],[11,"mul","","",22,[[["self"],["t"]],["complex"]]],[11,"rem_assign","","",22,N],[11,"rem_assign","","",22,N],[11,"rem_assign","","",22,N],[11,"rem_assign","","",22,N],[11,"inv","","",22,[[["self"]],["complex"]]],[11,"from","","",22,[[["t"]],["complex"]]],[11,"from","","",22,[[["t"]],["complex"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and `b` are of type `T`",22,[[["str"],["u32"]],["result",["complex"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub","","",22,[[["self"],["complex"]],["complex"]]],[11,"sub","","",22,[[["self"],["t"]],["complex"]]],[11,"sub","","",22,[[["self"],["complex"]],["complex"]]],[11,"sub","","",22,[[["self"],["t"]],["complex"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"product","","",22,[[["i"]],["complex"]]],[11,"product","","",22,[[["i"]],["complex"]]],[11,"neg","","",22,[[["self"]],["complex"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"div_assign","","",22,N],[11,"div_assign","","",22,N],[11,"div_assign","","",22,N],[11,"div_assign","","",22,N],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"div","","",22,[[["self"],["complex"]],["complex"]]],[11,"div","","",22,[[["self"],["t"]],["complex"]]],[11,"div","","",22,[[["self"],["complex"]],["complex"]]],[11,"div","","",22,[[["self"],["t"]],["complex"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"sub_assign","","",22,N],[11,"sub_assign","","",22,N],[11,"sub_assign","","",22,N],[11,"sub_assign","","",22,N],[11,"from_usize","","",22,[[["usize"]],["option",["complex"]]]],[11,"from_isize","","",22,[[["isize"]],["option",["complex"]]]],[11,"from_u8","","",22,[[["u8"]],["option",["complex"]]]],[11,"from_u16","","",22,[[["u16"]],["option",["complex"]]]],[11,"from_u32","","",22,[[["u32"]],["option",["complex"]]]],[11,"from_u64","","",22,[[["u64"]],["option",["complex"]]]],[11,"from_i8","","",22,[[["i8"]],["option",["complex"]]]],[11,"from_i16","","",22,[[["i16"]],["option",["complex"]]]],[11,"from_i32","","",22,[[["i32"]],["option",["complex"]]]],[11,"from_i64","","",22,[[["i64"]],["option",["complex"]]]],[11,"from_u128","","",22,[[["u128"]],["option",["complex"]]]],[11,"from_i128","","",22,[[["i128"]],["option",["complex"]]]],[11,"from_f32","","",22,[[["f32"]],["option",["complex"]]]],[11,"from_f64","","",22,[[["f64"]],["option",["complex"]]]],[11,"hash","","",22,N],[11,"to_usize","","",22,[[["self"]],["option",["usize"]]]],[11,"to_isize","","",22,[[["self"]],["option",["isize"]]]],[11,"to_u8","","",22,[[["self"]],["option",["u8"]]]],[11,"to_u16","","",22,[[["self"]],["option",["u16"]]]],[11,"to_u32","","",22,[[["self"]],["option",["u32"]]]],[11,"to_u64","","",22,[[["self"]],["option",["u64"]]]],[11,"to_i8","","",22,[[["self"]],["option",["i8"]]]],[11,"to_i16","","",22,[[["self"]],["option",["i16"]]]],[11,"to_i32","","",22,[[["self"]],["option",["i32"]]]],[11,"to_i64","","",22,[[["self"]],["option",["i64"]]]],[11,"to_u128","","",22,[[["self"]],["option",["u128"]]]],[11,"to_i128","","",22,[[["self"]],["option",["i128"]]]],[11,"to_f32","","",22,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",22,[[["self"]],["option",["f64"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result",["error"]]]],[11,"zero","","",22,[[],["complex"]]],[11,"is_zero","","",22,[[["self"]],["bool"]]],[11,"is_symmetric","basic_dsp_vector::conv_types","",10,[[["self"]],["bool"]]],[11,"calc","","",10,[[["self"],["f32"]],["f32"]]],[11,"is_symmetric","","",10,[[["self"]],["bool"]]],[11,"calc","","",10,[[["self"],["f64"]],["f64"]]],[11,"is_symmetric","","",14,[[["self"]],["bool"]]],[11,"calc","","",14,[[["self"],["t"]],["t"]]],[11,"is_symmetric","","",15,[[["self"]],["bool"]]],[11,"calc","","",15,[[["self"],["t"]],["t"]]],[11,"is_symmetric","","",11,[[["self"]],["bool"]]],[11,"calc","","",11,[[["self"],["f32"]],["f32"]]],[11,"is_symmetric","","",11,[[["self"]],["bool"]]],[11,"calc","","",11,[[["self"],["f64"]],["f64"]]],[11,"is_symmetric","","",14,[[["self"]],["bool"]]],[11,"calc","","",14,[[["self"],["t"]],["t"]]],[11,"is_symmetric","","",15,[[["self"]],["bool"]]],[11,"calc","","",15,[[["self"],["t"]],["t"]]],[11,"is_symmetric","","",12,[[["self"]],["bool"]]],[11,"calc","","",12,[[["self"],["f32"]],["complex32"]]],[11,"is_symmetric","","",12,[[["self"]],["bool"]]],[11,"calc","","",12,[[["self"],["f64"]],["complex64"]]],[11,"is_symmetric","","",13,[[["self"]],["bool"]]],[11,"calc","","",13,[[["self"],["f32"]],["complex32"]]],[11,"is_symmetric","","",13,[[["self"]],["bool"]]],[11,"calc","","",13,[[["self"],["f64"]],["complex64"]]],[11,"get","basic_dsp_vector","",2,N],[11,"to_slice","","",2,N],[11,"complex","","",2,[[["self"],["usize"]],["complex"]]],[11,"complex","","",2,N],[11,"complex","","",2,N],[11,"complex","","",2,N],[11,"complex","","",2,N],[11,"complex_mut","","",2,[[["self"],["usize"]],["complex"]]],[11,"complex_mut","","",2,N],[11,"complex_mut","","",2,N],[11,"complex_mut","","",2,N],[11,"complex_mut","","",2,N],[11,"domain","","",2,[[["self"]],["datadomain"]]],[11,"is_complex","","",2,[[["self"]],["bool"]]],[11,"domain","","",140,[[["self"]],["datadomain"]]],[11,"is_complex","","",140,[[["self"]],["bool"]]],[11,"resize","","",2,[[["self"],["usize"]],["voidresult"]]],[11,"resize_b","","",2,[[["self"],["b"],["usize"]],["voidresult"]]],[11,"delta","","",2,[[["self"]],["t"]]],[11,"set_delta","","",2,[[["self"],["t"]]]],[11,"len","","",2,[[["self"]],["usize"]]],[11,"is_empty","","",2,[[["self"]],["bool"]]],[11,"points","","",2,[[["self"]],["usize"]]],[11,"get_multicore_settings","","",2,[[["self"]],["multicoresettings"]]],[11,"set_multicore_settings","","",2,[[["self"],["multicoresettings"]]]],[11,"alloc_len","","",2,[[["self"]],["usize"]]],[11,"get_meta_data","","",2,[[["self"]],["typemetadata"]]],[11,"magnitude","","",2,N],[11,"magnitude_squared","","",2,N],[11,"to_real","","",2,N],[11,"to_imag","","",2,N],[11,"phase","","",2,N],[11,"magnitude_b","","",2,N],[11,"magnitude_squared_b","","",2,N],[11,"to_real_b","","",2,N],[11,"to_imag_b","","",2,N],[11,"phase_b","","",2,N],[11,"get_real","","",2,[[["self"],["o"]]]],[11,"get_imag","","",2,[[["self"],["o"]]]],[11,"get_magnitude","","",2,[[["self"],["o"]]]],[11,"get_magnitude_squared","","",2,[[["self"],["o"]]]],[11,"get_phase","","",2,[[["self"],["o"]]]],[11,"get_real_imag","","",2,[[["self"],["o"],["o"]]]],[11,"get_mag_phase","","",2,[[["self"],["o"],["o"]]]],[11,"set_real_imag","","",2,[[["self"],["o"],["o"]],["voidresult"]]],[11,"set_mag_phase","","",2,[[["self"],["o"],["o"]],["voidresult"]]],[11,"multiply_complex_exponential","","",2,[[["self"],["t"],["t"]]]],[11,"conj","","",2,[[["self"]]]],[11,"to_complex","","",2,[[["self"]],["transres"]]],[11,"to_complex_b","","",2,N],[11,"abs","","",2,[[["self"]]]],[11,"wrap","","",2,[[["self"],["t"]]]],[11,"unwrap","","",2,[[["self"],["t"]]]],[11,"ln_approx","","",2,[[["self"]]]],[11,"exp_approx","","",2,[[["self"]]]],[11,"sin_approx","","",2,[[["self"]]]],[11,"cos_approx","","",2,[[["self"]]]],[11,"log_approx","","",2,[[["self"],["t"]]]],[11,"expf_approx","","",2,[[["self"],["t"]]]],[11,"powf_approx","","",2,[[["self"],["t"]]]],[11,"mirror","","",2,[[["self"],["b"]]]],[11,"fft_shift","","",2,[[["self"]]]],[11,"ifft_shift","","",2,[[["self"]]]],[11,"apply_window","","",2,[[["self"],["windowfunction"]]]],[11,"unapply_window","","",2,[[["self"],["windowfunction"]]]],[11,"plain_fft","","",2,N],[11,"fft","","",2,N],[11,"windowed_fft","","",2,N],[11,"plain_sfft","","",2,[[["self"],["b"]],["transres"]]],[11,"sfft","","",2,[[["self"],["b"]],["transres"]]],[11,"windowed_sfft","","",2,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"plain_ifft","","",2,N],[11,"ifft","","",2,N],[11,"windowed_ifft","","",2,N],[11,"plain_sifft","","",2,[[["self"],["b"]],["transres"]]],[11,"sifft","","",2,[[["self"],["b"]],["transres"]]],[11,"windowed_sifft","","",2,[[["self"],["b"],["windowfunction"]],["transres"]]],[11,"prepare_argument","","",2,N],[11,"prepare_argument_padded","","",2,N],[11,"correlate","","",2,[[["self"],["b"],["o"]],["voidresult"]]],[11,"convolve","","",2,[[["self"],["b"],["realimpulseresponse"],["t"],["usize"]]]],[11,"convolve","","",2,[[["self"],["b"],["compleximpulseresponse"],["t"],["usize"]]]],[11,"convolve_signal","","",2,[[["self"],["b"],["dspvec"]],["voidresult"]]],[11,"multiply_frequency_response","","",2,[[["self"],["complexfrequencyresponse"],["t"]]]],[11,"multiply_frequency_response","","",2,[[["self"],["realfrequencyresponse"],["t"]]]],[11,"interpolatef","","",2,[[["self"],["b"],["realimpulseresponse"],["t"],["t"],["usize"]]]],[11,"interpolatei","","",2,[[["self"],["b"],["realfrequencyresponse"],["u32"]],["voidresult"]]],[11,"interpft","","",2,[[["self"],["b"],["usize"]]]],[11,"interpolate","","",2,[[["self"],["b"],["option",["realfrequencyresponse"]],["usize"],["t"]],["voidresult"]]],[11,"decimatei","","",2,[[["self"],["u32"],["u32"]]]],[11,"interpolate_lin","","",2,[[["self"],["b"],["t"],["t"]]]],[11,"interpolate_hermite","","",2,[[["self"],["b"],["t"],["t"]]]],[11,"rededicate_from","","",2,[[["o"]],["self"]]],[11,"rededicate_from_force","","",147,[[["dspvec"]],["self"]]],[11,"rededicate_with_runtime_data","","",147,[[["dspvec"],["bool"],["datadomain"]],["self"]]],[11,"rededicate_from_force","","",148,[[["dspvec"]],["self"]]],[11,"rededicate_with_runtime_data","","",148,[[["dspvec"],["bool"],["datadomain"]],["self"]]],[11,"rededicate_from_force","","",149,[[["dspvec"]],["self"]]],[11,"rededicate_with_runtime_data","","",149,[[["dspvec"],["bool"],["datadomain"]],["self"]]],[11,"rededicate_from_force","","",150,[[["dspvec"]],["self"]]],[11,"rededicate_with_runtime_data","","",150,[[["dspvec"],["bool"],["datadomain"]],["self"]]],[11,"rededicate_from_force","","",151,[[["dspvec"]],["self"]]],[11,"rededicate_with_runtime_data","","",151,[[["dspvec"],["bool"],["datadomain"]],["self"]]],[11,"rededicate","","",2,[[["self"]],["o"]]],[11,"scale","","",2,[[["self"],["t"]]]],[11,"scale","","",2,[[["self"],["complex"]]]],[11,"offset","","",2,[[["self"],["t"]]]],[11,"offset","","",2,[[["self"],["complex"]]]],[11,"add","","",2,[[["self"],["o"]],["voidresult"]]],[11,"sub","","",2,[[["self"],["o"]],["voidresult"]]],[11,"mul","","",2,[[["self"],["o"]],["voidresult"]]],[11,"div","","",2,[[["self"],["o"]],["voidresult"]]],[11,"add_smaller","","",2,[[["self"],["o"]],["voidresult"]]],[11,"sub_smaller","","",2,[[["self"],["o"]],["voidresult"]]],[11,"mul_smaller","","",2,[[["self"],["o"]],["voidresult"]]],[11,"div_smaller","","",2,[[["self"],["o"]],["voidresult"]]],[11,"sin","","",2,[[["self"]]]],[11,"cos","","",2,[[["self"]]]],[11,"tan","","",2,[[["self"]]]],[11,"asin","","",2,[[["self"]]]],[11,"acos","","",2,[[["self"]]]],[11,"atan","","",2,[[["self"]]]],[11,"sinh","","",2,[[["self"]]]],[11,"cosh","","",2,[[["self"]]]],[11,"tanh","","",2,[[["self"]]]],[11,"asinh","","",2,[[["self"]]]],[11,"acosh","","",2,[[["self"]]]],[11,"atanh","","",2,[[["self"]]]],[11,"sqrt","","",2,[[["self"]]]],[11,"square","","",2,[[["self"]]]],[11,"root","","",2,[[["self"],["t"]]]],[11,"powf","","",2,[[["self"],["t"]]]],[11,"ln","","",2,[[["self"]]]],[11,"exp","","",2,[[["self"]]]],[11,"log","","",2,[[["self"],["t"]]]],[11,"expf","","",2,[[["self"],["t"]]]],[11,"reverse","","",2,[[["self"]]]],[11,"swap_halves","","",2,[[["self"]]]],[11,"zero_pad","","",2,[[["self"],["usize"],["paddingoption"]],["voidresult"]]],[11,"zero_interleave","","",2,[[["self"],["u32"]],["voidresult"]]],[11,"zero_pad_b","","",2,[[["self"],["b"],["usize"],["paddingoption"]],["voidresult"]]],[11,"zero_interleave_b","","",2,[[["self"],["b"],["u32"]]]],[11,"split_into","","",2,N],[11,"merge","","",2,N],[11,"diff","","",2,[[["self"]]]],[11,"diff_with_start","","",2,[[["self"]]]],[11,"cum_sum","","",2,[[["self"]]]],[11,"dot_product","","",2,[[["self"],["o"]],["scalarresult"]]],[11,"dot_product","","",2,[[["self"],["o"]],["scalarresult",["complex"]]]],[11,"dot_product_prec","","",2,[[["self"],["o"]],["scalarresult"]]],[11,"dot_product_prec","","",2,[[["self"],["o"]],["scalarresult",["complex"]]]],[11,"map_inplace","","",2,[[["self"],["a"],["f"]]]],[11,"map_inplace","","",2,[[["self"],["a"],["f"]]]],[11,"map_aggregate","","",2,[[["self"],["a"],["fmap"],["faggr"]],["scalarresult"]]],[11,"map_aggregate","","",2,[[["self"],["a"],["fmap"],["faggr"]],["scalarresult"]]],[11,"statistics","","",2,[[["self"]],["statistics"]]],[11,"statistics","","",2,[[["self"]],["statistics",["complex"]]]],[11,"statistics_split","","",2,[[["self"],["usize"]],["scalarresult",["statsvec"]]]],[11,"statistics_split","","",2,[[["self"],["usize"]],["scalarresult",["statsvec"]]]],[11,"sum","","",2,[[["self"]],["t"]]],[11,"sum_sq","","",2,[[["self"]],["t"]]],[11,"sum","","",2,[[["self"]],["complex"]]],[11,"sum_sq","","",2,[[["self"]],["complex"]]],[11,"empty","","",1,[[],["self"]]],[11,"invalid","","",1,[[],["self"]]],[11,"merge","","",1,N],[11,"merge_cols","","",1,N],[11,"empty_vec","","",1,[[["usize"]],["statsvec"]]],[11,"add","","",1,[[["self"],["t"],["usize"]]]],[11,"empty","","",1,[[],["self"]]],[11,"invalid","","",1,[[],["self"]]],[11,"merge","","",1,N],[11,"merge_cols","","",1,N],[11,"empty_vec","","",1,[[["usize"]],["statsvec"]]],[11,"add","","",1,[[["self"],["complex"],["usize"]]]],[11,"statistics_prec","","",2,[[["self"]],["statistics",["f64"]]]],[11,"statistics_prec","","",2,[[["self"]],["statistics",["f64"]]]],[11,"statistics_prec","","",2,[[["self"]],["statistics",["complex"]]]],[11,"statistics_prec","","",2,[[["self"]],["statistics",["complex"]]]],[11,"statistics_split_prec","","",2,[[["self"],["usize"]],["scalarresult",["statsvec"]]]],[11,"statistics_split_prec","","",2,[[["self"],["usize"]],["scalarresult",["statsvec"]]]],[11,"statistics_split_prec","","",2,[[["self"],["usize"]],["scalarresult",["statsvec"]]]],[11,"statistics_split_prec","","",2,[[["self"],["usize"]],["scalarresult",["statsvec"]]]],[11,"sum_prec","","",2,[[["self"]],["f64"]]],[11,"sum_sq_prec","","",2,[[["self"]],["f64"]]],[11,"sum_prec","","",2,[[["self"]],["f64"]]],[11,"sum_sq_prec","","",2,[[["self"]],["f64"]]],[11,"sum_prec","","",2,[[["self"]],["complex",["f64"]]]],[11,"sum_sq_prec","","",2,[[["self"]],["complex",["f64"]]]],[11,"sum_prec","","",2,[[["self"]],["complex",["f64"]]]],[11,"sum_sq_prec","","",2,[[["self"]],["complex",["f64"]]]],[11,"add_prec","","",1,[[["self"],["t"],["usize"],["t"],["t"]]]],[11,"add_prec","","",1,[[["self"],["complex"],["usize"],["complex"],["complex"]]]],[11,"trade","","",136,[[["self"],["s"]]]],[11,"trade","","",137,[[["self"],["vec"]]]],[11,"trade","","",139,[[["self"],["vec"]]]],[11,"trade","","",141,[[["self"],["s"]]]],[11,"borrow","","",18,N],[11,"alloc_len","","",18,[[["self"]],["usize"]]],[11,"borrow","","",19,N],[11,"alloc_len","","",19,[[["self"]],["usize"]]],[11,"borrow","","",138,N],[11,"alloc_len","","",138,[[["self"]],["usize"]]],[11,"is_complex","basic_dsp_vector::meta","",142,[[["self"]],["bool"]]],[11,"to_complex","","",142,[[["self"]]]],[11,"to_real","","",142,[[["self"]]]],[11,"is_complex","","",143,[[["self"]],["bool"]]],[11,"to_complex","","",143,[[["self"]]]],[11,"to_real","","",143,[[["self"]]]],[11,"is_complex","","",16,[[["self"]],["bool"]]],[11,"to_complex","","",16,[[["self"]]]],[11,"to_real","","",16,[[["self"]]]],[11,"domain","","",144,[[["self"]],["datadomain"]]],[11,"to_freq","","",144,[[["self"]]]],[11,"to_time","","",144,[[["self"]]]],[11,"domain","","",145,[[["self"]],["datadomain"]]],[11,"to_time","","",145,[[["self"]]]],[11,"to_freq","","",145,[[["self"]]]],[11,"domain","","",17,[[["self"]],["datadomain"]]],[11,"to_freq","","",17,[[["self"]]]],[11,"to_time","","",17,[[["self"]]]],[11,"is_symmetric","basic_dsp_vector::window_functions","",146,[[["self"]],["bool"]]],[11,"window","","",146,[[["self"],["usize"],["usize"]],["t"]]],[11,"is_symmetric","","",21,[[["self"]],["bool"]]],[11,"window","","",21,[[["self"],["usize"],["usize"]],["t"]]],[11,"zero","basic_dsp_vector::numbers","",22,[[],["self"]]],[11,"eq","basic_dsp_vector::meta","",142,[[["self"],["real"]],["bool"]]],[11,"eq","","",143,[[["self"],["complex"]],["bool"]]],[11,"eq","","",16,[[["self"],["realorcomplex"]],["bool"]]],[11,"ne","","",16,[[["self"],["realorcomplex"]],["bool"]]],[11,"eq","","",144,[[["self"],["time"]],["bool"]]],[11,"eq","","",145,[[["self"],["freq"]],["bool"]]],[11,"eq","","",17,[[["self"],["timeorfreq"]],["bool"]]],[11,"ne","","",17,[[["self"],["timeorfreq"]],["bool"]]],[11,"eq","basic_dsp_vector","",3,[[["self"],["errorreason"]],["bool"]]],[11,"eq","","",4,[[["self"],["paddingoption"]],["bool"]]],[11,"eq","","",1,[[["self"],["statistics"]],["bool"]]],[11,"ne","","",1,[[["self"],["statistics"]],["bool"]]],[11,"eq","","",5,[[["self"],["datadomain"]],["bool"]]],[11,"default","basic_dsp_vector::conv_types","",15,[[],["sincfunction"]]],[11,"default","basic_dsp_vector","",19,[[],["singlebuffer"]]],[11,"clone","basic_dsp_vector::meta","",142,[[["self"]],["real"]]],[11,"clone","","",143,[[["self"]],["complex"]]],[11,"clone","","",16,[[["self"]],["realorcomplex"]]],[11,"clone","","",144,[[["self"]],["time"]]],[11,"clone","","",145,[[["self"]],["freq"]]],[11,"clone","","",17,[[["self"]],["timeorfreq"]]],[11,"clone","basic_dsp_vector","",0,[[["self"]],["multicoresettings"]]],[11,"clone","","",2,[[["self"]],["self"]]],[11,"clone_from","","",2,[[["self"],["self"]]]],[11,"clone","","",3,[[["self"]],["errorreason"]]],[11,"clone","","",4,[[["self"]],["paddingoption"]]],[11,"clone","","",1,[[["self"]],["statistics"]]],[11,"clone","","",5,[[["self"]],["datadomain"]]],[11,"clone","","",140,[[["self"]],["typemetadata"]]],[11,"from","","",147,[[["s"]],["self"]]],[11,"from","","",149,[[["s"]],["self"]]],[11,"from","","",148,[[["s"]],["self"]]],[11,"from","","",150,[[["s"]],["self"]]],[11,"fmt","basic_dsp_vector::meta","",142,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",143,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",144,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",145,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","basic_dsp_vector","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"deref","","",136,N],[11,"deref","","",137,N],[11,"deref","","",139,N],[11,"deref","","",141,N],[11,"deref_mut","","",136,N],[11,"deref_mut","","",137,N],[11,"deref_mut","","",139,N],[11,"deref_mut","","",141,N],[11,"index","","",2,[[["self"],["usize"]],["t"]]],[11,"index","","",2,N],[11,"index","","",2,N],[11,"index","","",2,N],[11,"index","","",2,N],[11,"index_mut","","",2,[[["self"],["usize"]],["t"]]],[11,"index_mut","","",2,N],[11,"index_mut","","",2,N],[11,"index_mut","","",2,N],[11,"index_mut","","",2,N],[11,"new","basic_dsp_vector::numbers","Create a new Complex",22,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",22,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily have a sqrt function), i.e. `re^2 + im^2`.",22,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",22,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",22,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",22,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",22,[[["self"]],["complex"]]],[11,"norm","","Calculate |self|",22,[[["self"]],["t"]]],[11,"arg","","Calculate the principal Arg of self.",22,[[["self"]],["t"]]],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i * theta)`",22,N],[11,"from_polar","","Convert a polar representation into a complex number.",22,[[["t"],["t"]],["complex"]]],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",22,[[["self"]],["complex"]]],[11,"ln","","Computes the principal value of natural logarithm of `self`.",22,[[["self"]],["complex"]]],[11,"sqrt","","Computes the principal value of the square root of `self`.",22,[[["self"]],["complex"]]],[11,"powf","","Raises `self` to a floating point power.",22,[[["self"],["t"]],["complex"]]],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",22,[[["self"],["t"]],["complex"]]],[11,"powc","","Raises `self` to a complex power.",22,[[["self"],["complex"]],["complex"]]],[11,"expf","","Raises a floating point number to the complex power `self`.",22,[[["self"],["t"]],["complex"]]],[11,"sin","","Computes the sine of `self`.",22,[[["self"]],["complex"]]],[11,"cos","","Computes the cosine of `self`.",22,[[["self"]],["complex"]]],[11,"tan","","Computes the tangent of `self`.",22,[[["self"]],["complex"]]],[11,"asin","","Computes the principal value of the inverse sine of `self`.",22,[[["self"]],["complex"]]],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",22,[[["self"]],["complex"]]],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",22,[[["self"]],["complex"]]],[11,"sinh","","Computes the hyperbolic sine of `self`.",22,[[["self"]],["complex"]]],[11,"cosh","","Computes the hyperbolic cosine of `self`.",22,[[["self"]],["complex"]]],[11,"tanh","","Computes the hyperbolic tangent of `self`.",22,[[["self"]],["complex"]]],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",22,[[["self"]],["complex"]]],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",22,[[["self"]],["complex"]]],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",22,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",22,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",22,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",22,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",22,[[["self"]],["bool"]]]],"paths":[[3,"MultiCoreSettings"],[3,"Statistics"],[3,"DspVec"],[4,"ErrorReason"],[4,"PaddingOption"],[4,"DataDomain"],[8,"RealImpulseResponse"],[8,"RealFrequencyResponse"],[8,"ComplexImpulseResponse"],[8,"ComplexFrequencyResponse"],[3,"RealTimeLinearTableLookup"],[3,"RealFrequencyLinearTableLookup"],[3,"ComplexTimeLinearTableLookup"],[3,"ComplexFrequencyLinearTableLookup"],[3,"RaisedCosineFunction"],[3,"SincFunction"],[3,"RealOrComplex"],[3,"TimeOrFreq"],[3,"FixedLenBuffer"],[3,"SingleBuffer"],[8,"WindowFunction"],[3,"HammingWindow"],[3,"Complex"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"Float"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Real"],[8,"Signed"],[8,"Num"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"ToSimd"],[8,"Zero"],[8,"ToSlice"],[8,"ToSliceMut"],[8,"Resize"],[8,"ToDspVector"],[8,"ToRealVector"],[8,"ToComplexVector"],[8,"FromVector"],[8,"InterleaveToVector"],[8,"ToDspVectorPar"],[8,"ToRealVectorPar"],[8,"ToComplexVectorPar"],[8,"ComplexIndex"],[8,"ComplexIndexMut"],[8,"MetaData"],[8,"ResizeOps"],[8,"ResizeBufferedOps"],[8,"Vector"],[8,"GetMetaData"],[8,"ComplexToRealTransformsOps"],[8,"ComplexToRealTransformsOpsBuffered"],[8,"ComplexToRealGetterOps"],[8,"ComplexToRealSetterOps"],[8,"ComplexOps"],[8,"RealToComplexTransformsOps"],[8,"RealToComplexTransformsOpsBuffered"],[8,"RealOps"],[8,"ModuloOps"],[8,"ApproximatedOps"],[8,"FrequencyDomainOperations"],[8,"TimeDomainOperations"],[8,"TimeToFrequencyDomainOperations"],[8,"SymmetricTimeToFrequencyDomainOperations"],[8,"FrequencyToTimeDomainOperations"],[8,"SymmetricFrequencyToTimeDomainOperations"],[8,"CrossCorrelationArgumentOps"],[8,"CrossCorrelationOps"],[8,"Convolution"],[8,"ConvolutionOps"],[8,"FrequencyMultiplication"],[8,"InterpolationOps"],[8,"RealInterpolationOps"],[8,"RededicateOps"],[8,"RededicateForceOps"],[8,"RededicateToOps"],[8,"ToRealResult"],[8,"ToComplexResult"],[8,"ToTimeResult"],[8,"ToFreqResult"],[8,"ToRealTimeResult"],[8,"ScaleOps"],[8,"OffsetOps"],[8,"ElementaryOps"],[8,"ElementaryWrapAroundOps"],[8,"TrigOps"],[8,"PowerOps"],[8,"ReorganizeDataOps"],[8,"InsertZerosOps"],[8,"InsertZerosOpsBuffered"],[8,"SplitOps"],[8,"MergeOps"],[8,"DiffSumOps"],[8,"DotProductOps"],[8,"PreciseDotProductOps"],[8,"MapInplaceOps"],[8,"MapAggregateOps"],[8,"StatisticsOps"],[8,"StatisticsSplitOps"],[8,"SumOps"],[8,"Stats"],[8,"PreciseStatisticsOps"],[8,"PreciseStatisticsSplitOps"],[8,"PreciseSumOps"],[8,"PreciseStats"],[8,"BufferBorrow"],[8,"Buffer"],[8,"NumberSpace"],[8,"Domain"],[3,"FixedLenBufferBurrow"],[3,"SingleBufferBurrow"],[3,"NoBuffer"],[3,"NoBufferBurrow"],[3,"TypeMetaData"],[3,"NoTradeBufferBurrow"],[3,"Real"],[3,"Complex"],[3,"Time"],[3,"Freq"],[3,"TriangularWindow"],[6,"RealTimeVec"],[6,"RealFreqVec"],[6,"ComplexTimeVec"],[6,"ComplexFreqVec"],[6,"GenDspVec"]]};
initSearch(searchIndex);
