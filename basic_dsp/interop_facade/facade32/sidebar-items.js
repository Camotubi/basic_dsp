initSidebarItems({"fn":[["abs32",""],["acos32",""],["acosh32",""],["add_smaller_vector32",""],["add_vector32",""],["apply_custom_window32","Creates a window from the function `window` and the void pointer `window_data`. The `window_data` pointer is passed to the `window` function at every call and can be used to store parameters."],["apply_window32","`window` argument is translated to:"],["asin32",""],["asinh32",""],["atan32",""],["atanh32",""],["clone32",""],["complex_conj32",""],["complex_data32",""],["complex_divide32",""],["complex_dot_product32",""],["complex_offset32",""],["complex_scale32",""],["complex_statistics32",""],["complex_statistics_splitted32",""],["convolve32","`impulse_response` argument is translated to:"],["convolve_complex32","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`. The `impulse_response_data` pointer is passed to the `impulse_response` function at every call and can be used to store parameters."],["convolve_real32","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`. The `impulse_response_data` pointer is passed to the `impulse_response` function at every call and can be used to store parameters."],["convolve_vector32",""],["correlate32",""],["cos32",""],["cosh32",""],["cum_sum32",""],["decimatei32",""],["delete_vector32",""],["diff32",""],["diff_with_start32",""],["divide_smaller_vector32",""],["divide_vector32",""],["exp_base32",""],["expn32",""],["fft32",""],["fft_shift32",""],["get_allocated_len32",""],["get_delta32",""],["get_domain32","Returns the vector domain as integer:"],["get_imag32",""],["get_len32",""],["get_mag_phase32",""],["get_magnitude32",""],["get_phase32",""],["get_points32",""],["get_real32",""],["get_real_imag32",""],["get_value32",""],["ifft32",""],["ifft_shift32",""],["interpolate_hermite32",""],["interpolate_lin32",""],["interpolatef32","`impulse_response` argument is translated to:"],["interpolatef_custom32","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`. The `impulse_response_data` pointer is passed to the `impulse_response` function at every call and can be used to store parameters."],["interpolatei32","`frequency_response` argument is translated to:"],["interpolatei_custom32","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`. The `frequency_response_data` pointer is passed to the `frequency_response` function at every call and can be used to store parameters."],["is_complex32",""],["log_base32",""],["logn32",""],["magnitude32",""],["magnitude_squared32",""],["merge32",""],["mirror32",""],["multiply_complex_exponential32",""],["multiply_frequency_response32","`frequency_response` argument is translated to:"],["multiply_frequency_response_complex32","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`. The `frequency_response` pointer is passed to the `frequency_response` function at every call and can be used to store parameters."],["multiply_frequency_response_real32","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`. The `frequency_response_data` pointer is passed to the `frequency_response` function at every call and can be used to store parameters."],["multiply_smaller_vector32",""],["multiply_vector32",""],["new32",""],["new_with_performance_options32",""],["override_data32",""],["phase32",""],["plain_fft32",""],["plain_ifft32",""],["plain_sfft32",""],["plain_sifft32",""],["power32",""],["prepare_argument32",""],["prepare_argument_padded32",""],["real_dot_product32",""],["real_offset32",""],["real_scale32",""],["real_statistics32",""],["real_statistics_splitted32",""],["reverse32",""],["root32",""],["set_len32",""],["set_mag_phase32",""],["set_real_imag32",""],["set_value32",""],["sfft32",""],["sifft32",""],["sin32",""],["sinh32",""],["split_into32",""],["sqrt32",""],["square32",""],["subtract_smaller_vector32",""],["subtract_vector32",""],["swap_halves32",""],["tan32",""],["tanh32",""],["to_complex32",""],["to_imag32",""],["to_real32",""],["unapply_custom_window32","See `apply_custom_window32` for a description of the `window` and `window_data` parameter."],["unapply_window32","See `apply_window32` for a description of the `window` parameter."],["unwrap32",""],["windowed_custom_fft32","See `apply_custom_window32` for a description of the `window` and `window_data` parameter."],["windowed_custom_ifft32","See `apply_custom_window32` for a description of the `window` and `window_data` parameter."],["windowed_custom_sfft32","See `apply_custom_window32` for a description of the `window` and `window_data` parameter."],["windowed_custom_sifft32","See `apply_custom_window32` for a description of the `window` and `window_data` parameter."],["windowed_fft32","See `apply_window32` for a description of the `window` parameter."],["windowed_ifft32","See `apply_window32` for a description of the `window` parameter."],["windowed_sfft32","See `apply_window32` for a description of the `window` parameter."],["windowed_sifft32","See `apply_window32` for a description of the `window` parameter."],["wrap32",""],["zero_interleave32",""],["zero_pad32","`padding_option` argument is translated to: Returns the vector domain as integer:"]]});