initSidebarItems({"fn":[["abs64",""],["acos64",""],["acosh64",""],["add_smaller_vector64",""],["add_vector64",""],["apply_custom_window64","Creates a window from the function `window` and the void pointer `window_data`. The `window_data` pointer is passed to the `window` function at every call and can be used to store parameters."],["apply_window64","`window` argument is translated to:"],["asin64",""],["asinh64",""],["atan64",""],["atanh64",""],["clone64",""],["complex_conj64",""],["complex_data64",""],["complex_divide64",""],["complex_dot_product64",""],["complex_offset64",""],["complex_scale64",""],["complex_statistics64",""],["complex_statistics_splitted64",""],["convolve64","`impulse_response` argument is translated to:"],["convolve_complex64","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`. The `impulse_response_data` pointer is passed to the `impulse_response` function at every call and can be used to store parameters."],["convolve_real64","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`. The `impulse_response_data` pointer is passed to the `impulse_response` function at every call and can be used to store parameters."],["convolve_vector64",""],["correlate64",""],["cos64",""],["cosh64",""],["cum_sum64",""],["decimatei64",""],["delete_vector64",""],["diff64",""],["diff_with_start64",""],["divide_smaller_vector64",""],["divide_vector64",""],["exp_base64",""],["expn64",""],["fft64",""],["fft_shift64",""],["get_allocated_len64",""],["get_delta64",""],["get_domain64","Returns the vector domain as integer:"],["get_imag64",""],["get_len64",""],["get_mag_phase64",""],["get_magnitude64",""],["get_phase64",""],["get_points64",""],["get_real64",""],["get_real_imag64",""],["get_value64",""],["ifft64",""],["ifft_shift64",""],["interpolate_hermite64",""],["interpolate_lin64",""],["interpolatef64","`impulse_response` argument is translated to:"],["interpolatef_custom64","Convolves the vector with an impulse response defined by `impulse_response` and the void pointer `impulse_response_data`. The `impulse_response_data` pointer is passed to the `impulse_response` function at every call and can be used to store parameters."],["interpolatei64","`frequency_response` argument is translated to:"],["interpolatei_custom64","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`. The `frequency_response_data` pointer is passed to the `frequency_response` function at every call and can be used to store parameters."],["is_complex64",""],["log_base64",""],["logn64",""],["magnitude64",""],["magnitude_squared64",""],["merge64",""],["mirror64",""],["multiply_complex_exponential64",""],["multiply_frequency_response64","`frequency_response` argument is translated to:"],["multiply_frequency_response_complex64","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`. The `frequency_response` pointer is passed to the `frequency_response` function at every call and can be used to store parameters."],["multiply_frequency_response_real64","Convolves the vector with an impulse response defined by `frequency_response` and the void pointer `frequency_response_data`. The `frequency_response_data` pointer is passed to the `frequency_response` function at every call and can be used to store parameters."],["multiply_smaller_vector64",""],["multiply_vector64",""],["new64",""],["new_with_performance_options64",""],["override_data64",""],["phase64",""],["plain_fft64",""],["plain_ifft64",""],["plain_sfft64",""],["plain_sifft64",""],["power64",""],["prepare_argument64",""],["prepare_argument_padded64",""],["real_dot_product64",""],["real_offset64",""],["real_scale64",""],["real_statistics64",""],["real_statistics_splitted64",""],["reverse64",""],["root64",""],["set_len64",""],["set_mag_phase64",""],["set_real_imag64",""],["set_value64",""],["sfft64",""],["sifft64",""],["sin64",""],["sinh64",""],["split_into64",""],["sqrt64",""],["square64",""],["subtract_smaller_vector64",""],["subtract_vector64",""],["swap_halves64",""],["tan64",""],["tanh64",""],["to_complex64",""],["to_imag64",""],["to_real64",""],["unapply_custom_window64","See `apply_custom_window64` for a description of the `window` and `window_data` parameter."],["unapply_window64","See `apply_window64` for a description of the `window` parameter."],["unwrap64",""],["windowed_custom_fft64","See `apply_custom_window64` for a description of the `window` and `window_data` parameter."],["windowed_custom_ifft64","See `apply_custom_window64` for a description of the `window` and `window_data` parameter."],["windowed_custom_sfft64","See `apply_custom_window64` for a description of the `window` and `window_data` parameter."],["windowed_custom_sifft64","See `apply_custom_window64` for a description of the `window` and `window_data` parameter."],["windowed_fft64","See `apply_window64` for a description of the `window` parameter."],["windowed_ifft64","See `apply_window64` for a description of the `window` parameter."],["windowed_sfft64","See `apply_window64` for a description of the `window` parameter."],["windowed_sifft64","See `apply_window64` for a description of the `window` parameter."],["wrap64",""],["zero_interleave64",""],["zero_pad64","`padding_option` argument is translated to: Returns the vector domain as integer:"]]});