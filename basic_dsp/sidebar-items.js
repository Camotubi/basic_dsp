initSidebarItems({"enum":[["DataVectorDomain","The domain of a data vector"],["ErrorReason","Enumeration of all error reasons"],["EvenOdd","Argument for some operations to determine if the result should have an even or odd number of points."],["Operation","An alternative way to define operations on a vector. Warning: Highly unstable and not even fully implemented right now."]],"mod":[["conv_types","Types around a convolution, see also https://en.wikipedia.org/wiki/Convolution."],["interop_facade","Clients using other programming languages should use the functions in this mod. Please refer to the other chapters of the help for documentation of the functions."],["window_functions","This mod contains a definition for window functions and provides implementations for a few standard windows. See the `WindowFunction` type for more information."]],"struct":[["ComplexFreqVector","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations. All data vector operations consume the vector they operate on and return a new vector. A consumed vector must not be accessed again."],["ComplexTimeVector","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations. All data vector operations consume the vector they operate on and return a new vector. A consumed vector must not be accessed again."],["GenericDataVector","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations. All data vector operations consume the vector they operate on and return a new vector. A consumed vector must not be accessed again."],["MultiCoreSettings","Holds parameters which specifiy how multiple cores are used to execute an operation."],["RealFreqVector","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations. All data vector operations consume the vector they operate on and return a new vector. A consumed vector must not be accessed again."],["RealTimeVector","A 1xN (one times N elements) or Nx1 data vector as used for most digital signal processing (DSP) operations. All data vector operations consume the vector they operate on and return a new vector. A consumed vector must not be accessed again."],["Statistics","Statistics about the data in a vector"]],"trait":[["ComplexVectorOperations","Defines all operations which are valid on `DataVectors` containing complex data. # Failures All operations in this trait fail with `VectorMustBeComplex` if the vector isn't in the complex number space."],["Convolution","Provides a convolution operation for data vectors."],["CrossCorrelation","Cross-correlation of data vectors. See also https://en.wikipedia.org/wiki/Cross-correlation"],["DataVector","DataVector gives access to the basic properties of all data vectors"],["FrequencyDomainOperations","Defines all operations which are valid on `DataVectors` containing complex data. # Failures All operations in this trait fail with `VectorMustBeInFrquencyDomain` or `VectorMustBeComplex`  if the vector isn't in frequency domain and complex number space."],["GenericVectorOperations","Defines all operations which are valid on all `DataVectors`."],["Offset","An operation which adds a constant to each vector element"],["RealNumber","A real floating pointer number intended to abstract over `f32` and `f64`."],["RealVectorOperations","Defines all operations which are valid on `DataVectors` containing real data. # Failures All operations in this trait fail with `VectorMustBeReal` if the vector isn't in the real number space."],["RededicateVector","This trait allows to change a vector type. The operations will convert a vector to a different type and set `self.len()` to zero. However `self.allocated_len()` will remain unchanged. The use case for this is to allow to reuse the memory of a vector for different operations."],["Scale","An operation which multiplies each vector element with a constant"],["TimeDomainOperations","Defines all operations which are valid on `DataVectors` containing real data. # Failures All operations in this trait fail with `VectorMustBeInTimeDomain` if the vector isn't in time domain."]],"type":[["ComplexFreqVector32","Specialization of a vector for a certain data type."],["ComplexFreqVector64","Specialization of a vector for a certain data type."],["ComplexTimeVector32","Specialization of a vector for a certain data type."],["ComplexTimeVector64","Specialization of a vector for a certain data type."],["DataVector32","Specialization of a vector for a certain data type."],["DataVector64","Specialization of a vector for a certain data type."],["RealFreqVector32","Specialization of a vector for a certain data type."],["RealFreqVector64","Specialization of a vector for a certain data type."],["RealTimeVector32","Specialization of a vector for a certain data type."],["RealTimeVector64","Specialization of a vector for a certain data type."],["VecResult","Result contains on success the vector. On failure it contains an error reason and an vector with invalid data which still can be used in order to avoid memory allocation."],["VoidResult","Void/nothing in case of success or a reason in case of an error."]]});